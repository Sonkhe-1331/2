{"ast":null,"code":"import _toConsumableArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getEventTarget } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\nvar _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var formFieldId_r1 = ctx.id;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\n\nvar _c1 = [\"*\"];\nvar _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\n\nvar MatAutocompleteSelectedEvent = /*#__PURE__*/_createClass(function MatAutocompleteSelectedEvent(\n/** Reference to the autocomplete panel that emitted the event. */\nsource,\n/** Option that was selected. */\noption) {\n  _classCallCheck(this, MatAutocompleteSelectedEvent);\n\n  this.source = source;\n  this.option = option;\n}); // Boilerplate for applying mixins to MatAutocomplete.\n\n/** @docs-private */\n\n\nvar _MatAutocompleteMixinBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  return _createClass(_class);\n}());\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\n\n\nvar MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\n\n\nvar _MatAutocompleteBase = /*#__PURE__*/(function () {\n  var _MatAutocompleteBase = /*#__PURE__*/function (_MatAutocompleteMixin) {\n    _inherits(_MatAutocompleteBase, _MatAutocompleteMixin);\n\n    var _super = _createSuper(_MatAutocompleteBase);\n\n    function _MatAutocompleteBase(_changeDetectorRef, _elementRef, defaults, platform) {\n      var _this;\n\n      _classCallCheck(this, _MatAutocompleteBase);\n\n      _this = _super.call(this);\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._elementRef = _elementRef;\n      _this._activeOptionChanges = Subscription.EMPTY;\n      /** Whether the autocomplete panel should be visible, depending on option length. */\n\n      _this.showPanel = false;\n      _this._isOpen = false;\n      /** Function that maps an option's control value to its display value in the trigger. */\n\n      _this.displayWith = null;\n      /** Event that is emitted whenever an option from the list is selected. */\n\n      _this.optionSelected = new EventEmitter();\n      /** Event that is emitted when the autocomplete panel is opened. */\n\n      _this.opened = new EventEmitter();\n      /** Event that is emitted when the autocomplete panel is closed. */\n\n      _this.closed = new EventEmitter();\n      /** Emits whenever an option is activated using the keyboard. */\n\n      _this.optionActivated = new EventEmitter();\n      _this._classList = {};\n      /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n\n      _this.id = \"mat-autocomplete-\".concat(_uniqueAutocompleteIdCounter++); // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n      // Safari using VoiceOver. We should occasionally check back to see whether the bug\n      // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n      // option altogether.\n\n      _this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n      _this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n      return _this;\n    }\n    /** Whether the autocomplete panel is open. */\n\n\n    _createClass(_MatAutocompleteBase, [{\n      key: \"isOpen\",\n      get: function get() {\n        return this._isOpen && this.showPanel;\n      }\n      /**\n       * Whether the first option should be highlighted when the autocomplete panel is opened.\n       * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n       */\n\n    }, {\n      key: \"autoActiveFirstOption\",\n      get: function get() {\n        return this._autoActiveFirstOption;\n      },\n      set: function set(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n      }\n      /**\n       * Takes classes set on the host mat-autocomplete element and applies them to the panel\n       * inside the overlay container to allow for easy styling.\n       */\n\n    }, {\n      key: \"classList\",\n      set: function set(value) {\n        if (value && value.length) {\n          this._classList = coerceStringArray(value).reduce(function (classList, className) {\n            classList[className] = true;\n            return classList;\n          }, {});\n        } else {\n          this._classList = {};\n        }\n\n        this._setVisibilityClasses(this._classList);\n\n        this._elementRef.nativeElement.className = '';\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this2 = this;\n\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(function (index) {\n          _this2.optionActivated.emit({\n            source: _this2,\n            option: _this2.options.toArray()[index] || null\n          });\n        }); // Set the initial visibility state.\n\n        this._setVisibility();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n      }\n      /**\n       * Sets the panel scrollTop. This allows us to manually scroll to display options\n       * above or below the fold, as they are not actually being focused when active.\n       */\n\n    }, {\n      key: \"_setScrollTop\",\n      value: function _setScrollTop(scrollTop) {\n        if (this.panel) {\n          this.panel.nativeElement.scrollTop = scrollTop;\n        }\n      }\n      /** Returns the panel's scrollTop. */\n\n    }, {\n      key: \"_getScrollTop\",\n      value: function _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n      }\n      /** Panel should hide itself when the option list is empty. */\n\n    }, {\n      key: \"_setVisibility\",\n      value: function _setVisibility() {\n        this.showPanel = !!this.options.length;\n\n        this._setVisibilityClasses(this._classList);\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /** Emits the `select` event. */\n\n    }, {\n      key: \"_emitSelectEvent\",\n      value: function _emitSelectEvent(option) {\n        var event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n      }\n      /** Gets the aria-labelledby for the autocomplete panel. */\n\n    }, {\n      key: \"_getPanelAriaLabelledby\",\n      value: function _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n          return null;\n        }\n\n        var labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n      }\n      /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n\n    }, {\n      key: \"_setVisibilityClasses\",\n      value: function _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n      }\n    }]);\n\n    return _MatAutocompleteBase;\n  }(_MatAutocompleteMixinBase);\n\n  _MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) {\n    return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform));\n  };\n\n  _MatAutocompleteBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatAutocompleteBase,\n    viewQuery: function _MatAutocompleteBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      }\n    },\n    inputs: {\n      displayWith: \"displayWith\",\n      autoActiveFirstOption: \"autoActiveFirstOption\",\n      classList: [\"class\", \"classList\"],\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      panelWidth: \"panelWidth\"\n    },\n    outputs: {\n      optionSelected: \"optionSelected\",\n      opened: \"opened\",\n      closed: \"closed\",\n      optionActivated: \"optionActivated\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return _MatAutocompleteBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MatAutocomplete = /*#__PURE__*/(function () {\n  var MatAutocomplete = /*#__PURE__*/function (_MatAutocompleteBase2) {\n    _inherits(MatAutocomplete, _MatAutocompleteBase2);\n\n    var _super2 = _createSuper(MatAutocomplete);\n\n    function MatAutocomplete() {\n      var _this3;\n\n      _classCallCheck(this, MatAutocomplete);\n\n      _this3 = _super2.apply(this, arguments);\n      _this3._visibleClass = 'mat-autocomplete-visible';\n      _this3._hiddenClass = 'mat-autocomplete-hidden';\n      return _this3;\n    }\n\n    return _createClass(MatAutocomplete);\n  }(_MatAutocompleteBase);\n\n  MatAutocomplete.ɵfac = /*@__PURE__*/function () {\n    var ɵMatAutocomplete_BaseFactory;\n    return function MatAutocomplete_Factory(t) {\n      return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete);\n    };\n  }();\n\n  MatAutocomplete.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatAutocomplete,\n    selectors: [[\"mat-autocomplete\"]],\n    contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-autocomplete\"],\n    inputs: {\n      disableRipple: \"disableRipple\"\n    },\n    exportAs: [\"matAutocomplete\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatAutocomplete\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n    template: function MatAutocomplete_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n      }\n    },\n    directives: [ɵngcc2.NgClass],\n    styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatAutocomplete;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n\n\nvar _MatAutocompleteOriginBase = /*#__PURE__*/(function () {\n  var _MatAutocompleteOriginBase = /*#__PURE__*/_createClass(function _MatAutocompleteOriginBase(\n  /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    _classCallCheck(this, _MatAutocompleteOriginBase);\n\n    this.elementRef = elementRef;\n  });\n\n  _MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) {\n    return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  _MatAutocompleteOriginBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatAutocompleteOriginBase\n  });\n  return _MatAutocompleteOriginBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n\n\nvar MatAutocompleteOrigin = /*#__PURE__*/(function () {\n  var MatAutocompleteOrigin = /*#__PURE__*/function (_MatAutocompleteOrigi) {\n    _inherits(MatAutocompleteOrigin, _MatAutocompleteOrigi);\n\n    var _super3 = _createSuper(MatAutocompleteOrigin);\n\n    function MatAutocompleteOrigin() {\n      _classCallCheck(this, MatAutocompleteOrigin);\n\n      return _super3.apply(this, arguments);\n    }\n\n    return _createClass(MatAutocompleteOrigin);\n  }(_MatAutocompleteOriginBase);\n\n  MatAutocompleteOrigin.ɵfac = /*@__PURE__*/function () {\n    var ɵMatAutocompleteOrigin_BaseFactory;\n    return function MatAutocompleteOrigin_Factory(t) {\n      return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin);\n    };\n  }();\n\n  MatAutocompleteOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatAutocompleteOrigin,\n    selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n    exportAs: [\"matAutocompleteOrigin\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatAutocompleteOrigin;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\n\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\n\nvar MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return MatAutocompleteTrigger;\n  }),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n\n\nvar _MatAutocompleteTriggerBase = /*#__PURE__*/(function () {\n  var _MatAutocompleteTriggerBase = /*#__PURE__*/function () {\n    function _MatAutocompleteTriggerBase(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n      var _this4 = this;\n\n      _classCallCheck(this, _MatAutocompleteTriggerBase);\n\n      this._element = _element;\n      this._overlay = _overlay;\n      this._viewContainerRef = _viewContainerRef;\n      this._zone = _zone;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._dir = _dir;\n      this._formField = _formField;\n      this._document = _document;\n      this._viewportRuler = _viewportRuler;\n      this._defaults = _defaults;\n      this._componentDestroyed = false;\n      this._autocompleteDisabled = false;\n      /** Whether or not the label state is being overridden. */\n\n      this._manuallyFloatingLabel = false;\n      /** Subscription to viewport size changes. */\n\n      this._viewportSubscription = Subscription.EMPTY;\n      /**\n       * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n       * closed autocomplete from being reopened if the user switches to another browser tab and then\n       * comes back.\n       */\n\n      this._canOpenOnNextFocus = true;\n      /** Stream of keyboard events that can close the panel. */\n\n      this._closeKeyEventStream = new Subject();\n      /**\n       * Event handler for when the window is blurred. Needs to be an\n       * arrow function in order to preserve the context.\n       */\n\n      this._windowBlurHandler = function () {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        _this4._canOpenOnNextFocus = _this4._document.activeElement !== _this4._element.nativeElement || _this4.panelOpen;\n      };\n      /** `View -> model callback called when value changes` */\n\n\n      this._onChange = function () {};\n      /** `View -> model callback called when autocomplete has been touched` */\n\n\n      this._onTouched = function () {};\n      /**\n       * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n       * will render the panel underneath the trigger if there is enough space for it to fit in\n       * the viewport, otherwise the panel will be shown above it. If the position is set to\n       * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n       * whether it fits completely in the viewport.\n       */\n\n\n      this.position = 'auto';\n      /**\n       * `autocomplete` attribute to be set on the input element.\n       * @docs-private\n       */\n\n      this.autocompleteAttribute = 'off';\n      this._overlayAttached = false;\n      /** Stream of autocomplete option selections. */\n\n      this.optionSelections = defer(function () {\n        if (_this4.autocomplete && _this4.autocomplete.options) {\n          return merge.apply(void 0, _toConsumableArray(_this4.autocomplete.options.map(function (option) {\n            return option.onSelectionChange;\n          })));\n        } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n\n\n        return _this4._zone.onStable.pipe(take(1), switchMap(function () {\n          return _this4.optionSelections;\n        }));\n      });\n      this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n\n\n    _createClass(_MatAutocompleteTriggerBase, [{\n      key: \"autocompleteDisabled\",\n      get: function get() {\n        return this._autocompleteDisabled;\n      },\n      set: function set(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this5 = this;\n\n        var window = this._getWindow();\n\n        if (typeof window !== 'undefined') {\n          this._zone.runOutsideAngular(function () {\n            return window.addEventListener('blur', _this5._windowBlurHandler);\n          });\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n          this._setStrategyPositions(this._positionStrategy);\n\n          if (this.panelOpen) {\n            this._overlayRef.updatePosition();\n          }\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var window = this._getWindow();\n\n        if (typeof window !== 'undefined') {\n          window.removeEventListener('blur', this._windowBlurHandler);\n        }\n\n        this._viewportSubscription.unsubscribe();\n\n        this._componentDestroyed = true;\n\n        this._destroyPanel();\n\n        this._closeKeyEventStream.complete();\n      }\n      /** Whether or not the autocomplete panel is open. */\n\n    }, {\n      key: \"panelOpen\",\n      get: function get() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n      }\n      /** Opens the autocomplete suggestion panel. */\n\n    }, {\n      key: \"openPanel\",\n      value: function openPanel() {\n        this._attachOverlay();\n\n        this._floatLabel();\n      }\n      /** Closes the autocomplete suggestion panel. */\n\n    }, {\n      key: \"closePanel\",\n      value: function closePanel() {\n        this._resetLabel();\n\n        if (!this._overlayAttached) {\n          return;\n        }\n\n        if (this.panelOpen) {\n          // Only emit if the panel was visible.\n          this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete._isOpen = this._overlayAttached = false;\n\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n\n          this._closingActionsSubscription.unsubscribe();\n        } // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n        if (!this._componentDestroyed) {\n          // We need to trigger change detection manually, because\n          // `fromEvent` doesn't seem to do it at the proper time.\n          // This ensures that the label is reset when the\n          // user clicks outside.\n          this._changeDetectorRef.detectChanges();\n        }\n      }\n      /**\n       * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n       * within the viewport.\n       */\n\n    }, {\n      key: \"updatePosition\",\n      value: function updatePosition() {\n        if (this._overlayAttached) {\n          this._overlayRef.updatePosition();\n        }\n      }\n      /**\n       * A stream of actions that should close the autocomplete panel, including\n       * when an option is selected, on blur, and when TAB is pressed.\n       */\n\n    }, {\n      key: \"panelClosingActions\",\n      get: function get() {\n        var _this6 = this;\n\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(function () {\n          return _this6._overlayAttached;\n        })), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(function () {\n          return _this6._overlayAttached;\n        })) : of()).pipe( // Normalize the output so we return a consistent type.\n        map(function (event) {\n          return event instanceof MatOptionSelectionChange ? event : null;\n        }));\n      }\n      /** The currently active option, coerced to MatOption type. */\n\n    }, {\n      key: \"activeOption\",\n      get: function get() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n          return this.autocomplete._keyManager.activeItem;\n        }\n\n        return null;\n      }\n      /** Stream of clicks outside of the autocomplete panel. */\n\n    }, {\n      key: \"_getOutsideClickStream\",\n      value: function _getOutsideClickStream() {\n        var _this7 = this;\n\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(function (event) {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          var clickTarget = _getEventTarget(event);\n\n          var formField = _this7._formField ? _this7._formField._elementRef.nativeElement : null;\n          var customOrigin = _this7.connectedTo ? _this7.connectedTo.elementRef.nativeElement : null;\n          return _this7._overlayAttached && clickTarget !== _this7._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!_this7._overlayRef && !_this7._overlayRef.overlayElement.contains(clickTarget);\n        }));\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        var _this8 = this;\n\n        Promise.resolve(null).then(function () {\n          return _this8._setTriggerValue(value);\n        });\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._onChange = fn;\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this._onTouched = fn;\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n      }\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        var keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n          event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n          this.activeOption._selectViaInteraction();\n\n          this._resetActiveItem();\n\n          event.preventDefault();\n        } else if (this.autocomplete) {\n          var prevActiveItem = this.autocomplete._keyManager.activeItem;\n          var isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n          if (this.panelOpen || keyCode === TAB) {\n            this.autocomplete._keyManager.onKeydown(event);\n          } else if (isArrowKey && this._canOpen()) {\n            this.openPanel();\n          }\n\n          if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n            this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n          }\n        }\n      }\n    }, {\n      key: \"_handleInput\",\n      value: function _handleInput(event) {\n        var target = event.target;\n        var value = target.value; // Based on `NumberValueAccessor` from forms.\n\n        if (target.type === 'number') {\n          value = value == '' ? null : parseFloat(value);\n        } // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n        if (this._previousValue !== value) {\n          this._previousValue = value;\n\n          this._onChange(value);\n\n          if (this._canOpen() && this._document.activeElement === event.target) {\n            this.openPanel();\n          }\n        }\n      }\n    }, {\n      key: \"_handleFocus\",\n      value: function _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n          this._canOpenOnNextFocus = true;\n        } else if (this._canOpen()) {\n          this._previousValue = this._element.nativeElement.value;\n\n          this._attachOverlay();\n\n          this._floatLabel(true);\n        }\n      }\n      /**\n       * In \"auto\" mode, the label will animate down as soon as focus is lost.\n       * This causes the value to jump when selecting an option with the mouse.\n       * This method manually floats the label until the panel can be closed.\n       * @param shouldAnimate Whether the label should be animated when it is floated.\n       */\n\n    }, {\n      key: \"_floatLabel\",\n      value: function _floatLabel() {\n        var shouldAnimate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        if (this._formField && this._formField.floatLabel === 'auto') {\n          if (shouldAnimate) {\n            this._formField._animateAndLockLabel();\n          } else {\n            this._formField.floatLabel = 'always';\n          }\n\n          this._manuallyFloatingLabel = true;\n        }\n      }\n      /** If the label has been manually elevated, return it to its normal state. */\n\n    }, {\n      key: \"_resetLabel\",\n      value: function _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n          this._formField.floatLabel = 'auto';\n          this._manuallyFloatingLabel = false;\n        }\n      }\n      /**\n       * This method listens to a stream of panel closing actions and resets the\n       * stream every time the option list changes.\n       */\n\n    }, {\n      key: \"_subscribeToClosingActions\",\n      value: function _subscribeToClosingActions() {\n        var _this9 = this;\n\n        var firstStable = this._zone.onStable.pipe(take(1));\n\n        var optionChanges = this.autocomplete.options.changes.pipe(tap(function () {\n          return _this9._positionStrategy.reapplyLastPosition();\n        }), // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0)); // When the zone is stable initially, and when the option list changes...\n\n        return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(function () {\n          var wasOpen = _this9.panelOpen;\n\n          _this9._resetActiveItem();\n\n          _this9.autocomplete._setVisibility();\n\n          if (_this9.panelOpen) {\n            _this9._overlayRef.updatePosition(); // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n            // event, because we may not have emitted it when the panel was attached. This\n            // can happen if the users opens the panel and there are no options, but the\n            // options come in slightly later or as a result of the value changing.\n\n\n            if (wasOpen !== _this9.panelOpen) {\n              _this9.autocomplete.opened.emit();\n            }\n          }\n\n          return _this9.panelClosingActions;\n        }), // when the first closing event occurs...\n        take(1)) // set the value, close the panel, and complete.\n        .subscribe(function (event) {\n          return _this9._setValueAndClose(event);\n        });\n      }\n      /** Destroys the autocomplete suggestion panel. */\n\n    }, {\n      key: \"_destroyPanel\",\n      value: function _destroyPanel() {\n        if (this._overlayRef) {\n          this.closePanel();\n\n          this._overlayRef.dispose();\n\n          this._overlayRef = null;\n        }\n      }\n    }, {\n      key: \"_setTriggerValue\",\n      value: function _setTriggerValue(value) {\n        var toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value; // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n\n        var inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n\n        if (this._formField) {\n          this._formField._control.value = inputValue;\n        } else {\n          this._element.nativeElement.value = inputValue;\n        }\n\n        this._previousValue = inputValue;\n      }\n      /**\n       * This method closes the panel, and if a value is specified, also sets the associated\n       * control to that value. It will also mark the control as dirty if this interaction\n       * stemmed from the user.\n       */\n\n    }, {\n      key: \"_setValueAndClose\",\n      value: function _setValueAndClose(event) {\n        if (event && event.source) {\n          this._clearPreviousSelectedOption(event.source);\n\n          this._setTriggerValue(event.source.value);\n\n          this._onChange(event.source.value);\n\n          this._element.nativeElement.focus();\n\n          this.autocomplete._emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n      }\n      /**\n       * Clear any previous selected option and emit a selection change event for this option\n       */\n\n    }, {\n      key: \"_clearPreviousSelectedOption\",\n      value: function _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(function (option) {\n          if (option !== skip && option.selected) {\n            option.deselect();\n          }\n        });\n      }\n    }, {\n      key: \"_attachOverlay\",\n      value: function _attachOverlay() {\n        var _this10 = this;\n\n        var _a;\n\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatAutocompleteMissingPanelError();\n        }\n\n        var overlayRef = this._overlayRef;\n\n        if (!overlayRef) {\n          this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n            id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId()\n          });\n          overlayRef = this._overlay.create(this._getOverlayConfig());\n          this._overlayRef = overlayRef; // Use the `keydownEvents` in order to take advantage of\n          // the overlay event targeting provided by the CDK overlay.\n\n          overlayRef.keydownEvents().subscribe(function (event) {\n            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n            if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n              _this10._resetActiveItem();\n\n              _this10._closeKeyEventStream.next(); // We need to stop propagation, otherwise the event will eventually\n              // reach the input itself and cause the overlay to be reopened.\n\n\n              event.stopPropagation();\n              event.preventDefault();\n            }\n          });\n          this._viewportSubscription = this._viewportRuler.change().subscribe(function () {\n            if (_this10.panelOpen && overlayRef) {\n              overlayRef.updateSize({\n                width: _this10._getPanelWidth()\n              });\n            }\n          });\n        } else {\n          // Update the trigger, panel width and direction, in case anything has changed.\n          this._positionStrategy.setOrigin(this._getConnectedElement());\n\n          overlayRef.updateSize({\n            width: this._getPanelWidth()\n          });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n          overlayRef.attach(this._portal);\n          this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n\n        var wasOpen = this.panelOpen;\n\n        this.autocomplete._setVisibility();\n\n        this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n          this.autocomplete.opened.emit();\n        }\n      }\n    }, {\n      key: \"_getOverlayConfig\",\n      value: function _getOverlayConfig() {\n        var _a;\n\n        return new OverlayConfig({\n          positionStrategy: this._getOverlayPosition(),\n          scrollStrategy: this._scrollStrategy(),\n          width: this._getPanelWidth(),\n          direction: this._dir,\n          panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass\n        });\n      }\n    }, {\n      key: \"_getOverlayPosition\",\n      value: function _getOverlayPosition() {\n        var strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n\n        this._setStrategyPositions(strategy);\n\n        this._positionStrategy = strategy;\n        return strategy;\n      }\n      /** Sets the positions on a position strategy based on the directive's input state. */\n\n    }, {\n      key: \"_setStrategyPositions\",\n      value: function _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        var belowPositions = [{\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        }, {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        }]; // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n\n        var panelClass = this._aboveClass;\n        var abovePositions = [{\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n          panelClass: panelClass\n        }, {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom',\n          panelClass: panelClass\n        }];\n        var positions;\n\n        if (this.position === 'above') {\n          positions = abovePositions;\n        } else if (this.position === 'below') {\n          positions = belowPositions;\n        } else {\n          positions = [].concat(belowPositions, abovePositions);\n        }\n\n        positionStrategy.withPositions(positions);\n      }\n    }, {\n      key: \"_getConnectedElement\",\n      value: function _getConnectedElement() {\n        if (this.connectedTo) {\n          return this.connectedTo.elementRef;\n        }\n\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n      }\n    }, {\n      key: \"_getPanelWidth\",\n      value: function _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n      }\n      /** Returns the width of the input element, so the panel width can match it. */\n\n    }, {\n      key: \"_getHostWidth\",\n      value: function _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n      }\n      /**\n       * Resets the active item to -1 so arrow events will activate the\n       * correct options, or to 0 if the consumer opted into it.\n       */\n\n    }, {\n      key: \"_resetActiveItem\",\n      value: function _resetActiveItem() {\n        var autocomplete = this.autocomplete;\n\n        if (autocomplete.autoActiveFirstOption) {\n          // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n          // the former will find the next enabled option, if the first one is disabled.\n          autocomplete._keyManager.setFirstItemActive();\n        } else {\n          autocomplete._keyManager.setActiveItem(-1);\n        }\n      }\n      /** Determines whether the panel can be opened. */\n\n    }, {\n      key: \"_canOpen\",\n      value: function _canOpen() {\n        var element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n      }\n      /** Use defaultView of injected document if available or fallback to global window reference */\n\n    }, {\n      key: \"_getWindow\",\n      value: function _getWindow() {\n        var _a;\n\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n      }\n      /** Scrolls to a particular option in the list. */\n\n    }, {\n      key: \"_scrollToOption\",\n      value: function _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        var autocomplete = this.autocomplete;\n\n        var labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n\n        if (index === 0 && labelCount === 1) {\n          // If we've got one group label before the option and we're at the top option,\n          // scroll the list to the top. This is better UX than scrolling the list to the\n          // top of the option, because it allows the user to read the top group's label.\n          autocomplete._setScrollTop(0);\n        } else if (autocomplete.panel) {\n          var option = autocomplete.options.toArray()[index];\n\n          if (option) {\n            var element = option._getHostElement();\n\n            var newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n\n            autocomplete._setScrollTop(newScrollPosition);\n          }\n        }\n      }\n    }]);\n\n    return _MatAutocompleteTriggerBase;\n  }();\n\n  _MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) {\n    return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8));\n  };\n\n  _MatAutocompleteTriggerBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatAutocompleteTriggerBase,\n    inputs: {\n      position: [\"matAutocompletePosition\", \"position\"],\n      autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n      autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"],\n      autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n      connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"]\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return _MatAutocompleteTriggerBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MatAutocompleteTrigger = /*#__PURE__*/(function () {\n  var MatAutocompleteTrigger = /*#__PURE__*/function (_MatAutocompleteTrigg) {\n    _inherits(MatAutocompleteTrigger, _MatAutocompleteTrigg);\n\n    var _super4 = _createSuper(MatAutocompleteTrigger);\n\n    function MatAutocompleteTrigger() {\n      var _this11;\n\n      _classCallCheck(this, MatAutocompleteTrigger);\n\n      _this11 = _super4.apply(this, arguments);\n      _this11._aboveClass = 'mat-autocomplete-panel-above';\n      return _this11;\n    }\n\n    return _createClass(MatAutocompleteTrigger);\n  }(_MatAutocompleteTriggerBase);\n\n  MatAutocompleteTrigger.ɵfac = /*@__PURE__*/function () {\n    var ɵMatAutocompleteTrigger_BaseFactory;\n    return function MatAutocompleteTrigger_Factory(t) {\n      return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger);\n    };\n  }();\n\n  MatAutocompleteTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatAutocompleteTrigger,\n    selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n    hostAttrs: [1, \"mat-autocomplete-trigger\"],\n    hostVars: 7,\n    hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n          return ctx._handleFocus();\n        })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n          return ctx._onTouched();\n        })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n          return ctx._handleInput($event);\n        })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n      }\n    },\n    exportAs: [\"matAutocompleteTrigger\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatAutocompleteTrigger;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatAutocompleteModule = /*#__PURE__*/(function () {\n  var MatAutocompleteModule = /*#__PURE__*/_createClass(function MatAutocompleteModule() {\n    _classCallCheck(this, MatAutocompleteModule);\n  });\n\n  MatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n    return new (t || MatAutocompleteModule)();\n  };\n\n  MatAutocompleteModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatAutocompleteModule\n  });\n  MatAutocompleteModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule, MatOptionModule, MatCommonModule]\n  });\n  return MatAutocompleteModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, {\n    declarations: function declarations() {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin];\n    },\n    imports: function imports() {\n      return [OverlayModule, MatOptionModule, MatCommonModule, CommonModule];\n    },\n    exports: function exports() {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };","map":{"version":3,"names":["ActiveDescendantKeyManager","coerceBooleanProperty","coerceStringArray","Platform","_getEventTarget","InjectionToken","EventEmitter","Directive","ChangeDetectorRef","ElementRef","Inject","ViewChild","TemplateRef","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","ViewContainerRef","NgZone","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","Subscription","Subject","defer","merge","of","fromEvent","DOCUMENT","CommonModule","Overlay","OverlayConfig","OverlayModule","ViewportRuler","CdkScrollableModule","Directionality","ESCAPE","hasModifierKey","ENTER","UP_ARROW","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","MatFormField","MAT_FORM_FIELD","take","switchMap","filter","map","tap","delay","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","id","ctx_r0","ɵɵnextContext","ɵɵproperty","_classList","ɵɵattribute","ariaLabel","_getPanelAriaLabelledby","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","_autoActiveFirstOption","value","length","reduce","classList","className","_setVisibilityClasses","nativeElement","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","unsubscribe","scrollTop","panel","markForCheck","event","labelId","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","_MatAutocompleteBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatAutocompleteBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","template","first","inputs","panelWidth","outputs","features","ɵɵInheritDefinitionFeature","ngDevMode","MatAutocomplete","arguments","ɵMatAutocomplete_BaseFactory","MatAutocomplete_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","optionGroups","hostAttrs","disableRipple","exportAs","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","directives","NgClass","styles","encapsulation","changeDetection","_MatAutocompleteOriginBase","elementRef","_MatAutocompleteOriginBase_Factory","MatAutocompleteOrigin","ɵMatAutocompleteOrigin_BaseFactory","MatAutocompleteOrigin_Factory","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","pipe","_scrollStrategy","window","_getWindow","runOutsideAngular","addEventListener","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","tabOut","_getOutsideClickStream","detachments","activeItem","clickTarget","formField","customOrigin","connectedTo","contains","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","disabled","keyCode","preventDefault","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","activeItemIndex","target","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","_a","overlayRef","_portal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_setScrollTop","_getHostElement","newScrollPosition","offsetTop","offsetHeight","_getScrollTop","_MatAutocompleteTriggerBase_Factory","autocompleteDisabled","ɵɵNgOnChangesFeature","ɵMatAutocompleteTrigger_BaseFactory","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","_handleFocus","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","_handleInput","MatAutocompleteTrigger_keydown_HostBindingHandler","_handleKeydown","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js"],"sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getEventTarget } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {\n});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) { return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform)); };\n_MatAutocompleteBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteBase, viewQuery: function _MatAutocompleteBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, inputs: { displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },\n    { type: Platform }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc1.Platform }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocomplete_BaseFactory; return function MatAutocomplete_Factory(t) { return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete); }; }();\nMatAutocomplete.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    } }, directives: [ɵngcc2.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n            }]\n    }], null, { optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) { return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\n_MatAutocompleteOriginBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteOriginBase });\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteOrigin_BaseFactory; return function MatAutocompleteOrigin_Factory(t) { return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin); }; }();\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId() });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) { return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8)); };\n_MatAutocompleteTriggerBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteTriggerBase, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc3.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteTrigger_BaseFactory; return function MatAutocompleteTrigger_Factory(t) { return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger); }; }();\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule\n        ], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule]; }, exports: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}