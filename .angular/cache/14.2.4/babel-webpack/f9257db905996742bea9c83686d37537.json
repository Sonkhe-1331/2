{"ast":null,"code":"import _slicedToArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, ErrorHandler, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar _c0 = [\"*\"];\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(\"Unable to find icon with the name \\\"\".concat(iconName, \"\\\"\"));\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(\"The URL provided to MatIconRegistry was not trusted as a resource URL \" + \"via Angular's DomSanitizer. Attempted URL was \\\"\".concat(url, \"\\\".\"));\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(\"The literal provided to MatIconRegistry was not trusted as safe HTML by \" + \"Angular's DomSanitizer. Attempted literal was \\\"\".concat(literal, \"\\\".\"));\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\n\n\nvar SvgIconConfig = /*#__PURE__*/_createClass(function SvgIconConfig(url, svgText, options) {\n  _classCallCheck(this, SvgIconConfig);\n\n  this.url = url;\n  this.svgText = svgText;\n  this.options = options;\n});\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n\n\nvar MatIconRegistry = /*#__PURE__*/(function () {\n  var MatIconRegistry = /*#__PURE__*/function () {\n    function MatIconRegistry(_httpClient, _sanitizer, document, _errorHandler) {\n      _classCallCheck(this, MatIconRegistry);\n\n      this._httpClient = _httpClient;\n      this._sanitizer = _sanitizer;\n      this._errorHandler = _errorHandler;\n      /**\n       * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n       */\n\n      this._svgIconConfigs = new Map();\n      /**\n       * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n       * Multiple icon sets can be registered under the same namespace.\n       */\n\n      this._iconSetConfigs = new Map();\n      /** Cache for icons loaded by direct URLs. */\n\n      this._cachedIconsByUrl = new Map();\n      /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n\n      this._inProgressUrlFetches = new Map();\n      /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n\n      this._fontCssClassesByAlias = new Map();\n      /** Registered icon resolver functions. */\n\n      this._resolvers = [];\n      /**\n       * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n       * The default 'material-icons' value assumes that the material icon font has been loaded as\n       * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n       */\n\n      this._defaultFontSetClass = 'material-icons';\n      this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n\n\n    _createClass(MatIconRegistry, [{\n      key: \"addSvgIcon\",\n      value: function addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n      }\n      /**\n       * Registers an icon using an HTML string in the default namespace.\n       * @param iconName Name under which the icon should be registered.\n       * @param literal SVG source of the icon.\n       */\n\n    }, {\n      key: \"addSvgIconLiteral\",\n      value: function addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n      }\n      /**\n       * Registers an icon by URL in the specified namespace.\n       * @param namespace Namespace in which the icon should be registered.\n       * @param iconName Name under which the icon should be registered.\n       * @param url\n       */\n\n    }, {\n      key: \"addSvgIconInNamespace\",\n      value: function addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n      }\n      /**\n       * Registers an icon resolver function with the registry. The function will be invoked with the\n       * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n       * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n       * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n       * will be invoked in the order in which they have been registered.\n       * @param resolver Resolver function to be registered.\n       */\n\n    }, {\n      key: \"addSvgIconResolver\",\n      value: function addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n\n        return this;\n      }\n      /**\n       * Registers an icon using an HTML string in the specified namespace.\n       * @param namespace Namespace in which the icon should be registered.\n       * @param iconName Name under which the icon should be registered.\n       * @param literal SVG source of the icon.\n       */\n\n    }, {\n      key: \"addSvgIconLiteralInNamespace\",\n      value: function addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        var cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal); // TODO: add an ngDevMode check\n\n\n        if (!cleanLiteral) {\n          throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n      }\n      /**\n       * Registers an icon set by URL in the default namespace.\n       * @param url\n       */\n\n    }, {\n      key: \"addSvgIconSet\",\n      value: function addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n      }\n      /**\n       * Registers an icon set using an HTML string in the default namespace.\n       * @param literal SVG source of the icon set.\n       */\n\n    }, {\n      key: \"addSvgIconSetLiteral\",\n      value: function addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n      }\n      /**\n       * Registers an icon set by URL in the specified namespace.\n       * @param namespace Namespace in which to register the icon set.\n       * @param url\n       */\n\n    }, {\n      key: \"addSvgIconSetInNamespace\",\n      value: function addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n      }\n      /**\n       * Registers an icon set using an HTML string in the specified namespace.\n       * @param namespace Namespace in which to register the icon set.\n       * @param literal SVG source of the icon set.\n       */\n\n    }, {\n      key: \"addSvgIconSetLiteralInNamespace\",\n      value: function addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        var cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n        if (!cleanLiteral) {\n          throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n      }\n      /**\n       * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n       * component with the alias as the fontSet input will cause the class name to be applied\n       * to the `<mat-icon>` element.\n       *\n       * @param alias Alias for the font.\n       * @param className Class name override to be used instead of the alias.\n       */\n\n    }, {\n      key: \"registerFontClassAlias\",\n      value: function registerFontClassAlias(alias) {\n        var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : alias;\n\n        this._fontCssClassesByAlias.set(alias, className);\n\n        return this;\n      }\n      /**\n       * Returns the CSS class name associated with the alias by a previous call to\n       * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n       */\n\n    }, {\n      key: \"classNameForFontAlias\",\n      value: function classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n      }\n      /**\n       * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n       * have a fontSet input value, and is not loading an icon by name or URL.\n       *\n       * @param className\n       */\n\n    }, {\n      key: \"setDefaultFontSetClass\",\n      value: function setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n      }\n      /**\n       * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n       * have a fontSet input value, and is not loading an icon by name or URL.\n       */\n\n    }, {\n      key: \"getDefaultFontSetClass\",\n      value: function getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n      }\n      /**\n       * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n       * The response from the URL may be cached so this will not always cause an HTTP request, but\n       * the produced element will always be a new copy of the originally fetched icon. (That is,\n       * it will not contain any modifications made to elements previously returned).\n       *\n       * @param safeUrl URL from which to fetch the SVG icon.\n       */\n\n    }, {\n      key: \"getSvgIconFromUrl\",\n      value: function getSvgIconFromUrl(safeUrl) {\n        var _this = this;\n\n        var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n        if (!url) {\n          throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n\n        var cachedIcon = this._cachedIconsByUrl.get(url);\n\n        if (cachedIcon) {\n          return of(cloneSvg(cachedIcon));\n        }\n\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(function (svg) {\n          return _this._cachedIconsByUrl.set(url, svg);\n        }), map(function (svg) {\n          return cloneSvg(svg);\n        }));\n      }\n      /**\n       * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n       * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n       * if not, the Observable will throw an error.\n       *\n       * @param name Name of the icon to be retrieved.\n       * @param namespace Namespace in which to look for the icon.\n       */\n\n    }, {\n      key: \"getNamedSvgIcon\",\n      value: function getNamedSvgIcon(name) {\n        var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        var key = iconKey(namespace, name);\n\n        var config = this._svgIconConfigs.get(key); // Return (copy of) cached icon if possible.\n\n\n        if (config) {\n          return this._getSvgFromConfig(config);\n        } // Otherwise try to resolve the config from one of the resolver functions.\n\n\n        config = this._getIconConfigFromResolvers(namespace, name);\n\n        if (config) {\n          this._svgIconConfigs.set(key, config);\n\n          return this._getSvgFromConfig(config);\n        } // See if we have any icon sets registered for the namespace.\n\n\n        var iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n        if (iconSetConfigs) {\n          return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n\n        return throwError(getMatIconNameNotFoundError(key));\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._resolvers = [];\n\n        this._svgIconConfigs.clear();\n\n        this._iconSetConfigs.clear();\n\n        this._cachedIconsByUrl.clear();\n      }\n      /**\n       * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n       */\n\n    }, {\n      key: \"_getSvgFromConfig\",\n      value: function _getSvgFromConfig(config) {\n        if (config.svgText) {\n          // We already have the SVG element for this icon, return a copy.\n          return of(cloneSvg(this._svgElementFromConfig(config)));\n        } else {\n          // Fetch the icon from the config's URL, cache it, and return a copy.\n          return this._loadSvgIconFromConfig(config).pipe(map(function (svg) {\n            return cloneSvg(svg);\n          }));\n        }\n      }\n      /**\n       * Attempts to find an icon with the specified name in any of the SVG icon sets.\n       * First searches the available cached icons for a nested element with a matching name, and\n       * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n       * that have not been cached, and searches again after all fetches are completed.\n       * The returned Observable produces the SVG element if possible, and throws\n       * an error if no icon with the specified name can be found.\n       */\n\n    }, {\n      key: \"_getSvgFromIconSetConfigs\",\n      value: function _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        var _this2 = this;\n\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n        if (namedIcon) {\n          // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n          // time anyway, there's probably not much advantage compared to just always extracting\n          // it from the icon set.\n          return of(namedIcon);\n        } // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n\n\n        var iconSetFetchRequests = iconSetConfigs.filter(function (iconSetConfig) {\n          return !iconSetConfig.svgText;\n        }).map(function (iconSetConfig) {\n          return _this2._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(function (err) {\n            var url = _this2._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n\n\n            var errorMessage = \"Loading icon set URL: \".concat(url, \" failed: \").concat(err.message);\n\n            _this2._errorHandler.handleError(new Error(errorMessage));\n\n            return of(null);\n          }));\n        }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n\n        return forkJoin(iconSetFetchRequests).pipe(map(function () {\n          var foundIcon = _this2._extractIconWithNameFromAnySet(name, iconSetConfigs); // TODO: add an ngDevMode check\n\n\n          if (!foundIcon) {\n            throw getMatIconNameNotFoundError(name);\n          }\n\n          return foundIcon;\n        }));\n      }\n      /**\n       * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n       * tag matches the specified name. If found, copies the nested element to a new SVG element and\n       * returns it. Returns null if no matching element is found.\n       */\n\n    }, {\n      key: \"_extractIconWithNameFromAnySet\",\n      value: function _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (var i = iconSetConfigs.length - 1; i >= 0; i--) {\n          var config = iconSetConfigs[i]; // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n          // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n          // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n          // some of the parsing.\n\n          if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n            var svg = this._svgElementFromConfig(config);\n\n            var foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n\n            if (foundIcon) {\n              return foundIcon;\n            }\n          }\n        }\n\n        return null;\n      }\n      /**\n       * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n       * from it.\n       */\n\n    }, {\n      key: \"_loadSvgIconFromConfig\",\n      value: function _loadSvgIconFromConfig(config) {\n        var _this3 = this;\n\n        return this._fetchIcon(config).pipe(tap(function (svgText) {\n          return config.svgText = svgText;\n        }), map(function () {\n          return _this3._svgElementFromConfig(config);\n        }));\n      }\n      /**\n       * Loads the content of the icon set URL specified in the\n       * SvgIconConfig and attaches it to the config.\n       */\n\n    }, {\n      key: \"_loadSvgIconSetFromConfig\",\n      value: function _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n          return of(null);\n        }\n\n        return this._fetchIcon(config).pipe(tap(function (svgText) {\n          return config.svgText = svgText;\n        }));\n      }\n      /**\n       * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n       * tag matches the specified name. If found, copies the nested element to a new SVG element and\n       * returns it. Returns null if no matching element is found.\n       */\n\n    }, {\n      key: \"_extractSvgIconFromSet\",\n      value: function _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        var iconSource = iconSet.querySelector(\"[id=\\\"\".concat(iconName, \"\\\"]\"));\n\n        if (!iconSource) {\n          return null;\n        } // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n\n\n        var iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n          return this._setSvgAttributes(iconElement, options);\n        } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n          return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        } // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n\n\n        var svg = this._svgElementFromString('<svg></svg>'); // Clone the node so we don't remove it from the parent icon set element.\n\n\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n      }\n      /**\n       * Creates a DOM element from the given SVG string.\n       */\n\n    }, {\n      key: \"_svgElementFromString\",\n      value: function _svgElementFromString(str) {\n        var div = this._document.createElement('DIV');\n\n        div.innerHTML = str;\n        var svg = div.querySelector('svg'); // TODO: add an ngDevMode check\n\n        if (!svg) {\n          throw Error('<svg> tag not found');\n        }\n\n        return svg;\n      }\n      /**\n       * Converts an element into an SVG node by cloning all of its children.\n       */\n\n    }, {\n      key: \"_toSvgElement\",\n      value: function _toSvgElement(element) {\n        var svg = this._svgElementFromString('<svg></svg>');\n\n        var attributes = element.attributes; // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n\n        for (var i = 0; i < attributes.length; i++) {\n          var _attributes$i = attributes[i],\n              name = _attributes$i.name,\n              value = _attributes$i.value;\n\n          if (name !== 'id') {\n            svg.setAttribute(name, value);\n          }\n        }\n\n        for (var _i = 0; _i < element.childNodes.length; _i++) {\n          if (element.childNodes[_i].nodeType === this._document.ELEMENT_NODE) {\n            svg.appendChild(element.childNodes[_i].cloneNode(true));\n          }\n        }\n\n        return svg;\n      }\n      /**\n       * Sets the default attributes for an SVG element to be used as an icon.\n       */\n\n    }, {\n      key: \"_setSvgAttributes\",\n      value: function _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n        if (options && options.viewBox) {\n          svg.setAttribute('viewBox', options.viewBox);\n        }\n\n        return svg;\n      }\n      /**\n       * Returns an Observable which produces the string contents of the given icon. Results may be\n       * cached, so future calls with the same URL may not cause another HTTP request.\n       */\n\n    }, {\n      key: \"_fetchIcon\",\n      value: function _fetchIcon(iconConfig) {\n        var _this4 = this;\n\n        var _a;\n\n        var safeUrl = iconConfig.url,\n            options = iconConfig.options;\n        var withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n\n        if (!this._httpClient) {\n          throw getMatIconNoHttpProviderError();\n        } // TODO: add an ngDevMode check\n\n\n        if (safeUrl == null) {\n          throw Error(\"Cannot fetch icon from URL \\\"\".concat(safeUrl, \"\\\".\"));\n        }\n\n        var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl); // TODO: add an ngDevMode check\n\n\n        if (!url) {\n          throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        } // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n\n\n        var inProgressFetch = this._inProgressUrlFetches.get(url);\n\n        if (inProgressFetch) {\n          return inProgressFetch;\n        }\n\n        var req = this._httpClient.get(url, {\n          responseType: 'text',\n          withCredentials: withCredentials\n        }).pipe(finalize(function () {\n          return _this4._inProgressUrlFetches.delete(url);\n        }), share());\n\n        this._inProgressUrlFetches.set(url, req);\n\n        return req;\n      }\n      /**\n       * Registers an icon config by name in the specified namespace.\n       * @param namespace Namespace in which to register the icon config.\n       * @param iconName Name under which to register the config.\n       * @param config Config to be registered.\n       */\n\n    }, {\n      key: \"_addSvgIconConfig\",\n      value: function _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n        return this;\n      }\n      /**\n       * Registers an icon set config in the specified namespace.\n       * @param namespace Namespace in which to register the icon config.\n       * @param config Config to be registered.\n       */\n\n    }, {\n      key: \"_addSvgIconSetConfig\",\n      value: function _addSvgIconSetConfig(namespace, config) {\n        var configNamespace = this._iconSetConfigs.get(namespace);\n\n        if (configNamespace) {\n          configNamespace.push(config);\n        } else {\n          this._iconSetConfigs.set(namespace, [config]);\n        }\n\n        return this;\n      }\n      /** Parses a config's text into an SVG element. */\n\n    }, {\n      key: \"_svgElementFromConfig\",\n      value: function _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n          var svg = this._svgElementFromString(config.svgText);\n\n          this._setSvgAttributes(svg, config.options);\n\n          config.svgElement = svg;\n        }\n\n        return config.svgElement;\n      }\n      /** Tries to create an icon config through the registered resolver functions. */\n\n    }, {\n      key: \"_getIconConfigFromResolvers\",\n      value: function _getIconConfigFromResolvers(namespace, name) {\n        for (var i = 0; i < this._resolvers.length; i++) {\n          var result = this._resolvers[i](name, namespace);\n\n          if (result) {\n            return isSafeUrlWithOptions(result) ? new SvgIconConfig(result.url, null, result.options) : new SvgIconConfig(result, null);\n          }\n        }\n\n        return undefined;\n      }\n    }]);\n\n    return MatIconRegistry;\n  }();\n\n  MatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n    return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler));\n  };\n\n  MatIconRegistry.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function MatIconRegistry_Factory() {\n      return new MatIconRegistry(i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i3.DOCUMENT, 8), i0.ɵɵinject(i0.ErrorHandler));\n    },\n    token: MatIconRegistry,\n    providedIn: \"root\"\n  });\n  return MatIconRegistry;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-private */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\n\n\nvar ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatIconRegistry], [/*#__PURE__*/new Optional(), HttpClient], DomSanitizer, ErrorHandler, [/*#__PURE__*/new Optional(), DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/** Clones an SVGElement while preserving type information. */\n\nfunction cloneSvg(svg) {\n  return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n\nfunction isSafeUrlWithOptions(value) {\n  return !!(value.url && value.options);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n\n/** @docs-private */\n\n\nvar _MatIconBase = /*#__PURE__*/mixinColor( /*#__PURE__*/function () {\n  function _class(_elementRef) {\n    _classCallCheck(this, _class);\n\n    this._elementRef = _elementRef;\n  }\n\n  return _createClass(_class);\n}());\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\n\n\nvar MAT_ICON_LOCATION = /*#__PURE__*/new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  var _document = inject(DOCUMENT);\n\n  var _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: function getPathname() {\n      return _location ? _location.pathname + _location.search : '';\n    }\n  };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\n\n\nvar funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n\nvar ɵ0 = function ɵ0(attr) {\n  return \"[\".concat(attr, \"]\");\n};\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\n\n\nvar funcIriAttributeSelector = /*#__PURE__*/ /*#__PURE__*/funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\n\nvar funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n\nvar MatIcon = /*#__PURE__*/(function () {\n  var MatIcon = /*#__PURE__*/function (_MatIconBase2) {\n    _inherits(MatIcon, _MatIconBase2);\n\n    var _super = _createSuper(MatIcon);\n\n    function MatIcon(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n      var _this5;\n\n      _classCallCheck(this, MatIcon);\n\n      _this5 = _super.call(this, elementRef);\n      _this5._iconRegistry = _iconRegistry;\n      _this5._location = _location;\n      _this5._errorHandler = _errorHandler;\n      _this5._inline = false;\n      /** Subscription to the current in-progress SVG icon request. */\n\n      _this5._currentIconFetch = Subscription.EMPTY; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n      // the right thing to do for the majority of icon use-cases.\n\n      if (!ariaHidden) {\n        elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n      }\n\n      return _this5;\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n\n\n    _createClass(MatIcon, [{\n      key: \"inline\",\n      get: function get() {\n        return this._inline;\n      },\n      set: function set(inline) {\n        this._inline = coerceBooleanProperty(inline);\n      }\n      /** Name of the icon in the SVG icon set. */\n\n    }, {\n      key: \"svgIcon\",\n      get: function get() {\n        return this._svgIcon;\n      },\n      set: function set(value) {\n        if (value !== this._svgIcon) {\n          if (value) {\n            this._updateSvgIcon(value);\n          } else if (this._svgIcon) {\n            this._clearSvgElement();\n          }\n\n          this._svgIcon = value;\n        }\n      }\n      /** Font set that the icon is a part of. */\n\n    }, {\n      key: \"fontSet\",\n      get: function get() {\n        return this._fontSet;\n      },\n      set: function set(value) {\n        var newValue = this._cleanupFontValue(value);\n\n        if (newValue !== this._fontSet) {\n          this._fontSet = newValue;\n\n          this._updateFontIconClasses();\n        }\n      }\n      /** Name of an icon within a font set. */\n\n    }, {\n      key: \"fontIcon\",\n      get: function get() {\n        return this._fontIcon;\n      },\n      set: function set(value) {\n        var newValue = this._cleanupFontValue(value);\n\n        if (newValue !== this._fontIcon) {\n          this._fontIcon = newValue;\n\n          this._updateFontIconClasses();\n        }\n      }\n      /**\n       * Splits an svgIcon binding value into its icon set and icon name components.\n       * Returns a 2-element array of [(icon set), (icon name)].\n       * The separator for the two fields is ':'. If there is no separator, an empty\n       * string is returned for the icon set and the entire value is returned for\n       * the icon name. If the argument is falsy, returns an array of two empty strings.\n       * Throws an error if the name contains two or more ':' separators.\n       * Examples:\n       *   `'social:cake' -> ['social', 'cake']\n       *   'penguin' -> ['', 'penguin']\n       *   null -> ['', '']\n       *   'a:b:c' -> (throws Error)`\n       */\n\n    }, {\n      key: \"_splitIconName\",\n      value: function _splitIconName(iconName) {\n        if (!iconName) {\n          return ['', ''];\n        }\n\n        var parts = iconName.split(':');\n\n        switch (parts.length) {\n          case 1:\n            return ['', parts[0]];\n          // Use default namespace.\n\n          case 2:\n            return parts;\n\n          default:\n            throw Error(\"Invalid icon name: \\\"\".concat(iconName, \"\\\"\"));\n          // TODO: add an ngDevMode check\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n      }\n    }, {\n      key: \"ngAfterViewChecked\",\n      value: function ngAfterViewChecked() {\n        var cachedElements = this._elementsWithExternalReferences;\n\n        if (cachedElements && cachedElements.size) {\n          var newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n          // the browser doesn't have an API that will let us react on link clicks and\n          // we can't depend on the Angular router. The references need to be updated,\n          // because while most browsers don't care whether the URL is correct after\n          // the first render, Safari will break if the user navigates to a different\n          // page and the SVG isn't re-rendered.\n\n\n          if (newPath !== this._previousPath) {\n            this._previousPath = newPath;\n\n            this._prependPathToReferences(newPath);\n          }\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n\n        if (this._elementsWithExternalReferences) {\n          this._elementsWithExternalReferences.clear();\n        }\n      }\n    }, {\n      key: \"_usingFontIcon\",\n      value: function _usingFontIcon() {\n        return !this.svgIcon;\n      }\n    }, {\n      key: \"_setSvgElement\",\n      value: function _setSvgElement(svg) {\n        this._clearSvgElement(); // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n\n\n        var styleTags = svg.querySelectorAll('style');\n\n        for (var i = 0; i < styleTags.length; i++) {\n          styleTags[i].textContent += ' ';\n        } // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n\n\n        var path = this._location.getPathname();\n\n        this._previousPath = path;\n\n        this._cacheChildrenWithExternalReferences(svg);\n\n        this._prependPathToReferences(path);\n\n        this._elementRef.nativeElement.appendChild(svg);\n      }\n    }, {\n      key: \"_clearSvgElement\",\n      value: function _clearSvgElement() {\n        var layoutElement = this._elementRef.nativeElement;\n        var childCount = layoutElement.childNodes.length;\n\n        if (this._elementsWithExternalReferences) {\n          this._elementsWithExternalReferences.clear();\n        } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n        while (childCount--) {\n          var child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n          // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n          if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n            layoutElement.removeChild(child);\n          }\n        }\n      }\n    }, {\n      key: \"_updateFontIconClasses\",\n      value: function _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n          return;\n        }\n\n        var elem = this._elementRef.nativeElement;\n        var fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n\n        if (fontSetClass != this._previousFontSetClass) {\n          if (this._previousFontSetClass) {\n            elem.classList.remove(this._previousFontSetClass);\n          }\n\n          if (fontSetClass) {\n            elem.classList.add(fontSetClass);\n          }\n\n          this._previousFontSetClass = fontSetClass;\n        }\n\n        if (this.fontIcon != this._previousFontIconClass) {\n          if (this._previousFontIconClass) {\n            elem.classList.remove(this._previousFontIconClass);\n          }\n\n          if (this.fontIcon) {\n            elem.classList.add(this.fontIcon);\n          }\n\n          this._previousFontIconClass = this.fontIcon;\n        }\n      }\n      /**\n       * Cleans up a value to be used as a fontIcon or fontSet.\n       * Since the value ends up being assigned as a CSS class, we\n       * have to trim the value and omit space-separated values.\n       */\n\n    }, {\n      key: \"_cleanupFontValue\",\n      value: function _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n      }\n      /**\n       * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n       * reference. This is required because WebKit browsers require references to be prefixed with\n       * the current path, if the page has a `base` tag.\n       */\n\n    }, {\n      key: \"_prependPathToReferences\",\n      value: function _prependPathToReferences(path) {\n        var elements = this._elementsWithExternalReferences;\n\n        if (elements) {\n          elements.forEach(function (attrs, element) {\n            attrs.forEach(function (attr) {\n              element.setAttribute(attr.name, \"url('\".concat(path, \"#\").concat(attr.value, \"')\"));\n            });\n          });\n        }\n      }\n      /**\n       * Caches the children of an SVG element that have `url()`\n       * references that we need to prefix with the current path.\n       */\n\n    }, {\n      key: \"_cacheChildrenWithExternalReferences\",\n      value: function _cacheChildrenWithExternalReferences(element) {\n        var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        var elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n        var _loop = function _loop(i) {\n          funcIriAttributes.forEach(function (attr) {\n            var elementWithReference = elementsWithFuncIri[i];\n            var value = elementWithReference.getAttribute(attr);\n            var match = value ? value.match(funcIriPattern) : null;\n\n            if (match) {\n              var attributes = elements.get(elementWithReference);\n\n              if (!attributes) {\n                attributes = [];\n                elements.set(elementWithReference, attributes);\n              }\n\n              attributes.push({\n                name: attr,\n                value: match[1]\n              });\n            }\n          });\n        };\n\n        for (var i = 0; i < elementsWithFuncIri.length; i++) {\n          _loop(i);\n        }\n      }\n      /** Sets a new SVG icon with a particular name. */\n\n    }, {\n      key: \"_updateSvgIcon\",\n      value: function _updateSvgIcon(rawName) {\n        var _this6 = this;\n\n        this._svgNamespace = null;\n        this._svgName = null;\n\n        this._currentIconFetch.unsubscribe();\n\n        if (rawName) {\n          var _this$_splitIconName = this._splitIconName(rawName),\n              _this$_splitIconName2 = _slicedToArray(_this$_splitIconName, 2),\n              namespace = _this$_splitIconName2[0],\n              iconName = _this$_splitIconName2[1];\n\n          if (namespace) {\n            this._svgNamespace = namespace;\n          }\n\n          if (iconName) {\n            this._svgName = iconName;\n          }\n\n          this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(function (svg) {\n            return _this6._setSvgElement(svg);\n          }, function (err) {\n            var errorMessage = \"Error retrieving icon \".concat(namespace, \":\").concat(iconName, \"! \").concat(err.message);\n\n            _this6._errorHandler.handleError(new Error(errorMessage));\n          });\n        }\n      }\n    }]);\n\n    return MatIcon;\n  }(_MatIconBase);\n\n  MatIcon.ɵfac = function MatIcon_Factory(t) {\n    return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler));\n  };\n\n  MatIcon.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatIcon,\n    selectors: [[\"mat-icon\"]],\n    hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"],\n    hostVars: 7,\n    hostBindings: function MatIcon_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n      }\n    },\n    inputs: {\n      color: \"color\",\n      inline: \"inline\",\n      svgIcon: \"svgIcon\",\n      fontSet: \"fontSet\",\n      fontIcon: \"fontIcon\"\n    },\n    exportAs: [\"matIcon\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatIcon_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatIcon;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatIconModule = /*#__PURE__*/(function () {\n  var MatIconModule = /*#__PURE__*/_createClass(function MatIconModule() {\n    _classCallCheck(this, MatIconModule);\n  });\n\n  MatIconModule.ɵfac = function MatIconModule_Factory(t) {\n    return new (t || MatIconModule)();\n  };\n\n  MatIconModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatIconModule\n  });\n  MatIconModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule], MatCommonModule]\n  });\n  return MatIconModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n    declarations: function declarations() {\n      return [MatIcon];\n    },\n    imports: function imports() {\n      return [MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatIcon, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };","map":{"version":3,"names":["i0","SecurityContext","Injectable","Optional","Inject","ErrorHandler","SkipSelf","InjectionToken","inject","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","Attribute","Input","NgModule","mixinColor","MatCommonModule","coerceBooleanProperty","i3","DOCUMENT","of","throwError","forkJoin","Subscription","tap","map","catchError","finalize","share","take","i1","HttpClient","i2","DomSanitizer","ɵngcc0","ɵngcc1","ɵngcc2","_c0","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","options","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","resolver","push","cleanLiteral","sanitize","HTML","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","alias","className","set","get","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","name","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","foundIcon","i","length","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","_a","withCredentials","inProgressFetch","req","responseType","delete","configNamespace","svgElement","result","isSafeUrlWithOptions","undefined","ɵfac","MatIconRegistry_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","_MatIconBase","_elementRef","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","EMPTY","nativeElement","inline","_svgIcon","_updateSvgIcon","_clearSvgElement","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","_fontIcon","parts","split","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","svgIcon","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","_usingFontIcon","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","classList","remove","add","fontIcon","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","_splitIconName","getNamedSvgIcon","subscribe","_setSvgElement","MatIcon_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","color","inputs","exportAs","features","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatIcon_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","MatIconModule","MatIconModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, ErrorHandler, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString('<svg></svg>');\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result) ?\n                    new SvgIconConfig(result.url, null, result.options) :\n                    new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler)); };\nMatIconRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i3.DOCUMENT, 8), i0.ɵɵinject(i0.ErrorHandler)); }, token: MatIconRegistry, providedIn: \"root\" });\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, null); })();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() { return this._svgIcon; }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() { return this._fontSet; }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() { return this._fontIcon; }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return parts;\n            default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style');\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler)); };\nMatIcon.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 7, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, { inline: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = function MatIconModule_Factory(t) { return new (t || MatIconModule)(); };\nMatIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}