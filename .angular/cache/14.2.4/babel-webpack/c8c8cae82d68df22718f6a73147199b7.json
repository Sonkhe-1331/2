{"ast":null,"code":"import _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\n/**\n * @license Angular v13.3.11\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ÉµparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\n\nvar HttpHandler = /*#__PURE__*/_createClass(function HttpHandler() {\n  _classCallCheck(this, HttpHandler);\n});\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\n\n\nvar HttpBackend = /*#__PURE__*/_createClass(function HttpBackend() {\n  _classCallCheck(this, HttpBackend);\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\n\n\nvar HttpHeaders = /*#__PURE__*/function () {\n  /**  Constructs a new HTTP header object with the given values.*/\n  function HttpHeaders(headers) {\n    var _this = this;\n\n    _classCallCheck(this, HttpHeaders);\n\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    this.normalizedNames = new Map();\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n\n    this.lazyUpdate = null;\n\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = function () {\n        _this.headers = new Map();\n        headers.split('\\n').forEach(function (line) {\n          var index = line.indexOf(':');\n\n          if (index > 0) {\n            var name = line.slice(0, index);\n            var key = name.toLowerCase();\n            var value = line.slice(index + 1).trim();\n\n            _this.maybeSetNormalizedName(name, key);\n\n            if (_this.headers.has(key)) {\n              _this.headers.get(key).push(value);\n            } else {\n              _this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = function () {\n        _this.headers = new Map();\n        Object.keys(headers).forEach(function (name) {\n          var values = headers[name];\n          var key = name.toLowerCase();\n\n          if (typeof values === 'string') {\n            values = [values];\n          }\n\n          if (values.length > 0) {\n            _this.headers.set(key, values);\n\n            _this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n\n\n  _createClass(HttpHeaders, [{\n    key: \"has\",\n    value: function has(name) {\n      this.init();\n      return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      this.init();\n      var values = this.headers.get(name.toLowerCase());\n      return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      this.init();\n      return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'd'\n      });\n    }\n  }, {\n    key: \"maybeSetNormalizedName\",\n    value: function maybeSetNormalizedName(name, lcName) {\n      if (!this.normalizedNames.has(lcName)) {\n        this.normalizedNames.set(lcName, name);\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      if (!!this.lazyInit) {\n        if (this.lazyInit instanceof HttpHeaders) {\n          this.copyFrom(this.lazyInit);\n        } else {\n          this.lazyInit();\n        }\n\n        this.lazyInit = null;\n\n        if (!!this.lazyUpdate) {\n          this.lazyUpdate.forEach(function (update) {\n            return _this2.applyUpdate(update);\n          });\n          this.lazyUpdate = null;\n        }\n      }\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(other) {\n      var _this3 = this;\n\n      other.init();\n      Array.from(other.headers.keys()).forEach(function (key) {\n        _this3.headers.set(key, other.headers.get(key));\n\n        _this3.normalizedNames.set(key, other.normalizedNames.get(key));\n      });\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpHeaders();\n      clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n      clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n      return clone;\n    }\n  }, {\n    key: \"applyUpdate\",\n    value: function applyUpdate(update) {\n      var key = update.name.toLowerCase();\n\n      switch (update.op) {\n        case 'a':\n        case 's':\n          var value = update.value;\n\n          if (typeof value === 'string') {\n            value = [value];\n          }\n\n          if (value.length === 0) {\n            return;\n          }\n\n          this.maybeSetNormalizedName(update.name, key);\n          var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n          base.push.apply(base, _toConsumableArray(value));\n          this.headers.set(key, base);\n          break;\n\n        case 'd':\n          var toDelete = update.value;\n\n          if (!toDelete) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            var existing = this.headers.get(key);\n\n            if (!existing) {\n              return;\n            }\n\n            existing = existing.filter(function (value) {\n              return toDelete.indexOf(value) === -1;\n            });\n\n            if (existing.length === 0) {\n              this.headers.delete(key);\n              this.normalizedNames.delete(key);\n            } else {\n              this.headers.set(key, existing);\n            }\n          }\n\n          break;\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this4 = this;\n\n      this.init();\n      Array.from(this.normalizedNames.keys()).forEach(function (key) {\n        return fn(_this4.normalizedNames.get(key), _this4.headers.get(key));\n      });\n    }\n  }]);\n\n  return HttpHeaders;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\n\n\nvar HttpUrlEncodingCodec = /*#__PURE__*/function () {\n  function HttpUrlEncodingCodec() {\n    _classCallCheck(this, HttpUrlEncodingCodec);\n  }\n\n  _createClass(HttpUrlEncodingCodec, [{\n    key: \"encodeKey\",\n    value:\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    function encodeKey(key) {\n      return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n\n  }, {\n    key: \"encodeValue\",\n    value: function encodeValue(value) {\n      return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n\n  }, {\n    key: \"decodeKey\",\n    value: function decodeKey(key) {\n      return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n\n  }, {\n    key: \"decodeValue\",\n    value: function decodeValue(value) {\n      return decodeURIComponent(value);\n    }\n  }]);\n\n  return HttpUrlEncodingCodec;\n}();\n\nfunction paramParser(rawParams, codec) {\n  var map = new Map();\n\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    var params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(function (param) {\n      var eqIdx = param.indexOf('=');\n\n      var _ref = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))],\n          _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          val = _ref2[1];\n\n      var list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\n\n\nvar STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nvar STANDARD_ENCODING_REPLACEMENTS = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '2B': '+',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/'\n};\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, function (s, t) {\n    var _a;\n\n    return (_a = STANDARD_ENCODING_REPLACEMENTS[t]) !== null && _a !== void 0 ? _a : s;\n  });\n}\n\nfunction valueToString(value) {\n  return \"\".concat(value);\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\n\n\nvar HttpParams = /*#__PURE__*/function () {\n  function HttpParams() {\n    var _this5 = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpParams);\n\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(\"Cannot specify both fromString and fromObject.\");\n      }\n\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(function (key) {\n        var value = options.fromObject[key];\n\n        _this5.map.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n\n\n  _createClass(HttpParams, [{\n    key: \"has\",\n    value: function has(param) {\n      this.init();\n      return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(param) {\n      this.init();\n      var res = this.map.get(param);\n      return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(param) {\n      this.init();\n      return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n\n  }, {\n    key: \"appendAll\",\n    value: function appendAll(params) {\n      var updates = [];\n      Object.keys(params).forEach(function (param) {\n        var value = params[param];\n\n        if (Array.isArray(value)) {\n          value.forEach(function (_value) {\n            updates.push({\n              param: param,\n              value: _value,\n              op: 'a'\n            });\n          });\n        } else {\n          updates.push({\n            param: param,\n            value: value,\n            op: 'a'\n          });\n        }\n      });\n      return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'd'\n      });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this6 = this;\n\n      this.init();\n      return this.keys().map(function (key) {\n        var eKey = _this6.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`\n        // `b: []` produces `''`\n        // `c: ['1', '2']` produces `'c=1&c=2'`\n\n\n        return _this6.map.get(key).map(function (value) {\n          return eKey + '=' + _this6.encoder.encodeValue(value);\n        }).join('&');\n      }) // filter out empty values because `b: []` produces `''`\n      // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n      .filter(function (param) {\n        return param !== '';\n      }).join('&');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpParams({\n        encoder: this.encoder\n      });\n      clone.cloneFrom = this.cloneFrom || this;\n      clone.updates = (this.updates || []).concat(update);\n      return clone;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this7 = this;\n\n      if (this.map === null) {\n        this.map = new Map();\n      }\n\n      if (this.cloneFrom !== null) {\n        this.cloneFrom.init();\n        this.cloneFrom.keys().forEach(function (key) {\n          return _this7.map.set(key, _this7.cloneFrom.map.get(key));\n        });\n        this.updates.forEach(function (update) {\n          switch (update.op) {\n            case 'a':\n            case 's':\n              var base = (update.op === 'a' ? _this7.map.get(update.param) : undefined) || [];\n              base.push(valueToString(update.value));\n\n              _this7.map.set(update.param, base);\n\n              break;\n\n            case 'd':\n              if (update.value !== undefined) {\n                var _base = _this7.map.get(update.param) || [];\n\n                var idx = _base.indexOf(valueToString(update.value));\n\n                if (idx !== -1) {\n                  _base.splice(idx, 1);\n                }\n\n                if (_base.length > 0) {\n                  _this7.map.set(update.param, _base);\n                } else {\n                  _this7.map.delete(update.param);\n                }\n              } else {\n                _this7.map.delete(update.param);\n\n                break;\n              }\n\n          }\n        });\n        this.cloneFrom = this.updates = null;\n      }\n    }\n  }]);\n\n  return HttpParams;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\n\n\nvar HttpContextToken = /*#__PURE__*/_createClass(function HttpContextToken(defaultValue) {\n  _classCallCheck(this, HttpContextToken);\n\n  this.defaultValue = defaultValue;\n});\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\n\n\nvar HttpContext = /*#__PURE__*/function () {\n  function HttpContext() {\n    _classCallCheck(this, HttpContext);\n\n    this.map = new Map();\n  }\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n\n\n  _createClass(HttpContext, [{\n    key: \"set\",\n    value: function set(token, value) {\n      this.map.set(token, value);\n      return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(token) {\n      if (!this.map.has(token)) {\n        this.map.set(token, token.defaultValue());\n      }\n\n      return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(token) {\n      this.map.delete(token);\n      return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(token) {\n      return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this.map.keys();\n    }\n  }]);\n\n  return HttpContext;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\n\n\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\n\n\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\n\n\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\n\n\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\n\n\nfunction isUrlSearchParams(value) {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\n\n\nvar HttpRequest = /*#__PURE__*/function () {\n  function HttpRequest(method, url, third, fourth) {\n    _classCallCheck(this, HttpRequest);\n\n    this.url = url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n\n    this.body = null;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     */\n\n    this.reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n\n    this.withCredentials = false;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n\n    this.responseType = 'json';\n    this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n\n    var options; // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    } // If options have been passed, interpret them.\n\n\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.\n\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      } // Override headers if they're provided.\n\n\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    } // If no headers have been passed in, construct a new HttpHeaders instance.\n\n\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    } // If no context have been passed in, construct a new HttpContext instance.\n\n\n    if (!this.context) {\n      this.context = new HttpContext();\n    } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n\n\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      var params = this.params.toString();\n\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        var qIdx = url.indexOf('?'); // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n\n        var sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n\n\n  _createClass(HttpRequest, [{\n    key: \"serializeBody\",\n    value: function serializeBody() {\n      // If no body is present, no need to serialize it.\n      if (this.body === null) {\n        return null;\n      } // Check whether the body is already in a serialized form. If so,\n      // it can just be returned directly.\n\n\n      if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {\n        return this.body;\n      } // Check whether the body is an instance of HttpUrlEncodedParams.\n\n\n      if (this.body instanceof HttpParams) {\n        return this.body.toString();\n      } // Check whether the body is an object or array, and serialize with JSON if so.\n\n\n      if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n        return JSON.stringify(this.body);\n      } // Fall back on toString() for everything else.\n\n\n      return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n\n  }, {\n    key: \"detectContentTypeHeader\",\n    value: function detectContentTypeHeader() {\n      // An empty body has no content type.\n      if (this.body === null) {\n        return null;\n      } // FormData bodies rely on the browser's content type assignment.\n\n\n      if (isFormData(this.body)) {\n        return null;\n      } // Blobs usually have their own content type. If it doesn't, then\n      // no type can be inferred.\n\n\n      if (isBlob(this.body)) {\n        return this.body.type || null;\n      } // Array buffers have unknown contents and thus no type can be inferred.\n\n\n      if (isArrayBuffer(this.body)) {\n        return null;\n      } // Technically, strings could be a form of JSON data, but it's safe enough\n      // to assume they're plain strings.\n\n\n      if (typeof this.body === 'string') {\n        return 'text/plain';\n      } // `HttpUrlEncodedParams` has its own content-type.\n\n\n      if (this.body instanceof HttpParams) {\n        return 'application/x-www-form-urlencoded;charset=UTF-8';\n      } // Arrays, objects, boolean and numbers will be encoded as JSON.\n\n\n      if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n        return 'application/json';\n      } // No type could be inferred.\n\n\n      return null;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _a; // For method, url, and responseType, take the current value unless\n      // it is overridden in the update hash.\n\n\n      var method = update.method || this.method;\n      var url = update.url || this.url;\n      var responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means\n      // whatever current body is present is being overridden with an empty\n      // body, whereas an `undefined` value in update.body implies no\n      // override.\n\n      var body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between\n      // `false` and `undefined` in the update args.\n\n      var withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n      var reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or\n      // `setParams` are used.\n\n      var headers = update.headers || this.headers;\n      var params = update.params || this.params; // Pass on context if needed\n\n      var context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context; // Check whether the caller has asked to add headers.\n\n      if (update.setHeaders !== undefined) {\n        // Set every requested header.\n        headers = Object.keys(update.setHeaders).reduce(function (headers, name) {\n          return headers.set(name, update.setHeaders[name]);\n        }, headers);\n      } // Check whether the caller has asked to set params.\n\n\n      if (update.setParams) {\n        // Set every requested param.\n        params = Object.keys(update.setParams).reduce(function (params, param) {\n          return params.set(param, update.setParams[param]);\n        }, params);\n      } // Finally, construct the new HttpRequest using the pieces from above.\n\n\n      return new HttpRequest(method, url, body, {\n        params: params,\n        headers: headers,\n        context: context,\n        reportProgress: reportProgress,\n        responseType: responseType,\n        withCredentials: withCredentials\n      });\n    }\n  }]);\n\n  return HttpRequest;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\n\n\nvar HttpEventType = /*#__PURE__*/(function () {\n  HttpEventType = HttpEventType || {};\n\n  /**\n   * The request was sent out over the wire.\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\n   * An upload progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\n   * The response status code and headers were received.\n   */\n\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\n   * A download progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\n   * The full response including the body was received.\n   */\n\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n  return HttpEventType;\n})();\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nvar HttpResponseBase = /*#__PURE__*/_createClass(\n/**\n * Super-constructor for all responses.\n *\n * The single parameter accepted is an initialization hash. Any properties\n * of the response passed there will override the default values.\n */\nfunction HttpResponseBase(init) {\n  var defaultStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  var defaultStatusText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'OK';\n\n  _classCallCheck(this, HttpResponseBase);\n\n  // If the hash has values passed, use them to initialize the response.\n  // Otherwise use the default values.\n  this.headers = init.headers || new HttpHeaders();\n  this.status = init.status !== undefined ? init.status : defaultStatus;\n  this.statusText = init.statusText || defaultStatusText;\n  this.url = init.url || null; // Cache the ok value to avoid defining a getter.\n\n  this.ok = this.status >= 200 && this.status < 300;\n});\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\n\n\nvar HttpHeaderResponse = /*#__PURE__*/function (_HttpResponseBase) {\n  _inherits(HttpHeaderResponse, _HttpResponseBase);\n\n  var _super = _createSuper(HttpHeaderResponse);\n\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  function HttpHeaderResponse() {\n    var _this8;\n\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpHeaderResponse);\n\n    _this8 = _super.call(this, init);\n    _this8.type = HttpEventType.ResponseHeader;\n    return _this8;\n  }\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n\n\n  _createClass(HttpHeaderResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // Perform a straightforward initialization of the new HttpHeaderResponse,\n      // overriding the current parameters with new ones if given.\n      return new HttpHeaderResponse({\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n\n  return HttpHeaderResponse;\n}(HttpResponseBase);\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\n\n\nvar HttpResponse = /*#__PURE__*/function (_HttpResponseBase2) {\n  _inherits(HttpResponse, _HttpResponseBase2);\n\n  var _super2 = _createSuper(HttpResponse);\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  function HttpResponse() {\n    var _this9;\n\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpResponse);\n\n    _this9 = _super2.call(this, init);\n    _this9.type = HttpEventType.Response;\n    _this9.body = init.body !== undefined ? init.body : null;\n    return _this9;\n  }\n\n  _createClass(HttpResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new HttpResponse({\n        body: update.body !== undefined ? update.body : this.body,\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n\n  return HttpResponse;\n}(HttpResponseBase);\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\n\n\nvar HttpErrorResponse = /*#__PURE__*/function (_HttpResponseBase3) {\n  _inherits(HttpErrorResponse, _HttpResponseBase3);\n\n  var _super3 = _createSuper(HttpErrorResponse);\n\n  function HttpErrorResponse(init) {\n    var _this10;\n\n    _classCallCheck(this, HttpErrorResponse);\n\n    // Initialize with a default status of 0 / Unknown Error.\n    _this10 = _super3.call(this, init, 0, 'Unknown Error');\n    _this10.name = 'HttpErrorResponse';\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n\n    _this10.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n\n    if (_this10.status >= 200 && _this10.status < 300) {\n      _this10.message = \"Http failure during parsing for \".concat(init.url || '(unknown url)');\n    } else {\n      _this10.message = \"Http failure response for \".concat(init.url || '(unknown url)', \": \").concat(init.status, \" \").concat(init.statusText);\n    }\n\n    _this10.error = init.error || null;\n    return _this10;\n  }\n\n  return _createClass(HttpErrorResponse);\n}(HttpResponseBase);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\n\n\nfunction addBody(options, body) {\n  return {\n    body: body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n\n\nvar HttpClient = /*#__PURE__*/(function () {\n  var HttpClient = /*#__PURE__*/function () {\n    function HttpClient(handler) {\n      _classCallCheck(this, HttpClient);\n\n      this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n\n\n    _createClass(HttpClient, [{\n      key: \"request\",\n      value: function request(first, url) {\n        var _this11 = this;\n\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var req; // First, check whether the primary argument is an instance of `HttpRequest`.\n\n        if (first instanceof HttpRequest) {\n          // It is. The other arguments must be undefined (per the signatures) and can be\n          // ignored.\n          req = first;\n        } else {\n          // It's a string, so it represents a URL. Construct a request based on it,\n          // and incorporate the remaining arguments (assuming `GET` unless a method is\n          // provided.\n          // Figure out the headers.\n          var headers = undefined;\n\n          if (options.headers instanceof HttpHeaders) {\n            headers = options.headers;\n          } else {\n            headers = new HttpHeaders(options.headers);\n          } // Sort out parameters.\n\n\n          var params = undefined;\n\n          if (!!options.params) {\n            if (options.params instanceof HttpParams) {\n              params = options.params;\n            } else {\n              params = new HttpParams({\n                fromObject: options.params\n              });\n            }\n          } // Construct the request.\n\n\n          req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n            headers: headers,\n            context: options.context,\n            params: params,\n            reportProgress: options.reportProgress,\n            // By default, JSON is assumed to be returned for all calls.\n            responseType: options.responseType || 'json',\n            withCredentials: options.withCredentials\n          });\n        } // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n\n\n        var events$ = of(req).pipe(concatMap(function (req) {\n          return _this11.handler.handle(req);\n        })); // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n\n        if (first instanceof HttpRequest || options.observe === 'events') {\n          return events$;\n        } // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n\n\n        var res$ = events$.pipe(filter(function (event) {\n          return event instanceof HttpResponse;\n        })); // Decide which stream to return.\n\n        switch (options.observe || 'body') {\n          case 'body':\n            // The requested stream is the body. Map the response stream to the response\n            // body. This could be done more simply, but a misbehaving interceptor might\n            // transform the response body into a different format and ignore the requested\n            // responseType. Guard against this by validating that the response is of the\n            // requested type.\n            switch (req.responseType) {\n              case 'arraybuffer':\n                return res$.pipe(map(function (res) {\n                  // Validate that the body is an ArrayBuffer.\n                  if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                    throw new Error('Response is not an ArrayBuffer.');\n                  }\n\n                  return res.body;\n                }));\n\n              case 'blob':\n                return res$.pipe(map(function (res) {\n                  // Validate that the body is a Blob.\n                  if (res.body !== null && !(res.body instanceof Blob)) {\n                    throw new Error('Response is not a Blob.');\n                  }\n\n                  return res.body;\n                }));\n\n              case 'text':\n                return res$.pipe(map(function (res) {\n                  // Validate that the body is a string.\n                  if (res.body !== null && typeof res.body !== 'string') {\n                    throw new Error('Response is not a string.');\n                  }\n\n                  return res.body;\n                }));\n\n              case 'json':\n              default:\n                // No validation needed for JSON responses, as they can be of any type.\n                return res$.pipe(map(function (res) {\n                  return res.body;\n                }));\n            }\n\n          case 'response':\n            // The response stream was requested directly, so return it.\n            return res$;\n\n          default:\n            // Guard against new future observe types being added.\n            throw new Error(\"Unreachable: unhandled observe type \".concat(options.observe, \"}\"));\n        }\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `DELETE` request to execute on the server. See the individual overloads for\n       * details on the return type.\n       *\n       * @param url     The endpoint URL.\n       * @param options The HTTP options to send with the request.\n       *\n       */\n\n    }, {\n      key: \"delete\",\n      value: function _delete(url) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.request('DELETE', url, options);\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `GET` request to execute on the server. See the individual overloads for\n       * details on the return type.\n       */\n\n    }, {\n      key: \"get\",\n      value: function get(url) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.request('GET', url, options);\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `HEAD` request to execute on the server. The `HEAD` method returns\n       * meta information about the resource without transferring the\n       * resource itself. See the individual overloads for\n       * details on the return type.\n       */\n\n    }, {\n      key: \"head\",\n      value: function head(url) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.request('HEAD', url, options);\n      }\n      /**\n       * Constructs an `Observable` that, when subscribed, causes a request with the special method\n       * `JSONP` to be dispatched via the interceptor pipeline.\n       * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n       * API endpoints that don't support newer,\n       * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n       * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n       * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n       * application making the request.\n       * The endpoint API must support JSONP callback for JSONP requests to work.\n       * The resource API returns the JSON response wrapped in a callback function.\n       * You can pass the callback function name as one of the query parameters.\n       * Note that JSONP requests can only be used with `GET` requests.\n       *\n       * @param url The resource URL.\n       * @param callbackParam The callback function name.\n       *\n       */\n\n    }, {\n      key: \"jsonp\",\n      value: function jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n          params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n          observe: 'body',\n          responseType: 'json'\n        });\n      }\n      /**\n       * Constructs an `Observable` that, when subscribed, causes the configured\n       * `OPTIONS` request to execute on the server. This method allows the client\n       * to determine the supported HTTP methods and other capabilities of an endpoint,\n       * without implying a resource action. See the individual overloads for\n       * details on the return type.\n       */\n\n    }, {\n      key: \"options\",\n      value: function options(url) {\n        var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return this.request('OPTIONS', url, _options);\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `PATCH` request to execute on the server. See the individual overloads for\n       * details on the return type.\n       */\n\n    }, {\n      key: \"patch\",\n      value: function patch(url, body) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return this.request('PATCH', url, addBody(options, body));\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `POST` request to execute on the server. The server responds with the location of\n       * the replaced resource. See the individual overloads for\n       * details on the return type.\n       */\n\n    }, {\n      key: \"post\",\n      value: function post(url, body) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return this.request('POST', url, addBody(options, body));\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n       * with a new set of values.\n       * See the individual overloads for details on the return type.\n       */\n\n    }, {\n      key: \"put\",\n      value: function put(url, body) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return this.request('PUT', url, addBody(options, body));\n      }\n    }]);\n\n    return HttpClient;\n  }();\n\n  HttpClient.Éµfac = function HttpClient_Factory(t) {\n    return new (t || HttpClient)(i0.ÉµÉµinject(HttpHandler));\n  };\n\n  HttpClient.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n    token: HttpClient,\n    factory: HttpClient.Éµfac\n  });\n  return HttpClient;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\n\n\nvar HttpInterceptorHandler = /*#__PURE__*/function () {\n  function HttpInterceptorHandler(next, interceptor) {\n    _classCallCheck(this, HttpInterceptorHandler);\n\n    this.next = next;\n    this.interceptor = interceptor;\n  }\n\n  _createClass(HttpInterceptorHandler, [{\n    key: \"handle\",\n    value: function handle(req) {\n      return this.interceptor.intercept(req, this.next);\n    }\n  }]);\n\n  return HttpInterceptorHandler;\n}();\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\n\n\nvar HTTP_INTERCEPTORS = /*#__PURE__*/new InjectionToken('HTTP_INTERCEPTORS');\nvar NoopInterceptor = /*#__PURE__*/(function () {\n  var NoopInterceptor = /*#__PURE__*/function () {\n    function NoopInterceptor() {\n      _classCallCheck(this, NoopInterceptor);\n    }\n\n    _createClass(NoopInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(req, next) {\n        return next.handle(req);\n      }\n    }]);\n\n    return NoopInterceptor;\n  }();\n\n  NoopInterceptor.Éµfac = function NoopInterceptor_Factory(t) {\n    return new (t || NoopInterceptor)();\n  };\n\n  NoopInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n    token: NoopInterceptor,\n    factory: NoopInterceptor.Éµfac\n  });\n  return NoopInterceptor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n\n\nvar nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\n\nvar foreignDocument; // Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\n\nvar JsonpCallbackContext = /*#__PURE__*/_createClass(function JsonpCallbackContext() {\n  _classCallCheck(this, JsonpCallbackContext);\n});\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\n\n\nvar JsonpClientBackend = /*#__PURE__*/(function () {\n  var JsonpClientBackend = /*#__PURE__*/function () {\n    function JsonpClientBackend(callbackMap, document) {\n      _classCallCheck(this, JsonpClientBackend);\n\n      this.callbackMap = callbackMap;\n      this.document = document;\n      /**\n       * A resolved promise that can be used to schedule microtasks in the event handlers.\n       */\n\n      this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n\n\n    _createClass(JsonpClientBackend, [{\n      key: \"nextCallback\",\n      value: function nextCallback() {\n        return \"ng_jsonp_callback_\".concat(nextRequestId++);\n      }\n      /**\n       * Processes a JSONP request and returns an event stream of the results.\n       * @param req The request object.\n       * @returns An observable of the response events.\n       *\n       */\n\n    }, {\n      key: \"handle\",\n      value: function handle(req) {\n        var _this12 = this;\n\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n          throw new Error(JSONP_ERR_WRONG_METHOD);\n        } else if (req.responseType !== 'json') {\n          throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        } // Everything else happens inside the Observable boundary.\n\n\n        return new Observable(function (observer) {\n          // The first step to make a request is to generate the callback name, and replace the\n          // callback placeholder in the URL with the name. Care has to be taken here to ensure\n          // a trailing &, if matched, gets inserted back into the URL in the correct place.\n          var callback = _this12.nextCallback();\n\n          var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\".concat(callback, \"$1\")); // Construct the <script> tag and point it at the URL.\n\n          var node = _this12.document.createElement('script');\n\n          node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables\n          // are closed over and track state across those callbacks.\n          // The response object, if one has been received, or null otherwise.\n\n          var body = null; // Whether the response callback has been called.\n\n          var finished = false; // Set the response callback in this.callbackMap (which will be the window\n          // object in the browser. The script being loaded via the <script> tag will\n          // eventually call this callback.\n\n          _this12.callbackMap[callback] = function (data) {\n            // Data has been received from the JSONP script. Firstly, delete this callback.\n            delete _this12.callbackMap[callback]; // Set state to indicate data was received.\n\n            body = data;\n            finished = true;\n          }; // cleanup() is a utility closure that removes the <script> from the page and\n          // the response callback from the window. This logic is used in both the\n          // success, error, and cancellation paths, so it's extracted out for convenience.\n\n\n          var cleanup = function cleanup() {\n            // Remove the <script> tag if it's still on the page.\n            if (node.parentNode) {\n              node.parentNode.removeChild(node);\n            } // Remove the response callback from the callbackMap (window object in the\n            // browser).\n\n\n            delete _this12.callbackMap[callback];\n          }; // onLoad() is the success callback which runs after the response callback\n          // if the JSONP script loads successfully. The event itself is unimportant.\n          // If something went wrong, onLoad() may run without the response callback\n          // having been invoked.\n\n\n          var onLoad = function onLoad(event) {\n            // We wrap it in an extra Promise, to ensure the microtask\n            // is scheduled after the loaded endpoint has executed any potential microtask itself,\n            // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n            _this12.resolvedPromise.then(function () {\n              // Cleanup the page.\n              cleanup(); // Check whether the response callback has run.\n\n              if (!finished) {\n                // It hasn't, something went wrong with the request. Return an error via\n                // the Observable error path. All JSONP errors have status 0.\n                observer.error(new HttpErrorResponse({\n                  url: url,\n                  status: 0,\n                  statusText: 'JSONP Error',\n                  error: new Error(JSONP_ERR_NO_CALLBACK)\n                }));\n                return;\n              } // Success. body either contains the response body or null if none was\n              // returned.\n\n\n              observer.next(new HttpResponse({\n                body: body,\n                status: 200\n                /* Ok */\n                ,\n                statusText: 'OK',\n                url: url\n              })); // Complete the stream, the response is over.\n\n              observer.complete();\n            });\n          }; // onError() is the error callback, which runs if the script returned generates\n          // a Javascript error. It emits the error via the Observable error channel as\n          // a HttpErrorResponse.\n\n\n          var onError = function onError(error) {\n            cleanup(); // Wrap the error in a HttpErrorResponse.\n\n            observer.error(new HttpErrorResponse({\n              error: error,\n              status: 0,\n              statusText: 'JSONP Error',\n              url: url\n            }));\n          }; // Subscribe to both the success (load) and error events on the <script> tag,\n          // and add it to the page.\n\n\n          node.addEventListener('load', onLoad);\n          node.addEventListener('error', onError);\n\n          _this12.document.body.appendChild(node); // The request has now been successfully sent.\n\n\n          observer.next({\n            type: HttpEventType.Sent\n          }); // Cancellation handler.\n\n          return function () {\n            if (!finished) {\n              _this12.removeListeners(node);\n            } // And finally, clean up the page.\n\n\n            cleanup();\n          };\n        });\n      }\n    }, {\n      key: \"removeListeners\",\n      value: function removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n          foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n\n        foreignDocument.adoptNode(script);\n      }\n    }]);\n\n    return JsonpClientBackend;\n  }();\n\n  JsonpClientBackend.Éµfac = function JsonpClientBackend_Factory(t) {\n    return new (t || JsonpClientBackend)(i0.ÉµÉµinject(JsonpCallbackContext), i0.ÉµÉµinject(DOCUMENT));\n  };\n\n  JsonpClientBackend.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n    token: JsonpClientBackend,\n    factory: JsonpClientBackend.Éµfac\n  });\n  return JsonpClientBackend;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\n\n\nvar JsonpInterceptor = /*#__PURE__*/(function () {\n  var JsonpInterceptor = /*#__PURE__*/function () {\n    function JsonpInterceptor(jsonp) {\n      _classCallCheck(this, JsonpInterceptor);\n\n      this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n\n\n    _createClass(JsonpInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(req, next) {\n        if (req.method === 'JSONP') {\n          return this.jsonp.handle(req);\n        } // Fall through for normal HTTP requests.\n\n\n        return next.handle(req);\n      }\n    }]);\n\n    return JsonpInterceptor;\n  }();\n\n  JsonpInterceptor.Éµfac = function JsonpInterceptor_Factory(t) {\n    return new (t || JsonpInterceptor)(i0.ÉµÉµinject(JsonpClientBackend));\n  };\n\n  JsonpInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n    token: JsonpInterceptor,\n    factory: JsonpInterceptor.Éµfac\n  });\n  return JsonpInterceptor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\n\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\n\n\nvar HttpXhrBackend = /*#__PURE__*/(function () {\n  var HttpXhrBackend = /*#__PURE__*/function () {\n    function HttpXhrBackend(xhrFactory) {\n      _classCallCheck(this, HttpXhrBackend);\n\n      this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n\n\n    _createClass(HttpXhrBackend, [{\n      key: \"handle\",\n      value: function handle(req) {\n        var _this13 = this;\n\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n          throw new Error(\"Attempted to construct Jsonp request without HttpClientJsonpModule installed.\");\n        } // Everything happens on Observable subscription.\n\n\n        return new Observable(function (observer) {\n          // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n          var xhr = _this13.xhrFactory.build();\n\n          xhr.open(req.method, req.urlWithParams);\n\n          if (!!req.withCredentials) {\n            xhr.withCredentials = true;\n          } // Add all the requested headers.\n\n\n          req.headers.forEach(function (name, values) {\n            return xhr.setRequestHeader(name, values.join(','));\n          }); // Add an Accept header if one isn't present already.\n\n          if (!req.headers.has('Accept')) {\n            xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n          } // Auto-detect the Content-Type header if one isn't present already.\n\n\n          if (!req.headers.has('Content-Type')) {\n            var detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.\n\n            if (detectedType !== null) {\n              xhr.setRequestHeader('Content-Type', detectedType);\n            }\n          } // Set the responseType if one was requested.\n\n\n          if (req.responseType) {\n            var responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server\n            // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n            // xhr.response will be null, and xhr.responseText cannot be accessed to\n            // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n            // is parsed by first requesting text and then applying JSON.parse.\n\n            xhr.responseType = responseType !== 'json' ? responseType : 'text';\n          } // Serialize the request body if one is present. If not, this will be set to null.\n\n\n          var reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered\n          // in two events - the HttpHeaderResponse event and the full HttpResponse\n          // event. However, since response headers don't change in between these\n          // two events, it doesn't make sense to parse them twice. So headerResponse\n          // caches the data extracted from the response whenever it's first parsed,\n          // to ensure parsing isn't duplicated.\n\n          var headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n          // state, and memoizes it into headerResponse.\n\n          var partialFromXhr = function partialFromXhr() {\n            if (headerResponse !== null) {\n              return headerResponse;\n            }\n\n            var statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.\n\n            var headers = new HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the\n            // request URL.\n\n            var url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.\n\n            headerResponse = new HttpHeaderResponse({\n              headers: headers,\n              status: xhr.status,\n              statusText: statusText,\n              url: url\n            });\n            return headerResponse;\n          }; // Next, a few closures are defined for the various events which XMLHttpRequest can\n          // emit. This allows them to be unregistered as event listeners later.\n          // First up is the load event, which represents a response being fully available.\n\n\n          var onLoad = function onLoad() {\n            // Read response state from the memoized partial data.\n            var _partialFromXhr = partialFromXhr(),\n                headers = _partialFromXhr.headers,\n                status = _partialFromXhr.status,\n                statusText = _partialFromXhr.statusText,\n                url = _partialFromXhr.url; // The body will be read out if present.\n\n\n            var body = null;\n\n            if (status !== 204\n            /* NoContent */\n            ) {\n              // Use XMLHttpRequest.response if set, responseText otherwise.\n              body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n            } // Normalize another potential bug (this one comes from CORS).\n\n\n            if (status === 0) {\n              status = !!body ? 200\n              /* Ok */\n              : 0;\n            } // ok determines whether the response will be transmitted on the event or\n            // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n            // but a successful status code can still result in an error if the user\n            // asked for JSON data and the body cannot be parsed as such.\n\n\n            var ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser\n            // will have done that already).\n\n            if (req.responseType === 'json' && typeof body === 'string') {\n              // Save the original body, before attempting XSSI prefix stripping.\n              var originalBody = body;\n              body = body.replace(XSSI_PREFIX, '');\n\n              try {\n                // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                body = body !== '' ? JSON.parse(body) : null;\n              } catch (error) {\n                // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                // a better error response.\n                body = originalBody; // If this was an error request to begin with, leave it as a string, it probably\n                // just isn't JSON. Otherwise, deliver the parsing error to the user.\n\n                if (ok) {\n                  // Even though the response status was 2xx, this is still an error.\n                  ok = false; // The parse error contains the text of the body that failed to parse.\n\n                  body = {\n                    error: error,\n                    text: body\n                  };\n                }\n              }\n            }\n\n            if (ok) {\n              // A successful response is delivered on the event stream.\n              observer.next(new HttpResponse({\n                body: body,\n                headers: headers,\n                status: status,\n                statusText: statusText,\n                url: url || undefined\n              })); // The full body has been received and delivered, no further events\n              // are possible. This request is complete.\n\n              observer.complete();\n            } else {\n              // An unsuccessful request is delivered on the error channel.\n              observer.error(new HttpErrorResponse({\n                // The error in this case is the response body (error from the server).\n                error: body,\n                headers: headers,\n                status: status,\n                statusText: statusText,\n                url: url || undefined\n              }));\n            }\n          }; // The onError callback is called when something goes wrong at the network level.\n          // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n          // transmitted on the error channel.\n\n\n          var onError = function onError(error) {\n            var _partialFromXhr2 = partialFromXhr(),\n                url = _partialFromXhr2.url;\n\n            var res = new HttpErrorResponse({\n              error: error,\n              status: xhr.status || 0,\n              statusText: xhr.statusText || 'Unknown Error',\n              url: url || undefined\n            });\n            observer.error(res);\n          }; // The sentHeaders flag tracks whether the HttpResponseHeaders event\n          // has been sent on the stream. This is necessary to track if progress\n          // is enabled since the event will be sent on only the first download\n          // progerss event.\n\n\n          var sentHeaders = false; // The download progress event handler, which is only registered if\n          // progress events are enabled.\n\n          var onDownProgress = function onDownProgress(event) {\n            // Send the HttpResponseHeaders event if it hasn't been sent already.\n            if (!sentHeaders) {\n              observer.next(partialFromXhr());\n              sentHeaders = true;\n            } // Start building the download progress event to deliver on the response\n            // event stream.\n\n\n            var progressEvent = {\n              type: HttpEventType.DownloadProgress,\n              loaded: event.loaded\n            }; // Set the total number of bytes in the event if it's available.\n\n            if (event.lengthComputable) {\n              progressEvent.total = event.total;\n            } // If the request was for text content and a partial response is\n            // available on XMLHttpRequest, include it in the progress event\n            // to allow for streaming reads.\n\n\n            if (req.responseType === 'text' && !!xhr.responseText) {\n              progressEvent.partialText = xhr.responseText;\n            } // Finally, fire the event.\n\n\n            observer.next(progressEvent);\n          }; // The upload progress event handler, which is only registered if\n          // progress events are enabled.\n\n\n          var onUpProgress = function onUpProgress(event) {\n            // Upload progress events are simpler. Begin building the progress\n            // event.\n            var progress = {\n              type: HttpEventType.UploadProgress,\n              loaded: event.loaded\n            }; // If the total number of bytes being uploaded is available, include\n            // it.\n\n            if (event.lengthComputable) {\n              progress.total = event.total;\n            } // Send the event.\n\n\n            observer.next(progress);\n          }; // By default, register for load and error events.\n\n\n          xhr.addEventListener('load', onLoad);\n          xhr.addEventListener('error', onError);\n          xhr.addEventListener('timeout', onError);\n          xhr.addEventListener('abort', onError); // Progress events are only enabled if requested.\n\n          if (req.reportProgress) {\n            // Download progress is always enabled if requested.\n            xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.\n\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.addEventListener('progress', onUpProgress);\n            }\n          } // Fire the request, and notify the event stream that it was fired.\n\n\n          xhr.send(reqBody);\n          observer.next({\n            type: HttpEventType.Sent\n          }); // This is the return from the Observable function, which is the\n          // request cancellation handler.\n\n          return function () {\n            // On a cancellation, remove all registered event listeners.\n            xhr.removeEventListener('error', onError);\n            xhr.removeEventListener('abort', onError);\n            xhr.removeEventListener('load', onLoad);\n            xhr.removeEventListener('timeout', onError);\n\n            if (req.reportProgress) {\n              xhr.removeEventListener('progress', onDownProgress);\n\n              if (reqBody !== null && xhr.upload) {\n                xhr.upload.removeEventListener('progress', onUpProgress);\n              }\n            } // Finally, abort the in-flight request.\n\n\n            if (xhr.readyState !== xhr.DONE) {\n              xhr.abort();\n            }\n          };\n        });\n      }\n    }]);\n\n    return HttpXhrBackend;\n  }();\n\n  HttpXhrBackend.Éµfac = function HttpXhrBackend_Factory(t) {\n    return new (t || HttpXhrBackend)(i0.ÉµÉµinject(i1.XhrFactory));\n  };\n\n  HttpXhrBackend.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n    token: HttpXhrBackend,\n    factory: HttpXhrBackend.Éµfac\n  });\n  return HttpXhrBackend;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar XSRF_COOKIE_NAME = /*#__PURE__*/new InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = /*#__PURE__*/new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\n\nvar HttpXsrfTokenExtractor = /*#__PURE__*/_createClass(function HttpXsrfTokenExtractor() {\n  _classCallCheck(this, HttpXsrfTokenExtractor);\n});\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n\n\nvar HttpXsrfCookieExtractor = /*#__PURE__*/(function () {\n  var HttpXsrfCookieExtractor = /*#__PURE__*/function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n      _classCallCheck(this, HttpXsrfCookieExtractor);\n\n      this.doc = doc;\n      this.platform = platform;\n      this.cookieName = cookieName;\n      this.lastCookieString = '';\n      this.lastToken = null;\n      /**\n       * @internal for testing\n       */\n\n      this.parseCount = 0;\n    }\n\n    _createClass(HttpXsrfCookieExtractor, [{\n      key: \"getToken\",\n      value: function getToken() {\n        if (this.platform === 'server') {\n          return null;\n        }\n\n        var cookieString = this.doc.cookie || '';\n\n        if (cookieString !== this.lastCookieString) {\n          this.parseCount++;\n          this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n          this.lastCookieString = cookieString;\n        }\n\n        return this.lastToken;\n      }\n    }]);\n\n    return HttpXsrfCookieExtractor;\n  }();\n\n  HttpXsrfCookieExtractor.Éµfac = function HttpXsrfCookieExtractor_Factory(t) {\n    return new (t || HttpXsrfCookieExtractor)(i0.ÉµÉµinject(DOCUMENT), i0.ÉµÉµinject(PLATFORM_ID), i0.ÉµÉµinject(XSRF_COOKIE_NAME));\n  };\n\n  HttpXsrfCookieExtractor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n    token: HttpXsrfCookieExtractor,\n    factory: HttpXsrfCookieExtractor.Éµfac\n  });\n  return HttpXsrfCookieExtractor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n\n\nvar HttpXsrfInterceptor = /*#__PURE__*/(function () {\n  var HttpXsrfInterceptor = /*#__PURE__*/function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n      _classCallCheck(this, HttpXsrfInterceptor);\n\n      this.tokenService = tokenService;\n      this.headerName = headerName;\n    }\n\n    _createClass(HttpXsrfInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(req, next) {\n        var lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n          return next.handle(req);\n        }\n\n        var token = this.tokenService.getToken(); // Be careful not to overwrite an existing header of the same name.\n\n        if (token !== null && !req.headers.has(this.headerName)) {\n          req = req.clone({\n            headers: req.headers.set(this.headerName, token)\n          });\n        }\n\n        return next.handle(req);\n      }\n    }]);\n\n    return HttpXsrfInterceptor;\n  }();\n\n  HttpXsrfInterceptor.Éµfac = function HttpXsrfInterceptor_Factory(t) {\n    return new (t || HttpXsrfInterceptor)(i0.ÉµÉµinject(HttpXsrfTokenExtractor), i0.ÉµÉµinject(XSRF_HEADER_NAME));\n  };\n\n  HttpXsrfInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n    token: HttpXsrfInterceptor,\n    factory: HttpXsrfInterceptor.Éµfac\n  });\n  return HttpXsrfInterceptor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\n\n\nvar HttpInterceptingHandler = /*#__PURE__*/(function () {\n  var HttpInterceptingHandler = /*#__PURE__*/function () {\n    function HttpInterceptingHandler(backend, injector) {\n      _classCallCheck(this, HttpInterceptingHandler);\n\n      this.backend = backend;\n      this.injector = injector;\n      this.chain = null;\n    }\n\n    _createClass(HttpInterceptingHandler, [{\n      key: \"handle\",\n      value: function handle(req) {\n        if (this.chain === null) {\n          var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n          this.chain = interceptors.reduceRight(function (next, interceptor) {\n            return new HttpInterceptorHandler(next, interceptor);\n          }, this.backend);\n        }\n\n        return this.chain.handle(req);\n      }\n    }]);\n\n    return HttpInterceptingHandler;\n  }();\n\n  HttpInterceptingHandler.Éµfac = function HttpInterceptingHandler_Factory(t) {\n    return new (t || HttpInterceptingHandler)(i0.ÉµÉµinject(HttpBackend), i0.ÉµÉµinject(i0.Injector));\n  };\n\n  HttpInterceptingHandler.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n    token: HttpInterceptingHandler,\n    factory: HttpInterceptingHandler.Éµfac\n  });\n  return HttpInterceptingHandler;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\n\n\nfunction interceptingHandler(backend) {\n  var interceptors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!interceptors) {\n    return backend;\n  }\n\n  return interceptors.reduceRight(function (next, interceptor) {\n    return new HttpInterceptorHandler(next, interceptor);\n  }, backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\n\n\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n\n  return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n\n\nvar HttpClientXsrfModule = /*#__PURE__*/(function () {\n  var HttpClientXsrfModule = /*#__PURE__*/function () {\n    function HttpClientXsrfModule() {\n      _classCallCheck(this, HttpClientXsrfModule);\n    }\n\n    _createClass(HttpClientXsrfModule, null, [{\n      key: \"disable\",\n      value:\n      /**\n       * Disable the default XSRF protection.\n       */\n      function disable() {\n        return {\n          ngModule: HttpClientXsrfModule,\n          providers: [{\n            provide: HttpXsrfInterceptor,\n            useClass: NoopInterceptor\n          }]\n        };\n      }\n      /**\n       * Configure XSRF protection.\n       * @param options An object that can specify either or both\n       * cookie name or header name.\n       * - Cookie name default is `XSRF-TOKEN`.\n       * - Header name default is `X-XSRF-TOKEN`.\n       *\n       */\n\n    }, {\n      key: \"withOptions\",\n      value: function withOptions() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n          ngModule: HttpClientXsrfModule,\n          providers: [options.cookieName ? {\n            provide: XSRF_COOKIE_NAME,\n            useValue: options.cookieName\n          } : [], options.headerName ? {\n            provide: XSRF_HEADER_NAME,\n            useValue: options.headerName\n          } : []]\n        };\n      }\n    }]);\n\n    return HttpClientXsrfModule;\n  }();\n\n  HttpClientXsrfModule.Éµfac = function HttpClientXsrfModule_Factory(t) {\n    return new (t || HttpClientXsrfModule)();\n  };\n\n  HttpClientXsrfModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n    type: HttpClientXsrfModule\n  });\n  HttpClientXsrfModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n    providers: [HttpXsrfInterceptor, {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: HttpXsrfInterceptor,\n      multi: true\n    }, {\n      provide: HttpXsrfTokenExtractor,\n      useClass: HttpXsrfCookieExtractor\n    }, {\n      provide: XSRF_COOKIE_NAME,\n      useValue: 'XSRF-TOKEN'\n    }, {\n      provide: XSRF_HEADER_NAME,\n      useValue: 'X-XSRF-TOKEN'\n    }]\n  });\n  return HttpClientXsrfModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nvar HttpClientModule = /*#__PURE__*/(function () {\n  var HttpClientModule = /*#__PURE__*/_createClass(function HttpClientModule() {\n    _classCallCheck(this, HttpClientModule);\n  });\n\n  HttpClientModule.Éµfac = function HttpClientModule_Factory(t) {\n    return new (t || HttpClientModule)();\n  };\n\n  HttpClientModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n    type: HttpClientModule\n  });\n  HttpClientModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n    providers: [HttpClient, {\n      provide: HttpHandler,\n      useClass: HttpInterceptingHandler\n    }, HttpXhrBackend, {\n      provide: HttpBackend,\n      useExisting: HttpXhrBackend\n    }],\n    imports: [[HttpClientXsrfModule.withOptions({\n      cookieName: 'XSRF-TOKEN',\n      headerName: 'X-XSRF-TOKEN'\n    })]]\n  });\n  return HttpClientModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nvar HttpClientJsonpModule = /*#__PURE__*/(function () {\n  var HttpClientJsonpModule = /*#__PURE__*/_createClass(function HttpClientJsonpModule() {\n    _classCallCheck(this, HttpClientJsonpModule);\n  });\n\n  HttpClientJsonpModule.Éµfac = function HttpClientJsonpModule_Factory(t) {\n    return new (t || HttpClientJsonpModule)();\n  };\n\n  HttpClientJsonpModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n    type: HttpClientJsonpModule\n  });\n  HttpClientJsonpModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n    providers: [JsonpClientBackend, {\n      provide: JsonpCallbackContext,\n      useFactory: jsonpCallbackContext\n    }, {\n      provide: HTTP_INTERCEPTORS,\n      useClass: JsonpInterceptor,\n      multi: true\n    }]\n  });\n  return HttpClientJsonpModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\n\n\nvar XhrFactory = XhrFactory$1;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ÉµHttpInterceptingHandler };","map":{"version":3,"names":["i1","DOCUMENT","ÉµparseCookieValue","XhrFactory","XhrFactory$1","i0","Injectable","InjectionToken","Inject","PLATFORM_ID","NgModule","of","Observable","concatMap","filter","map","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","delete","existing","fn","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","paramParser","rawParams","codec","params","replace","param","eqIdx","decodeKey","decodeValue","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","s","t","_a","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","_value","eKey","encodeKey","encodeValue","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","toString","qIdx","sep","JSON","stringify","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","first","req","events$","pipe","handle","res$","event","request","callbackParam","append","Éµfac","Éµprov","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","observer","callback","nextCallback","node","createElement","src","finished","data","cleanup","parentNode","removeChild","onLoad","then","complete","onError","addEventListener","appendChild","Sent","removeListeners","script","implementation","createHTMLDocument","adoptNode","JsonpInterceptor","jsonp","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","getToken","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","Injector","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","Éµmod","Éµinj","useExisting","multi","HttpClientModule","withOptions","HttpClientJsonpModule","useFactory","ÉµHttpInterceptingHandler"],"sources":["C:/Users/sonkh/2/node_modules/@angular/common/fesm2015/http.mjs"],"sourcesContent":["/**\n * @license Angular v13.3.11\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ÉµparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '2B': '+',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => { var _a; return (_a = STANDARD_ENCODING_REPLACEMENTS[t]) !== null && _a !== void 0 ? _a : s; });\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        var _a;\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpClient.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClient });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NoopInterceptor, deps: [], target: i0.ÉµÉµFactoryTarget.Injectable });\nNoopInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NoopInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NoopInterceptor, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n}\nJsonpClientBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ÉµÉµFactoryTarget.Injectable });\nJsonpClientBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: JsonpClientBackend });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: JsonpClientBackend }], target: i0.ÉµÉµFactoryTarget.Injectable });\nJsonpInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: JsonpInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpClientBackend }]; } });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXhrBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpXhrBackend });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXsrfCookieExtractor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpXsrfCookieExtractor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [XSRF_COOKIE_NAME]\n                    }] }];\n    } });\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: HttpXsrfTokenExtractor }, { token: XSRF_HEADER_NAME }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXsrfInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpXsrfInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: HttpXsrfTokenExtractor }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [XSRF_HEADER_NAME]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpInterceptingHandler, deps: [{ token: HttpBackend }, { token: i0.Injector }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpInterceptingHandler.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpInterceptingHandler });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpInterceptingHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.Injector }]; } });\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientXsrfModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientXsrfModule });\nHttpClientXsrfModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientModule, imports: [HttpClientXsrfModule] });\nHttpClientModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientModule, providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN',\n            }),\n        ]] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Optional configuration for XSRF protection.\n                     */\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        HttpClient,\n                        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientJsonpModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientJsonpModule });\nHttpClientJsonpModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ÉµHttpInterceptingHandler };\n"],"mappings":"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A3B;IAjBc;EAkBjB;;;EAnB2BZ,gB;AAsBhC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASa,OAAT,CAAiBhE,OAAjB,EAA0BkC,IAA1B,EAAgC;EAC5B,OAAO;IACHA,IAAI,EAAJA,IADG;IAEHnG,OAAO,EAAEiE,OAAO,CAACjE,OAFd;IAGHwG,OAAO,EAAEvC,OAAO,CAACuC,OAHd;IAIH0B,OAAO,EAAEjE,OAAO,CAACiE,OAJd;IAKHlF,MAAM,EAAEiB,OAAO,CAACjB,MALb;IAMHoD,cAAc,EAAEnC,OAAO,CAACmC,cANrB;IAOHE,YAAY,EAAErC,OAAO,CAACqC,YAPnB;IAQHD,eAAe,EAAEpC,OAAO,CAACoC;EARtB,CAAP;AAUH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACM8B,U;MAAAA,U;IACF,oBAAYC,OAAZ,EAAqB;MAAA;;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;aACI,iBAAQC,KAAR,EAAerC,GAAf,EAAkC;QAAA;;QAAA,IAAd/B,OAAc,uEAAJ,EAAI;QAC9B,IAAIqE,GAAJ,CAD8B,CAE9B;;QACA,IAAID,KAAK,YAAYtC,WAArB,EAAkC;UAC9B;UACA;UACAuC,GAAG,GAAGD,KAAN;QACH,CAJD,MAKK;UACD;UACA;UACA;UACA;UACA,IAAIrI,OAAO,GAAGqC,SAAd;;UACA,IAAI4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"},"metadata":{},"sourceType":"module"}