{"ast":null,"code":"import _get from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _createForOfIteratorHelper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _toConsumableArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nvar BaseTreeControl = /*#__PURE__*/function () {\n  function BaseTreeControl() {\n    _classCallCheck(this, BaseTreeControl);\n\n    /** A selection model with multi-selection to track expansion status. */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /** Toggles one single data node's expanded/collapsed state. */\n\n\n  _createClass(BaseTreeControl, [{\n    key: \"toggle\",\n    value: function toggle(dataNode) {\n      this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n\n  }, {\n    key: \"expand\",\n    value: function expand(dataNode) {\n      this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n\n  }, {\n    key: \"collapse\",\n    value: function collapse(dataNode) {\n      this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n\n  }, {\n    key: \"isExpanded\",\n    value: function isExpanded(dataNode) {\n      return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n\n  }, {\n    key: \"toggleDescendants\",\n    value: function toggleDescendants(dataNode) {\n      this.expansionModel.isSelected(this._trackByValue(dataNode)) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll() {\n      this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n\n  }, {\n    key: \"expandDescendants\",\n    value: function expandDescendants(dataNode) {\n      var _this$expansionModel,\n          _this = this;\n\n      var toBeProcessed = [dataNode];\n      toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));\n\n      (_this$expansionModel = this.expansionModel).select.apply(_this$expansionModel, _toConsumableArray(toBeProcessed.map(function (value) {\n        return _this._trackByValue(value);\n      })));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n\n  }, {\n    key: \"collapseDescendants\",\n    value: function collapseDescendants(dataNode) {\n      var _this$expansionModel2,\n          _this2 = this;\n\n      var toBeProcessed = [dataNode];\n      toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));\n\n      (_this$expansionModel2 = this.expansionModel).deselect.apply(_this$expansionModel2, _toConsumableArray(toBeProcessed.map(function (value) {\n        return _this2._trackByValue(value);\n      })));\n    }\n  }, {\n    key: \"_trackByValue\",\n    value: function _trackByValue(value) {\n      return this.trackBy ? this.trackBy(value) : value;\n    }\n  }]);\n\n  return BaseTreeControl;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\n\n\nvar FlatTreeControl = /*#__PURE__*/function (_BaseTreeControl) {\n  _inherits(FlatTreeControl, _BaseTreeControl);\n\n  var _super = _createSuper(FlatTreeControl);\n\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  function FlatTreeControl(getLevel, isExpandable, options) {\n    var _this3;\n\n    _classCallCheck(this, FlatTreeControl);\n\n    _this3 = _super.call(this);\n    _this3.getLevel = getLevel;\n    _this3.isExpandable = isExpandable;\n    _this3.options = options;\n\n    if (_this3.options) {\n      _this3.trackBy = _this3.options.trackBy;\n    }\n\n    return _this3;\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n\n\n  _createClass(FlatTreeControl, [{\n    key: \"getDescendants\",\n    value: function getDescendants(dataNode) {\n      var startIndex = this.dataNodes.indexOf(dataNode);\n      var results = []; // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n      // The level of descendants of a tree node must be greater than the level of the given\n      // tree node.\n      // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n      // If we reach a node whose level is greater than the level of the tree node, we hit a\n      // sibling of an ancestor.\n\n      for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n        results.push(this.dataNodes[i]);\n      }\n\n      return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n\n  }, {\n    key: \"expandAll\",\n    value: function expandAll() {\n      var _this$expansionModel3,\n          _this4 = this;\n\n      (_this$expansionModel3 = this.expansionModel).select.apply(_this$expansionModel3, _toConsumableArray(this.dataNodes.map(function (node) {\n        return _this4._trackByValue(node);\n      })));\n    }\n  }]);\n\n  return FlatTreeControl;\n}(BaseTreeControl);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\n\n\nvar NestedTreeControl = /*#__PURE__*/function (_BaseTreeControl2) {\n  _inherits(NestedTreeControl, _BaseTreeControl2);\n\n  var _super2 = _createSuper(NestedTreeControl);\n\n  /** Construct with nested tree function getChildren. */\n  function NestedTreeControl(getChildren, options) {\n    var _this5;\n\n    _classCallCheck(this, NestedTreeControl);\n\n    _this5 = _super2.call(this);\n    _this5.getChildren = getChildren;\n    _this5.options = options;\n\n    if (_this5.options) {\n      _this5.trackBy = _this5.options.trackBy;\n    }\n\n    return _this5;\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n\n\n  _createClass(NestedTreeControl, [{\n    key: \"expandAll\",\n    value: function expandAll() {\n      var _this6 = this,\n          _this$expansionModel4;\n\n      this.expansionModel.clear();\n      var allNodes = this.dataNodes.reduce(function (accumulator, dataNode) {\n        return [].concat(_toConsumableArray(accumulator), _toConsumableArray(_this6.getDescendants(dataNode)), [dataNode]);\n      }, []);\n\n      (_this$expansionModel4 = this.expansionModel).select.apply(_this$expansionModel4, _toConsumableArray(allNodes.map(function (node) {\n        return _this6._trackByValue(node);\n      })));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n\n  }, {\n    key: \"getDescendants\",\n    value: function getDescendants(dataNode) {\n      var descendants = [];\n\n      this._getDescendants(descendants, dataNode); // Remove the node itself\n\n\n      return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n\n  }, {\n    key: \"_getDescendants\",\n    value: function _getDescendants(descendants, dataNode) {\n      var _this7 = this;\n\n      descendants.push(dataNode);\n      var childrenNodes = this.getChildren(dataNode);\n\n      if (Array.isArray(childrenNodes)) {\n        childrenNodes.forEach(function (child) {\n          return _this7._getDescendants(descendants, child);\n        });\n      } else if (isObservable(childrenNodes)) {\n        // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n        // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n        childrenNodes.pipe(take(1), filter(Boolean)).subscribe(function (children) {\n          var _iterator = _createForOfIteratorHelper(children),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var child = _step.value;\n\n              _this7._getDescendants(descendants, child);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      }\n    }\n  }]);\n\n  return NestedTreeControl;\n}(BaseTreeControl);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\n\n\nvar CDK_TREE_NODE_OUTLET_NODE = /*#__PURE__*/new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\nvar CdkTreeNodeOutlet = /*#__PURE__*/(function () {\n  var CdkTreeNodeOutlet = /*#__PURE__*/_createClass(function CdkTreeNodeOutlet(viewContainer, _node) {\n    _classCallCheck(this, CdkTreeNodeOutlet);\n\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  });\n\n  CdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n    return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n  };\n\n  CdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeOutlet,\n    selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n  });\n  return CdkTreeNodeOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Context provided to the tree node component. */\n\n\nvar CdkTreeNodeOutletContext = /*#__PURE__*/_createClass(function CdkTreeNodeOutletContext(data) {\n  _classCallCheck(this, CdkTreeNodeOutletContext);\n\n  this.$implicit = data;\n});\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nvar CdkTreeNodeDef = /*#__PURE__*/(function () {\n  var CdkTreeNodeDef = /*#__PURE__*/_createClass(\n  /** @docs-private */\n  function CdkTreeNodeDef(template) {\n    _classCallCheck(this, CdkTreeNodeDef);\n\n    this.template = template;\n  });\n\n  CdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n    return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeDef,\n    selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"cdkTreeNodeDefWhen\", \"when\"]\n    }\n  });\n  return CdkTreeNodeDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\n\n\nfunction getTreeNoValidDataSourceError() {\n  return Error(\"A valid data source must be provided.\");\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\n\n\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\n\n\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(\"Could not find a matching node definition for the provided node data.\");\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\n\n\nfunction getTreeControlMissingError() {\n  return Error(\"Could not find a tree control for the tree.\");\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\n\n\nfunction getTreeControlFunctionsMissingError() {\n  return Error(\"Could not find functions for nested/flat tree in tree control.\");\n}\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n\n\nvar CdkTree = /*#__PURE__*/(function () {\n  var CdkTree = /*#__PURE__*/function () {\n    function CdkTree(_differs, _changeDetectorRef) {\n      _classCallCheck(this, CdkTree);\n\n      this._differs = _differs;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Subject that emits when the component has been destroyed. */\n\n      this._onDestroy = new Subject();\n      /** Level of nodes */\n\n      this._levels = new Map(); // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n      //     Remove the MAX_VALUE in viewChange\n\n      /**\n       * Stream containing the latest information on what rows are being displayed on screen.\n       * Can be used by the data source to as a heuristic of what data should be provided.\n       */\n\n      this.viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE\n      });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n\n\n    _createClass(CdkTree, [{\n      key: \"dataSource\",\n      get: function get() {\n        return this._dataSource;\n      },\n      set: function set(dataSource) {\n        if (this._dataSource !== dataSource) {\n          this._switchDataSource(dataSource);\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n        if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTreeControlMissingError();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n\n        this.viewChange.complete();\n\n        this._onDestroy.next();\n\n        this._onDestroy.complete();\n\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n          this.dataSource.disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n          this._dataSubscription.unsubscribe();\n\n          this._dataSubscription = null;\n        }\n      }\n    }, {\n      key: \"ngAfterContentChecked\",\n      value: function ngAfterContentChecked() {\n        var defaultNodeDefs = this._nodeDefs.filter(function (def) {\n          return !def.when;\n        });\n\n        if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTreeMultipleDefaultNodeDefsError();\n        }\n\n        this._defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n          this._observeRenderChanges();\n        }\n      } // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n      //     and nested trees.\n\n      /**\n       * Switch to the provided data source by resetting the data and unsubscribing from the current\n       * render change subscription if one exists. If the data source is null, interpret this by\n       * clearing the node outlet. Otherwise start listening for new data.\n       */\n\n    }, {\n      key: \"_switchDataSource\",\n      value: function _switchDataSource(dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n          this.dataSource.disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n          this._dataSubscription.unsubscribe();\n\n          this._dataSubscription = null;\n        } // Remove the all dataNodes if there is now no data source\n\n\n        if (!dataSource) {\n          this._nodeOutlet.viewContainer.clear();\n        }\n\n        this._dataSource = dataSource;\n\n        if (this._nodeDefs) {\n          this._observeRenderChanges();\n        }\n      }\n      /** Set up a subscription for the data provided by the data source. */\n\n    }, {\n      key: \"_observeRenderChanges\",\n      value: function _observeRenderChanges() {\n        var _this8 = this;\n\n        var dataStream;\n\n        if (isDataSource(this._dataSource)) {\n          dataStream = this._dataSource.connect(this);\n        } else if (isObservable(this._dataSource)) {\n          dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n          dataStream = of(this._dataSource);\n        }\n\n        if (dataStream) {\n          this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(function (data) {\n            return _this8.renderNodeChanges(data);\n          });\n        } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          throw getTreeNoValidDataSourceError();\n        }\n      }\n      /** Check for changes made in the data and render each change (node added/removed/moved). */\n\n    }, {\n      key: \"renderNodeChanges\",\n      value: function renderNodeChanges(data) {\n        var _this9 = this;\n\n        var dataDiffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._dataDiffer;\n        var viewContainer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._nodeOutlet.viewContainer;\n        var parentData = arguments.length > 3 ? arguments[3] : undefined;\n        var changes = dataDiffer.diff(data);\n\n        if (!changes) {\n          return;\n        }\n\n        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n          if (item.previousIndex == null) {\n            _this9.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n          } else if (currentIndex == null) {\n            viewContainer.remove(adjustedPreviousIndex);\n\n            _this9._levels.delete(item.item);\n          } else {\n            var view = viewContainer.get(adjustedPreviousIndex);\n            viewContainer.move(view, currentIndex);\n          }\n        });\n\n        this._changeDetectorRef.detectChanges();\n      }\n      /**\n       * Finds the matching node definition that should be used for this node data. If there is only\n       * one node definition, it is returned. Otherwise, find the node definition that has a when\n       * predicate that returns true with the data. If none return true, return the default node\n       * definition.\n       */\n\n    }, {\n      key: \"_getNodeDef\",\n      value: function _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n          return this._nodeDefs.first;\n        }\n\n        var nodeDef = this._nodeDefs.find(function (def) {\n          return def.when && def.when(i, data);\n        }) || this._defaultNodeDef;\n\n        if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTreeMissingMatchingNodeDefError();\n        }\n\n        return nodeDef;\n      }\n      /**\n       * Create the embedded view for the data node template and place it in the correct index location\n       * within the data node view container.\n       */\n\n    }, {\n      key: \"insertNode\",\n      value: function insertNode(nodeData, index, viewContainer, parentData) {\n        var node = this._getNodeDef(nodeData, index); // Node context that will be provided to created embedded view\n\n\n        var context = new CdkTreeNodeOutletContext(nodeData); // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n\n        if (this.treeControl.getLevel) {\n          context.level = this.treeControl.getLevel(nodeData);\n        } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n          context.level = this._levels.get(parentData) + 1;\n        } else {\n          context.level = 0;\n        }\n\n        this._levels.set(nodeData, context.level); // Use default tree nodeOutlet, or nested node's nodeOutlet\n\n\n        var container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index); // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n\n        if (CdkTreeNode.mostRecentTreeNode) {\n          CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n      }\n    }]);\n\n    return CdkTree;\n  }();\n\n  CdkTree.ɵfac = function CdkTree_Factory(t) {\n    return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  CdkTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CdkTree,\n    selectors: [[\"cdk-tree\"]],\n    contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n      }\n    },\n    viewQuery: function CdkTree_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n    inputs: {\n      dataSource: \"dataSource\",\n      treeControl: \"treeControl\",\n      trackBy: \"trackBy\"\n    },\n    exportAs: [\"cdkTree\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n    template: function CdkTree_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [CdkTreeNodeOutlet],\n    encapsulation: 2\n  });\n  return CdkTree;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n\n\nvar CdkTreeNode = /*#__PURE__*/(function () {\n  var CdkTreeNode = /*#__PURE__*/function () {\n    function CdkTreeNode(_elementRef, _tree) {\n      _classCallCheck(this, CdkTreeNode);\n\n      this._elementRef = _elementRef;\n      this._tree = _tree;\n      /** Subject that emits when the component has been destroyed. */\n\n      this._destroyed = new Subject();\n      /** Emits when the node's data has changed. */\n\n      this._dataChanges = new Subject();\n      CdkTreeNode.mostRecentTreeNode = this; // The classes are directly added here instead of in the host property because classes on\n      // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n      // it is not set by the time it's children nodes try to read the class from it.\n      // TODO: move to host after View Engine deprecation\n\n      this._elementRef.nativeElement.classList.add('cdk-tree-node');\n\n      this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n\n\n    _createClass(CdkTreeNode, [{\n      key: \"role\",\n      get: function get() {\n        return 'treeitem';\n      },\n      set: function set(_role) {\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.setAttribute('role', _role);\n      }\n      /** The tree node's data. */\n\n    }, {\n      key: \"data\",\n      get: function get() {\n        return this._data;\n      },\n      set: function set(value) {\n        if (value !== this._data) {\n          this._data = value;\n\n          this._setRoleFromData();\n\n          this._dataChanges.next();\n        }\n      }\n    }, {\n      key: \"isExpanded\",\n      get: function get() {\n        return this._tree.treeControl.isExpanded(this._data);\n      }\n    }, {\n      key: \"_setExpanded\",\n      value: function _setExpanded(_expanded) {\n        this._isAriaExpanded = _expanded;\n\n        this._elementRef.nativeElement.setAttribute('aria-expanded', \"\".concat(_expanded));\n      }\n    }, {\n      key: \"level\",\n      get: function get() {\n        // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n        // aria-level off the parent node and use it as the level for this node (note aria-level is\n        // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n\n        this._elementRef.nativeElement.setAttribute('aria-level', \"\".concat(this.level + 1));\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        // aria-expanded is be set here because the expanded state is stored in the tree control and\n        // the node isn't aware when the state is changed.\n        // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n        // TODO: move to host after View Engine deprecation\n        if (this.isExpanded != this._isAriaExpanded) {\n          this._setExpanded(this.isExpanded);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n          CdkTreeNode.mostRecentTreeNode = null;\n        }\n\n        this._dataChanges.complete();\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /** Focuses the menu item. Implements for FocusableOption. */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this._elementRef.nativeElement.focus();\n      } // TODO: role should eventually just be set in the component host\n\n    }, {\n      key: \"_setRoleFromData\",\n      value: function _setRoleFromData() {\n        if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTreeControlFunctionsMissingError();\n        }\n\n        this.role = 'treeitem';\n      }\n    }]);\n\n    return CdkTreeNode;\n  }();\n\n  CdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n    return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree));\n  };\n\n  CdkTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNode,\n    selectors: [[\"cdk-tree-node\"]],\n    inputs: {\n      role: \"role\"\n    },\n    exportAs: [\"cdkTreeNode\"]\n  });\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n\n  CdkTreeNode.mostRecentTreeNode = null;\n  return CdkTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction getParentNodeAriaLevel(nodeElement) {\n  var parent = nodeElement.parentElement;\n\n  while (parent && !isNodeElement(parent)) {\n    parent = parent.parentElement;\n  }\n\n  if (!parent) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('Incorrect tree structure containing detached node.');\n    } else {\n      return -1;\n    }\n  } else if (parent.classList.contains('cdk-nested-tree-node')) {\n    return coerceNumberProperty(parent.getAttribute('aria-level'));\n  } else {\n    // The ancestor element is the cdk-tree itself\n    return 0;\n  }\n}\n\nfunction isNodeElement(element) {\n  var classList = element.classList;\n  return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\n\n\nvar CdkNestedTreeNode = /*#__PURE__*/(function () {\n  var CdkNestedTreeNode = /*#__PURE__*/function (_CdkTreeNode) {\n    _inherits(CdkNestedTreeNode, _CdkTreeNode);\n\n    var _super3 = _createSuper(CdkNestedTreeNode);\n\n    function CdkNestedTreeNode(elementRef, tree, _differs) {\n      var _this10;\n\n      _classCallCheck(this, CdkNestedTreeNode);\n\n      _this10 = _super3.call(this, elementRef, tree);\n      _this10._differs = _differs; // The classes are directly added here instead of in the host property because classes on\n      // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n      // it is not set by the time it's children nodes try to read the class from it.\n      // TODO: move to host after View Engine deprecation\n\n      elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n      return _this10;\n    }\n\n    _createClass(CdkNestedTreeNode, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this11 = this;\n\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n        if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTreeControlFunctionsMissingError();\n        }\n\n        var childrenNodes = this._tree.treeControl.getChildren(this.data);\n\n        if (Array.isArray(childrenNodes)) {\n          this.updateChildrenNodes(childrenNodes);\n        } else if (isObservable(childrenNodes)) {\n          childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(function (result) {\n            return _this11.updateChildrenNodes(result);\n          });\n        }\n\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this11.updateChildrenNodes();\n        });\n      } // This is a workaround for https://github.com/angular/angular/issues/23091\n      // In aot mode, the lifecycle hooks from parent class are not called.\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        _get(_getPrototypeOf(CdkNestedTreeNode.prototype), \"ngOnInit\", this).call(this);\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        _get(_getPrototypeOf(CdkNestedTreeNode.prototype), \"ngDoCheck\", this).call(this);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._clear();\n\n        _get(_getPrototypeOf(CdkNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n      }\n      /** Add children dataNodes to the NodeOutlet */\n\n    }, {\n      key: \"updateChildrenNodes\",\n      value: function updateChildrenNodes(children) {\n        var outlet = this._getNodeOutlet();\n\n        if (children) {\n          this._children = children;\n        }\n\n        if (outlet && this._children) {\n          var viewContainer = outlet.viewContainer;\n\n          this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        } else {\n          // Reset the data differ if there's no children nodes displayed\n          this._dataDiffer.diff([]);\n        }\n      }\n      /** Clear the children dataNodes. */\n\n    }, {\n      key: \"_clear\",\n      value: function _clear() {\n        var outlet = this._getNodeOutlet();\n\n        if (outlet) {\n          outlet.viewContainer.clear();\n\n          this._dataDiffer.diff([]);\n        }\n      }\n      /** Gets the outlet for the current node. */\n\n    }, {\n      key: \"_getNodeOutlet\",\n      value: function _getNodeOutlet() {\n        var _this12 = this;\n\n        var outlets = this.nodeOutlet; // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n\n        return outlets && outlets.find(function (outlet) {\n          return !outlet._node || outlet._node === _this12;\n        });\n      }\n    }]);\n\n    return CdkNestedTreeNode;\n  }(CdkTreeNode);\n\n  CdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n    return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n  };\n\n  CdkNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkNestedTreeNode,\n    selectors: [[\"cdk-nested-tree-node\"]],\n    contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n      }\n    },\n    inputs: {\n      role: \"role\",\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"cdkNestedTreeNode\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: CdkNestedTreeNode\n    }, {\n      provide: CDK_TREE_NODE_OUTLET_NODE,\n      useExisting: CdkNestedTreeNode\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkNestedTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Regex used to split a string on its CSS units. */\n\n\nvar cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n\nvar CdkTreeNodePadding = /*#__PURE__*/(function () {\n  var CdkTreeNodePadding = /*#__PURE__*/function () {\n    function CdkTreeNodePadding(_treeNode, _tree, _element, _dir) {\n      var _this13 = this;\n\n      _classCallCheck(this, CdkTreeNodePadding);\n\n      this._treeNode = _treeNode;\n      this._tree = _tree;\n      this._element = _element;\n      this._dir = _dir;\n      /** Subject that emits when the component has been destroyed. */\n\n      this._destroyed = new Subject();\n      /** CSS units used for the indentation value. */\n\n      this.indentUnits = 'px';\n      this._indent = 40;\n\n      this._setPadding();\n\n      if (_dir) {\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this13._setPadding(true);\n        });\n      } // In Ivy the indentation binding might be set before the tree node's data has been added,\n      // which means that we'll miss the first render. We have to subscribe to changes in the\n      // data to ensure that everything is up to date.\n\n\n      _treeNode._dataChanges.subscribe(function () {\n        return _this13._setPadding();\n      });\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n\n\n    _createClass(CdkTreeNodePadding, [{\n      key: \"level\",\n      get: function get() {\n        return this._level;\n      },\n      set: function set(value) {\n        this._setLevelInput(value);\n      }\n      /**\n       * The indent for each level. Can be a number or a CSS string.\n       * Default number 40px from material design menu sub-menu spec.\n       */\n\n    }, {\n      key: \"indent\",\n      get: function get() {\n        return this._indent;\n      },\n      set: function set(indent) {\n        this._setIndentInput(indent);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n\n    }, {\n      key: \"_paddingIndent\",\n      value: function _paddingIndent() {\n        var nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n        var level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? \"\".concat(level * this._indent).concat(this.indentUnits) : null;\n      }\n    }, {\n      key: \"_setPadding\",\n      value: function _setPadding() {\n        var forceChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        var padding = this._paddingIndent();\n\n        if (padding !== this._currentPadding || forceChange) {\n          var element = this._element.nativeElement;\n          var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n          var resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n          element.style[paddingProp] = padding || '';\n          element.style[resetProp] = '';\n          this._currentPadding = padding;\n        }\n      }\n      /**\n       * This has been extracted to a util because of TS 4 and VE.\n       * View Engine doesn't support property rename inheritance.\n       * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n       * @docs-private\n       */\n\n    }, {\n      key: \"_setLevelInput\",\n      value: function _setLevelInput(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null);\n\n        this._setPadding();\n      }\n      /**\n       * This has been extracted to a util because of TS 4 and VE.\n       * View Engine doesn't support property rename inheritance.\n       * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n       * @docs-private\n       */\n\n    }, {\n      key: \"_setIndentInput\",\n      value: function _setIndentInput(indent) {\n        var value = indent;\n        var units = 'px';\n\n        if (typeof indent === 'string') {\n          var parts = indent.split(cssUnitPattern);\n          value = parts[0];\n          units = parts[1] || units;\n        }\n\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n\n        this._setPadding();\n      }\n    }]);\n\n    return CdkTreeNodePadding;\n  }();\n\n  CdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n    return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n  };\n\n  CdkTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodePadding,\n    selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"cdkTreeNodePadding\", \"level\"],\n      indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n    }\n  });\n  return CdkTreeNodePadding;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Node toggle to expand/collapse the node.\n */\n\n\nvar CdkTreeNodeToggle = /*#__PURE__*/(function () {\n  var CdkTreeNodeToggle = /*#__PURE__*/function () {\n    function CdkTreeNodeToggle(_tree, _treeNode) {\n      _classCallCheck(this, CdkTreeNodeToggle);\n\n      this._tree = _tree;\n      this._treeNode = _treeNode;\n      this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n\n\n    _createClass(CdkTreeNodeToggle, [{\n      key: \"recursive\",\n      get: function get() {\n        return this._recursive;\n      },\n      set: function set(value) {\n        this._recursive = coerceBooleanProperty(value);\n      } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n      // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n      // ViewEngine they're overwritten.\n      // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n      // tslint:disable-next-line:no-host-decorator-in-concrete\n\n    }, {\n      key: \"_toggle\",\n      value: function _toggle(event) {\n        this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n      }\n    }]);\n\n    return CdkTreeNodeToggle;\n  }();\n\n  CdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n    return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode));\n  };\n\n  CdkTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeToggle,\n    selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n    hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n          return ctx._toggle($event);\n        });\n      }\n    },\n    inputs: {\n      recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n    }\n  });\n  return CdkTreeNodeToggle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\nvar CdkTreeModule = /*#__PURE__*/(function () {\n  var CdkTreeModule = /*#__PURE__*/_createClass(function CdkTreeModule() {\n    _classCallCheck(this, CdkTreeModule);\n  });\n\n  CdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n    return new (t || CdkTreeModule)();\n  };\n\n  CdkTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CdkTreeModule\n  });\n  CdkTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return CdkTreeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, {\n    declarations: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet],\n    exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };","map":{"version":3,"names":["SelectionModel","isDataSource","isObservable","Subject","BehaviorSubject","of","take","filter","takeUntil","InjectionToken","Directive","ViewContainerRef","Inject","Optional","TemplateRef","Component","ViewEncapsulation","ChangeDetectionStrategy","IterableDiffers","ChangeDetectorRef","Input","ViewChild","ContentChildren","ElementRef","HostListener","NgModule","coerceNumberProperty","coerceBooleanProperty","Directionality","ɵngcc0","ɵngcc1","BaseTreeControl","expansionModel","dataNode","toggle","_trackByValue","select","deselect","isSelected","collapseDescendants","expandDescendants","clear","toBeProcessed","push","getDescendants","map","value","trackBy","FlatTreeControl","getLevel","isExpandable","options","startIndex","dataNodes","indexOf","results","i","length","node","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","pipe","Boolean","subscribe","children","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodeOutlet","viewContainer","_node","ɵfac","CdkTreeNodeOutlet_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","CdkTreeNodeDef_Factory","inputs","when","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","Map","viewChange","start","end","Number","MAX_VALUE","_dataSource","dataSource","_switchDataSource","_dataDiffer","find","create","treeControl","_nodeOutlet","complete","next","disconnect","_dataSubscription","unsubscribe","defaultNodeDefs","_nodeDefs","def","_defaultNodeDef","_observeRenderChanges","dataStream","connect","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","first","nodeDef","nodeData","index","_getNodeDef","context","level","has","set","container","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","CdkTree_Factory","ɵcmp","ɵɵdefineComponent","contentQueries","CdkTree_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","CdkTree_Query","ɵɵviewQuery","hostAttrs","exportAs","decls","vars","consts","CdkTree_Template","ɵɵelementContainer","directives","encapsulation","_elementRef","_tree","_destroyed","_dataChanges","nativeElement","classList","add","role","_role","setAttribute","_data","_setRoleFromData","isExpanded","_expanded","_isAriaExpanded","_parentNodeAriaLevel","getParentNodeAriaLevel","_setExpanded","focus","CdkTreeNode_Factory","nodeElement","parent","parentElement","isNodeElement","contains","getAttribute","element","CdkNestedTreeNode","elementRef","tree","updateChildrenNodes","result","nodeOutlet","_clear","outlet","_getNodeOutlet","_children","outlets","CdkNestedTreeNode_Factory","CdkNestedTreeNode_ContentQueries","disabled","tabIndex","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","cssUnitPattern","CdkTreeNodePadding","_treeNode","_element","_dir","indentUnits","_indent","_setPadding","change","_level","_setLevelInput","indent","_setIndentInput","nodeLevel","forceChange","padding","_paddingIndent","_currentPadding","paddingProp","resetProp","style","units","parts","split","CdkTreeNodePadding_Factory","CdkTreeNodeToggle","_recursive","event","recursive","toggleDescendants","stopPropagation","CdkTreeNodeToggle_Factory","hostBindings","CdkTreeNodeToggle_HostBindings","ɵɵlistener","CdkTreeNodeToggle_click_HostBindingHandler","$event","_toggle","EXPORTED_DECLARATIONS","CdkTreeModule","CdkTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/tree.js"],"sourcesContent":["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /** A selection model with multi-selection to track expansion status. */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode) {\n        this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n    expand(dataNode) {\n        this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode) {\n        this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(this._trackByValue(dataNode)) ?\n            this.collapseDescendants(dataNode) :\n            this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    _trackByValue(value) {\n        return this.trackBy ? this.trackBy(value) : value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nclass FlatTreeControl extends BaseTreeControl {\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(getLevel, isExpandable, options) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode) {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nclass NestedTreeControl extends BaseTreeControl {\n    /** Construct with nested tree function getChildren. */\n    constructor(getChildren, options) {\n        super();\n        this.getChildren = getChildren;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode) {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter(Boolean))\n                .subscribe(children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass CdkTreeNodeDef {\n    /** @docs-private */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nclass CdkTree {\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /** Level of nodes */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n    get dataSource() { return this._dataSource; }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlMissingError();\n        }\n    }\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this.viewChange.complete();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex);\n                this._levels.delete(item.item);\n            }\n            else {\n                const view = viewContainer.get(adjustedPreviousIndex);\n                viewContainer.move(view, currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkTreeNodeOutlet], encapsulation: 2 });\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet, { static: true }]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nclass CdkTreeNode {\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Emits when the node's data has changed. */\n        this._dataChanges = new Subject();\n        CdkTreeNode.mostRecentTreeNode = this;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.classList.add('cdk-tree-node');\n        this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n    get role() { return 'treeitem'; }\n    set role(_role) {\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.setAttribute('role', _role);\n    }\n    /** The tree node's data. */\n    get data() { return this._data; }\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    _setExpanded(_expanded) {\n        this._isAriaExpanded = _expanded;\n        this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\n    }\n    get level() {\n        // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n        // aria-level off the parent node and use it as the level for this node (note aria-level is\n        // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n        return this._tree.treeControl.getLevel ?\n            this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n    }\n    ngOnInit() {\n        this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n        this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n    }\n    ngDoCheck() {\n        // aria-expanded is be set here because the expanded state is stored in the tree control and\n        // the node isn't aware when the state is changed.\n        // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n        // TODO: move to host after View Engine deprecation\n        if (this.isExpanded != this._isAriaExpanded) {\n            this._setExpanded(this.isExpanded);\n        }\n    }\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Focuses the menu item. Implements for FocusableOption. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    // TODO: role should eventually just be set in the component host\n    _setRoleFromData() {\n        if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        this.role = 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\nfunction getParentNodeAriaLevel(nodeElement) {\n    let parent = nodeElement.parentElement;\n    while (parent && !isNodeElement(parent)) {\n        parent = parent.parentElement;\n    }\n    if (!parent) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw Error('Incorrect tree structure containing detached node.');\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (parent.classList.contains('cdk-nested-tree-node')) {\n        return coerceNumberProperty(parent.getAttribute('aria-level'));\n    }\n    else {\n        // The ancestor element is the cdk-tree itself\n        return 0;\n    }\n}\nfunction isNodeElement(element) {\n    const classList = element.classList;\n    return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    constructor(elementRef, tree, _differs) {\n        super(elementRef, tree);\n        this._differs = _differs;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n    }\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(childrenNodes);\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n    updateChildrenNodes(children) {\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Clear the children dataNodes. */\n    _clear() {\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Gets the outlet for the current node. */\n    _getNodeOutlet() {\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nclass CdkTreeNodePadding {\n    constructor(_treeNode, _tree, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._element = _element;\n        this._dir = _dir;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** CSS units used for the indentation value. */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe(() => this._setPadding());\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() { return this._level; }\n    set level(value) { this._setLevelInput(value); }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     */\n    get indent() { return this._indent; }\n    set indent(indent) { this._setIndentInput(indent); }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent() {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    _setPadding(forceChange = false) {\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            const element = this._element.nativeElement;\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            element.style[paddingProp] = padding || '';\n            element.style[resetProp] = '';\n            this._currentPadding = padding;\n        }\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setLevelInput(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null);\n        this._setPadding();\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setIndentInput(indent) {\n        let value = indent;\n        let units = 'px';\n        if (typeof indent === 'string') {\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nclass CdkTreeNodeToggle {\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n    get recursive() { return this._recursive; }\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n    _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{ selector: '[cdkTreeNodeToggle]' }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); };\nCdkTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet], exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}