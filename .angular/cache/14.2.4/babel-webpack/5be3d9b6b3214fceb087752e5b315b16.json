{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { RoomService } from '../../../../services/room.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../../../services/room.service\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/select\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/button\";\n\nfunction RoomDialogComponent_mat_option_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var roomType_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", roomType_r1.Id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", roomType_r1.name, \" \");\n  }\n}\n\nexport var RoomDialogComponent = /*#__PURE__*/(function () {\n  var RoomDialogComponent = /*#__PURE__*/function () {\n    function RoomDialogComponent(dialog, fb, dialogRef, data, roomService) {\n      _classCallCheck(this, RoomDialogComponent);\n\n      this.dialog = dialog;\n      this.fb = fb;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.roomService = roomService;\n      this.roomsType = [];\n      this.isEditable = false;\n    }\n\n    _createClass(RoomDialogComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var edit;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  edit = this.data.edit;\n                  this.isEditable = edit;\n                  _context.next = 4;\n                  return this.getRoomsTypes();\n\n                case 4:\n                  console.log(this.data);\n                  this.formCentre = this.fb.group({\n                    roomNumber: [\"\", Validators.required],\n                    roomName: [\"\", Validators.required],\n                    typeId: [\"\", Validators.required]\n                  });\n                  edit == true ? this.populateForm(this.data.room) : \"\";\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      }\n    }, {\n      key: \"onSubmit\",\n      value: function onSubmit() {\n        var _this = this;\n\n        console.log(this.formCentre.valid);\n\n        if (this.formCentre.valid) {\n          console.error(this.formCentre.valid);\n\n          if (this.data.edit == true) {\n            this.roomService.updateRoom(this.formCentre.value, this.data.centre.CentreId).subscribe(function (data) {\n              _this.Close();\n            });\n          } else {\n            this.roomService.AddRoom(this.formCentre.value).subscribe(function (data) {\n              console.error(data);\n\n              _this.Close();\n            }, function (err) {\n              console.error(err);\n            });\n          }\n        }\n      }\n    }, {\n      key: \"getRoomsTypes\",\n      value: function getRoomsTypes() {\n        var _this2 = this;\n\n        this.roomService.getRoomsTypes().subscribe(function (res) {\n          console.log(res);\n          _this2.roomsType = res;\n        });\n      }\n    }, {\n      key: \"populateForm\",\n      value: function populateForm(data) {\n        this.formCentre.patchValue({\n          roomName: data.roomName,\n          roomNumber: data.roomNumber,\n          typeId: data.typeId\n        });\n      }\n    }, {\n      key: \"Close\",\n      value: function Close() {\n        this.dialog.closeAll();\n      }\n    }]);\n\n    return RoomDialogComponent;\n  }();\n\n  RoomDialogComponent.ɵfac = function RoomDialogComponent_Factory(t) {\n    return new (t || RoomDialogComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i3.RoomService));\n  };\n\n  RoomDialogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RoomDialogComponent,\n    selectors: [[\"app-RoomDialog\"]],\n    decls: 25,\n    vars: 3,\n    consts: [[\"mat-dialog-title\", \"\", \"align\", \"center\"], [\"autocomplete\", \"off\", 1, \"example-form\", 3, \"formGroup\", \"submit\"], [\"mat-dialog-content\", \"\"], [\"appearance\", \"fill\", 1, \"example-full-width\"], [\"matInput\", \"\", \"placeholder\", \"ex. Midrand c\", \"formControlName\", \"roomNumber\"], [\"matInput\", \"\", \"placeholder\", \"\", \"formControlName\", \"roomName\"], [\"appearance\", \"fill\"], [\"formControlName\", \"typeId\", \"required\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-dialog-actions\", \"\", \"align\", \"end\"], [\"mat-stroked-button\", \"\", \"type\", \"submit\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\"], [3, \"value\"]],\n    template: function RoomDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h3\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 1);\n        i0.ɵɵlistener(\"submit\", function RoomDialogComponent_Template_form_submit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelement(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"mat-form-field\", 3)(6, \"mat-label\");\n        i0.ɵɵtext(7, \"Room Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-form-field\", 3)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Room Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-form-field\", 6)(14, \"mat-label\");\n        i0.ɵɵtext(15, \"Choose Room Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"mat-select\", 7)(17, \"mat-option\");\n        i0.ɵɵtext(18, \"--\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, RoomDialogComponent_mat_option_19_Template, 2, 2, \"mat-option\", 8);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(20, \"div\", 9)(21, \"button\", 10);\n        i0.ɵɵtext(22, \"Confirm\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function RoomDialogComponent_Template_button_click_23_listener() {\n          return ctx.Close();\n        });\n        i0.ɵɵtext(24, \"Cancel\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.isEditable ? \"Editable\" : \"Add New Room\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.formCentre);\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngForOf\", ctx.roomsType);\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i6.MatSelect, i2.RequiredValidator, i7.MatOption, i8.NgForOf, i9.MatButton],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJSb29tRGlhbG9nLmNvbXBvbmVudC5zY3NzIn0= */\"]\n  });\n  return RoomDialogComponent;\n})();","map":{"version":3,"mappings":"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","names":["FormBuilder","Validators","MatDialog","MatDialogRef","MAT_DIALOG_DATA","RoomService","i0","RoomDialogComponent","dialog","fb","dialogRef","data","roomService","edit","isEditable","getRoomsTypes","console","log","formCentre","group","roomNumber","required","roomName","typeId","populateForm","room","valid","error","updateRoom","value","centre","CentreId","subscribe","Close","AddRoom","err","res","roomsType","patchValue","closeAll","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\sonkh\\2\\src\\app\\layouts\\owner-layout\\dialogs\\RoomDialog\\RoomDialog.component.ts","C:\\Users\\sonkh\\2\\src\\app\\layouts\\owner-layout\\dialogs\\RoomDialog\\RoomDialog.component.html"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { RoomService } from '../../../../services/room.service';\r\n\r\n@Component({\r\n  selector: 'app-RoomDialog',\r\n  templateUrl: './RoomDialog.component.html',\r\n  styleUrls: ['./RoomDialog.component.scss']\r\n})\r\nexport class RoomDialogComponent implements OnInit {\r\n\r\n  formCentre: FormGroup;\r\n  roomsType: any[] =[]\r\n  isEditable: boolean = false\r\n  constructor(\r\n    public dialog: MatDialog,\r\n    private fb: FormBuilder,\r\n    private dialogRef: MatDialogRef<RoomDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) private data,\r\n    private roomService: RoomService\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    const edit = this.data.edit;\r\n    this.isEditable = edit;\r\n   await this.getRoomsTypes()\r\n    console.log(this.data);\r\n    this.formCentre = this.fb.group({\r\n      roomNumber: [\"\", Validators.required],\r\n      roomName: [\"\", Validators.required],\r\n      typeId: [\"\", Validators.required],\r\n\r\n    });\r\n\r\n    edit == true ? this.populateForm(this.data.room) : \"\";\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(this.formCentre.valid)\r\n\r\n    if(this.formCentre.valid) {\r\n      console.error(this.formCentre.valid);\r\n      if(this.data.edit == true) {\r\n        this.roomService.updateRoom(this.formCentre.value, this.data.centre.CentreId).subscribe(data => {\r\n          this.Close();\r\n        })\r\n      } else {\r\n        this.roomService.AddRoom(this.formCentre.value).subscribe(data => {\r\n          console.error(data);\r\n          this.Close();\r\n        },\r\n        err => {\r\n          console.error(err);\r\n\r\n        })\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n  getRoomsTypes() {\r\n    this.roomService.getRoomsTypes().subscribe(res => {\r\n        console.log(res);\r\n        this.roomsType = res;\r\n    })\r\n  }\r\n\r\n\r\n\r\n  populateForm(data) {\r\n    this.formCentre.patchValue({\r\n      roomName: data.roomName,\r\n      roomNumber: data.roomNumber,\r\n      typeId: data.typeId,\r\n\r\n    });\r\n  }\r\n  Close() {\r\n    this.dialog.closeAll();\r\n  }\r\n}\r\n","<h3 mat-dialog-title align=\"center\"> {{isEditable ? 'Editable' : 'Add New Room'}} </h3>\r\n<form class=\"example-form\" [formGroup]=\"formCentre\" autocomplete=\"off\" (submit)=\"onSubmit()\">\r\n<div mat-dialog-content></div>\r\n<div mat-dialog-content>\r\n\r\n        <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n            <mat-label>Room Number</mat-label>\r\n            <input matInput placeholder=\"ex. Midrand c\"  formControlName=\"roomNumber\" >\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n            <mat-label>Room Name</mat-label>\r\n            <input matInput placeholder=\"\" formControlName=\"roomName\" >\r\n\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"fill\">\r\n          <mat-label>Choose Room Type</mat-label>\r\n          <mat-select formControlName=\"typeId\" required>\r\n            <mat-option>--</mat-option>\r\n            <mat-option *ngFor=\"let roomType of roomsType\" [value]=\"roomType.Id\">\r\n              {{roomType.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n    <button mat-stroked-button type=\"submit\">Confirm</button>\r\n    <button mat-raised-button (click)=\"Close()\" color=\"warn\">Cancel</button>\r\n</div>\r\n\r\n</form>"]},"metadata":{},"sourceType":"module"}