{"ast":null,"code":"import _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Input, Optional, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nvar matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: /*#__PURE__*/trigger('state', [/*#__PURE__*/state('initial, void, hidden', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), /*#__PURE__*/state('visible', /*#__PURE__*/style({\n    transform: 'scale(1)'\n  })), /*#__PURE__*/transition('* => visible', /*#__PURE__*/animate('200ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), /*#__PURE__*/style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), /*#__PURE__*/style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), /*#__PURE__*/transition('* => hidden', /*#__PURE__*/animate('100ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/** Time in ms to throttle repositioning after scroll events. */\n\nvar SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\n\nvar TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nvar PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\n\nvar passiveListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\n\nvar LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(\"Tooltip position \\\"\".concat(position, \"\\\" is invalid.\"));\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n  };\n}\n/** @docs-private */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\n\nvar MAT_TOOLTIP_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n\nvar _MatTooltipBase = /*#__PURE__*/(function () {\n  var _MatTooltipBase = /*#__PURE__*/function () {\n    function _MatTooltipBase(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n      var _this = this;\n\n      _classCallCheck(this, _MatTooltipBase);\n\n      this._overlay = _overlay;\n      this._elementRef = _elementRef;\n      this._scrollDispatcher = _scrollDispatcher;\n      this._viewContainerRef = _viewContainerRef;\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      this._ariaDescriber = _ariaDescriber;\n      this._focusMonitor = _focusMonitor;\n      this._dir = _dir;\n      this._defaultOptions = _defaultOptions;\n      this._position = 'below';\n      this._disabled = false;\n      this._viewInitialized = false;\n      this._pointerExitEventsInitialized = false;\n      this._viewportMargin = 8;\n      this._cssClassPrefix = 'mat';\n      /** The default delay in ms before showing the tooltip after show is called */\n\n      this.showDelay = this._defaultOptions.showDelay;\n      /** The default delay in ms before hiding the tooltip after hide is called */\n\n      this.hideDelay = this._defaultOptions.hideDelay;\n      /**\n       * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n       * uses a long press gesture to show and hide, however it can conflict with the native browser\n       * gestures. To work around the conflict, Angular Material disables native gestures on the\n       * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n       * elements). The different values for this option configure the touch event handling as follows:\n       * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n       *   browser gestures on particular elements. In particular, it allows text selection on inputs\n       *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n       * - `on` - Enables touch gestures for all elements and disables native\n       *   browser gestures with no exceptions.\n       * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n       *   showing on touch devices.\n       */\n\n      this.touchGestures = 'auto';\n      this._message = '';\n      /** Manually-bound passive event listeners. */\n\n      this._passiveListeners = [];\n      /** Emits when the component is destroyed. */\n\n      this._destroyed = new Subject();\n      /**\n       * Handles the keydown events on the host element.\n       * Needs to be an arrow function so that we can use it in addEventListener.\n       */\n\n      this._handleKeydown = function (event) {\n        if (_this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n\n          _this._ngZone.run(function () {\n            return _this.hide(0);\n          });\n        }\n      };\n\n      this._scrollStrategy = scrollStrategy;\n      this._document = _document;\n\n      if (_defaultOptions) {\n        if (_defaultOptions.position) {\n          this.position = _defaultOptions.position;\n        }\n\n        if (_defaultOptions.touchGestures) {\n          this.touchGestures = _defaultOptions.touchGestures;\n        }\n      }\n\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n        if (_this._overlayRef) {\n          _this._updatePosition(_this._overlayRef);\n        }\n      });\n\n      _ngZone.runOutsideAngular(function () {\n        _elementRef.nativeElement.addEventListener('keydown', _this._handleKeydown);\n      });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n\n\n    _createClass(_MatTooltipBase, [{\n      key: \"position\",\n      get: function get() {\n        return this._position;\n      },\n      set: function set(value) {\n        var _a;\n\n        if (value !== this._position) {\n          this._position = value;\n\n          if (this._overlayRef) {\n            this._updatePosition(this._overlayRef);\n\n            (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n\n            this._overlayRef.updatePosition();\n          }\n        }\n      }\n      /** Disables the display of the tooltip. */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n        if (this._disabled) {\n          this.hide(0);\n        } else {\n          this._setupPointerEnterEventsIfNeeded();\n        }\n      }\n      /** The message to be displayed in the tooltip */\n\n    }, {\n      key: \"message\",\n      get: function get() {\n        return this._message;\n      },\n      set: function set(value) {\n        var _this2 = this;\n\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip'); // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n\n\n        this._message = value != null ? String(value).trim() : '';\n\n        if (!this._message && this._isTooltipVisible()) {\n          this.hide(0);\n        } else {\n          this._setupPointerEnterEventsIfNeeded();\n\n          this._updateTooltipMessage();\n\n          this._ngZone.runOutsideAngular(function () {\n            // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n            // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n            // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n            // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n            Promise.resolve().then(function () {\n              _this2._ariaDescriber.describe(_this2._elementRef.nativeElement, _this2.message, 'tooltip');\n            });\n          });\n        }\n      }\n      /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n\n    }, {\n      key: \"tooltipClass\",\n      get: function get() {\n        return this._tooltipClass;\n      },\n      set: function set(value) {\n        this._tooltipClass = value;\n\n        if (this._tooltipInstance) {\n          this._setTooltipClass(this._tooltipClass);\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this3 = this;\n\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n\n        this._setupPointerEnterEventsIfNeeded();\n\n        this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(function (origin) {\n          // Note that the focus monitor runs outside the Angular zone.\n          if (!origin) {\n            _this3._ngZone.run(function () {\n              return _this3.hide(0);\n            });\n          } else if (origin === 'keyboard') {\n            _this3._ngZone.run(function () {\n              return _this3.show();\n            });\n          }\n        });\n      }\n      /**\n       * Dispose the tooltip when destroyed.\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n\n        if (this._overlayRef) {\n          this._overlayRef.dispose();\n\n          this._tooltipInstance = null;\n        } // Clean up the event listeners set in the constructor\n\n\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n\n        this._passiveListeners.forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              event = _ref2[0],\n              listener = _ref2[1];\n\n          nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n\n        this._passiveListeners.length = 0;\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n\n        this._focusMonitor.stopMonitoring(nativeElement);\n      }\n      /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n\n    }, {\n      key: \"show\",\n      value: function show() {\n        var _this4 = this;\n\n        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.showDelay;\n\n        if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n          return;\n        }\n\n        var overlayRef = this._createOverlay();\n\n        this._detach();\n\n        this._portal = this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n        this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this4._detach();\n        });\n\n        this._setTooltipClass(this._tooltipClass);\n\n        this._updateTooltipMessage();\n\n        this._tooltipInstance.show(delay);\n      }\n      /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hideDelay;\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance.hide(delay);\n        }\n      }\n      /** Shows/hides the tooltip */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n      }\n      /** Returns true if the tooltip is currently visible to the user */\n\n    }, {\n      key: \"_isTooltipVisible\",\n      value: function _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n      }\n      /** Create the overlay config and position strategy */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay() {\n        var _this5 = this;\n\n        if (this._overlayRef) {\n          return this._overlayRef;\n        }\n\n        var scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n\n        var strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn(\".\".concat(this._cssClassPrefix, \"-tooltip\")).withFlexibleDimensions(false).withViewportMargin(this._viewportMargin).withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(function (change) {\n          _this5._updateCurrentPositionClass(change.connectionPair);\n\n          if (_this5._tooltipInstance) {\n            if (change.scrollableViewProperties.isOverlayClipped && _this5._tooltipInstance.isVisible()) {\n              // After position changes occur and the overlay is clipped by\n              // a parent scrollable then close the tooltip.\n              _this5._ngZone.run(function () {\n                return _this5.hide(0);\n              });\n            }\n          }\n        });\n        this._overlayRef = this._overlay.create({\n          direction: this._dir,\n          positionStrategy: strategy,\n          panelClass: \"\".concat(this._cssClassPrefix, \"-\").concat(PANEL_CLASS),\n          scrollStrategy: this._scrollStrategy()\n        });\n\n        this._updatePosition(this._overlayRef);\n\n        this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this5._detach();\n        });\n\n        return this._overlayRef;\n      }\n      /** Detaches the currently-attached tooltip. */\n\n    }, {\n      key: \"_detach\",\n      value: function _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this._tooltipInstance = null;\n      }\n      /** Updates the position of the current tooltip. */\n\n    }, {\n      key: \"_updatePosition\",\n      value: function _updatePosition(overlayRef) {\n        var position = overlayRef.getConfig().positionStrategy;\n\n        var origin = this._getOrigin();\n\n        var overlay = this._getOverlayPosition();\n\n        position.withPositions([this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)), this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))]);\n      }\n      /** Adds the configured offset to a position. Used as a hook for child classes. */\n\n    }, {\n      key: \"_addOffset\",\n      value: function _addOffset(position) {\n        return position;\n      }\n      /**\n       * Returns the origin position and a fallback position based on the user's position preference.\n       * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n       */\n\n    }, {\n      key: \"_getOrigin\",\n      value: function _getOrigin() {\n        var isLtr = !this._dir || this._dir.value == 'ltr';\n        var position = this.position;\n        var originPosition;\n\n        if (position == 'above' || position == 'below') {\n          originPosition = {\n            originX: 'center',\n            originY: position == 'above' ? 'top' : 'bottom'\n          };\n        } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n          originPosition = {\n            originX: 'start',\n            originY: 'center'\n          };\n        } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n          originPosition = {\n            originX: 'end',\n            originY: 'center'\n          };\n        } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          throw getMatTooltipInvalidPositionError(position);\n        }\n\n        var _this$_invertPosition = this._invertPosition(originPosition.originX, originPosition.originY),\n            x = _this$_invertPosition.x,\n            y = _this$_invertPosition.y;\n\n        return {\n          main: originPosition,\n          fallback: {\n            originX: x,\n            originY: y\n          }\n        };\n      }\n      /** Returns the overlay position and a fallback position based on the user's preference */\n\n    }, {\n      key: \"_getOverlayPosition\",\n      value: function _getOverlayPosition() {\n        var isLtr = !this._dir || this._dir.value == 'ltr';\n        var position = this.position;\n        var overlayPosition;\n\n        if (position == 'above') {\n          overlayPosition = {\n            overlayX: 'center',\n            overlayY: 'bottom'\n          };\n        } else if (position == 'below') {\n          overlayPosition = {\n            overlayX: 'center',\n            overlayY: 'top'\n          };\n        } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n          overlayPosition = {\n            overlayX: 'end',\n            overlayY: 'center'\n          };\n        } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n          overlayPosition = {\n            overlayX: 'start',\n            overlayY: 'center'\n          };\n        } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          throw getMatTooltipInvalidPositionError(position);\n        }\n\n        var _this$_invertPosition2 = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY),\n            x = _this$_invertPosition2.x,\n            y = _this$_invertPosition2.y;\n\n        return {\n          main: overlayPosition,\n          fallback: {\n            overlayX: x,\n            overlayY: y\n          }\n        };\n      }\n      /** Updates the tooltip message and repositions the overlay according to the new message length */\n\n    }, {\n      key: \"_updateTooltipMessage\",\n      value: function _updateTooltipMessage() {\n        var _this6 = this;\n\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n          this._tooltipInstance.message = this.message;\n\n          this._tooltipInstance._markForCheck();\n\n          this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n            if (_this6._tooltipInstance) {\n              _this6._overlayRef.updatePosition();\n            }\n          });\n        }\n      }\n      /** Updates the tooltip class */\n\n    }, {\n      key: \"_setTooltipClass\",\n      value: function _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n          this._tooltipInstance.tooltipClass = tooltipClass;\n\n          this._tooltipInstance._markForCheck();\n        }\n      }\n      /** Inverts an overlay position. */\n\n    }, {\n      key: \"_invertPosition\",\n      value: function _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n          if (y === 'top') {\n            y = 'bottom';\n          } else if (y === 'bottom') {\n            y = 'top';\n          }\n        } else {\n          if (x === 'end') {\n            x = 'start';\n          } else if (x === 'start') {\n            x = 'end';\n          }\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      }\n      /** Updates the class on the overlay panel based on the current position of the tooltip. */\n\n    }, {\n      key: \"_updateCurrentPositionClass\",\n      value: function _updateCurrentPositionClass(connectionPair) {\n        var overlayY = connectionPair.overlayY,\n            originX = connectionPair.originX,\n            originY = connectionPair.originY;\n        var newPosition; // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n\n        if (overlayY === 'center') {\n          // Note that since this information is used for styling, we want to\n          // resolve `start` and `end` to their real values, otherwise consumers\n          // would have to remember to do it themselves on each consumption.\n          if (this._dir && this._dir.value === 'rtl') {\n            newPosition = originX === 'end' ? 'left' : 'right';\n          } else {\n            newPosition = originX === 'start' ? 'left' : 'right';\n          }\n        } else {\n          newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n\n        if (newPosition !== this._currentPosition) {\n          var overlayRef = this._overlayRef;\n\n          if (overlayRef) {\n            var classPrefix = \"\".concat(this._cssClassPrefix, \"-\").concat(PANEL_CLASS, \"-\");\n            overlayRef.removePanelClass(classPrefix + this._currentPosition);\n            overlayRef.addPanelClass(classPrefix + newPosition);\n          }\n\n          this._currentPosition = newPosition;\n        }\n      }\n      /** Binds the pointer events to the tooltip trigger. */\n\n    }, {\n      key: \"_setupPointerEnterEventsIfNeeded\",\n      value: function _setupPointerEnterEventsIfNeeded() {\n        var _this7 = this;\n\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n          return;\n        } // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n\n        if (this._platformSupportsMouseEvents()) {\n          this._passiveListeners.push(['mouseenter', function () {\n            _this7._setupPointerExitEventsIfNeeded();\n\n            _this7.show();\n          }]);\n        } else if (this.touchGestures !== 'off') {\n          this._disableNativeGesturesIfNecessary();\n\n          this._passiveListeners.push(['touchstart', function () {\n            // Note that it's important that we don't `preventDefault` here,\n            // because it can prevent click events from firing on the element.\n            _this7._setupPointerExitEventsIfNeeded();\n\n            clearTimeout(_this7._touchstartTimeout);\n            _this7._touchstartTimeout = setTimeout(function () {\n              return _this7.show();\n            }, LONGPRESS_DELAY);\n          }]);\n        }\n\n        this._addListeners(this._passiveListeners);\n      }\n    }, {\n      key: \"_setupPointerExitEventsIfNeeded\",\n      value: function _setupPointerExitEventsIfNeeded() {\n        var _this8 = this,\n            _this$_passiveListene;\n\n        if (this._pointerExitEventsInitialized) {\n          return;\n        }\n\n        this._pointerExitEventsInitialized = true;\n        var exitListeners = [];\n\n        if (this._platformSupportsMouseEvents()) {\n          exitListeners.push(['mouseleave', function () {\n            return _this8.hide();\n          }], ['wheel', function (event) {\n            return _this8._wheelListener(event);\n          }]);\n        } else if (this.touchGestures !== 'off') {\n          this._disableNativeGesturesIfNecessary();\n\n          var touchendListener = function touchendListener() {\n            clearTimeout(_this8._touchstartTimeout);\n\n            _this8.hide(_this8._defaultOptions.touchendHideDelay);\n          };\n\n          exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n\n        this._addListeners(exitListeners);\n\n        (_this$_passiveListene = this._passiveListeners).push.apply(_this$_passiveListene, exitListeners);\n      }\n    }, {\n      key: \"_addListeners\",\n      value: function _addListeners(listeners) {\n        var _this9 = this;\n\n        listeners.forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              event = _ref4[0],\n              listener = _ref4[1];\n\n          _this9._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n      }\n    }, {\n      key: \"_platformSupportsMouseEvents\",\n      value: function _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n      }\n      /** Listener for the `wheel` event on the element. */\n\n    }, {\n      key: \"_wheelListener\",\n      value: function _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n          var elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n\n          var element = this._elementRef.nativeElement; // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n          // won't fire if the user scrolls away using the wheel without moving their cursor. We\n          // work around it by finding the element under the user's cursor and closing the tooltip\n          // if it's not the trigger.\n\n          if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n            this.hide();\n          }\n        }\n      }\n      /** Disables the native browser gestures, based on how the tooltip has been configured. */\n\n    }, {\n      key: \"_disableNativeGesturesIfNecessary\",\n      value: function _disableNativeGesturesIfNecessary() {\n        var gestures = this.touchGestures;\n\n        if (gestures !== 'off') {\n          var element = this._elementRef.nativeElement;\n          var _style = element.style; // If gestures are set to `auto`, we don't disable text selection on inputs and\n          // textareas, because it prevents the user from typing into them on iOS Safari.\n\n          if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n            _style.userSelect = _style.msUserSelect = _style.webkitUserSelect = _style.MozUserSelect = 'none';\n          } // If we have `auto` gestures and the element uses native HTML dragging,\n          // we don't set `-webkit-user-drag` because it prevents the native behavior.\n\n\n          if (gestures === 'on' || !element.draggable) {\n            _style.webkitUserDrag = 'none';\n          }\n\n          _style.touchAction = 'none';\n          _style.webkitTapHighlightColor = 'transparent';\n        }\n      }\n    }]);\n\n    return _MatTooltipBase;\n  }();\n\n  _MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) {\n    return new (t || _MatTooltipBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  _MatTooltipBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatTooltipBase,\n    inputs: {\n      showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n      hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n      touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n      position: [\"matTooltipPosition\", \"position\"],\n      disabled: [\"matTooltipDisabled\", \"disabled\"],\n      message: [\"matTooltip\", \"message\"],\n      tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n    }\n  });\n  return _MatTooltipBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nvar MatTooltip = /*#__PURE__*/(function () {\n  var MatTooltip = /*#__PURE__*/function (_MatTooltipBase2) {\n    _inherits(MatTooltip, _MatTooltipBase2);\n\n    var _super = _createSuper(MatTooltip);\n\n    function MatTooltip(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n      var _this10;\n\n      _classCallCheck(this, MatTooltip);\n\n      _this10 = _super.call(this, overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n      _this10._tooltipComponent = TooltipComponent;\n      return _this10;\n    }\n\n    return _createClass(MatTooltip);\n  }(_MatTooltipBase);\n\n  MatTooltip.ɵfac = function MatTooltip_Factory(t) {\n    return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  MatTooltip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTooltip,\n    selectors: [[\"\", \"matTooltip\", \"\"]],\n    hostAttrs: [1, \"mat-tooltip-trigger\"],\n    exportAs: [\"matTooltip\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTooltip;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar _TooltipComponentBase = /*#__PURE__*/(function () {\n  var _TooltipComponentBase = /*#__PURE__*/function () {\n    function _TooltipComponentBase(_changeDetectorRef) {\n      _classCallCheck(this, _TooltipComponentBase);\n\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Property watched by the animation framework to show or hide the tooltip */\n\n      this._visibility = 'initial';\n      /** Whether interactions on the page should close the tooltip */\n\n      this._closeOnInteraction = false;\n      /** Subject for notifying that the tooltip has been hidden from the view */\n\n      this._onHide = new Subject();\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n\n\n    _createClass(_TooltipComponentBase, [{\n      key: \"show\",\n      value: function show(delay) {\n        var _this11 = this;\n\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId); // Body interactions should cancel the tooltip if there is a delay in showing.\n\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(function () {\n          _this11._visibility = 'visible';\n          _this11._showTimeoutId = undefined;\n\n          _this11._onShow(); // Mark for check so if any parent component has set the\n          // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n\n          _this11._markForCheck();\n        }, delay);\n      }\n      /**\n       * Begins the animation to hide the tooltip after the provided delay in ms.\n       * @param delay Amount of milliseconds to delay showing the tooltip.\n       */\n\n    }, {\n      key: \"hide\",\n      value: function hide(delay) {\n        var _this12 = this;\n\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(function () {\n          _this12._visibility = 'hidden';\n          _this12._hideTimeoutId = undefined; // Mark for check so if any parent component has set the\n          // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n          _this12._markForCheck();\n        }, delay);\n      }\n      /** Returns an observable that notifies when the tooltip has been hidden from view. */\n\n    }, {\n      key: \"afterHidden\",\n      value: function afterHidden() {\n        return this._onHide;\n      }\n      /** Whether the tooltip is being displayed. */\n\n    }, {\n      key: \"isVisible\",\n      value: function isVisible() {\n        return this._visibility === 'visible';\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n\n        this._onHide.complete();\n      }\n    }, {\n      key: \"_animationStart\",\n      value: function _animationStart() {\n        this._closeOnInteraction = false;\n      }\n    }, {\n      key: \"_animationDone\",\n      value: function _animationDone(event) {\n        var toState = event.toState;\n\n        if (toState === 'hidden' && !this.isVisible()) {\n          this._onHide.next();\n        }\n\n        if (toState === 'visible' || toState === 'hidden') {\n          this._closeOnInteraction = true;\n        }\n      }\n      /**\n       * Interactions on the HTML body should close the tooltip immediately as defined in the\n       * material design spec.\n       * https://material.io/design/components/tooltips.html#behavior\n       */\n\n    }, {\n      key: \"_handleBodyInteraction\",\n      value: function _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n          this.hide(0);\n        }\n      }\n      /**\n       * Marks that the tooltip needs to be checked in the next change detection run.\n       * Mainly used for rendering the initial text before positioning a tooltip, which\n       * can be problematic in components with OnPush change detection.\n       */\n\n    }, {\n      key: \"_markForCheck\",\n      value: function _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * Callback for when the timeout in this.show() gets completed.\n       * This method is only needed by the mdc-tooltip, and so it is only implemented\n       * in the mdc-tooltip, not here.\n       */\n\n    }, {\n      key: \"_onShow\",\n      value: function _onShow() {}\n    }]);\n\n    return _TooltipComponentBase;\n  }();\n\n  _TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) {\n    return new (t || _TooltipComponentBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  _TooltipComponentBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _TooltipComponentBase\n  });\n  return _TooltipComponentBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n\n\nvar TooltipComponent = /*#__PURE__*/(function () {\n  var TooltipComponent = /*#__PURE__*/function (_TooltipComponentBase2) {\n    _inherits(TooltipComponent, _TooltipComponentBase2);\n\n    var _super2 = _createSuper(TooltipComponent);\n\n    function TooltipComponent(changeDetectorRef, _breakpointObserver) {\n      var _this13;\n\n      _classCallCheck(this, TooltipComponent);\n\n      _this13 = _super2.call(this, changeDetectorRef);\n      _this13._breakpointObserver = _breakpointObserver;\n      /** Stream that emits whether the user has a handset-sized display.  */\n\n      _this13._isHandset = _this13._breakpointObserver.observe(Breakpoints.Handset);\n      return _this13;\n    }\n\n    return _createClass(TooltipComponent);\n  }(_TooltipComponentBase);\n\n  TooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n    return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n  };\n\n  TooltipComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TooltipComponent,\n    selectors: [[\"mat-tooltip-component\"]],\n    hostAttrs: [\"aria-hidden\", \"true\"],\n    hostVars: 2,\n    hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n          return ctx._handleBodyInteraction();\n        }, false, ɵngcc0.ɵɵresolveBody)(\"auxclick\", function TooltipComponent_auxclick_HostBindingHandler() {\n          return ctx._handleBodyInteraction();\n        }, false, ɵngcc0.ɵɵresolveBody);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 7,\n    consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n    template: function TooltipComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n          return ctx._animationStart();\n        })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n          return ctx._animationDone($event);\n        });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        var tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    directives: [ɵngcc7.NgClass],\n    pipes: [ɵngcc7.AsyncPipe],\n    styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matTooltipAnimations.tooltipState]\n    },\n    changeDetection: 0\n  });\n  return TooltipComponent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatTooltipModule = /*#__PURE__*/(function () {\n  var MatTooltipModule = /*#__PURE__*/_createClass(function MatTooltipModule() {\n    _classCallCheck(this, MatTooltipModule);\n  });\n\n  MatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n    return new (t || MatTooltipModule)();\n  };\n\n  MatTooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatTooltipModule\n  });\n  MatTooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule]\n  });\n  return MatTooltipModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function declarations() {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function imports() {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":{"version":3,"names":["Overlay","OverlayModule","AriaDescriber","FocusMonitor","A11yModule","DOCUMENT","CommonModule","InjectionToken","Directive","ElementRef","ViewContainerRef","NgZone","Inject","Input","Optional","ChangeDetectorRef","Component","ViewEncapsulation","ChangeDetectionStrategy","NgModule","MatCommonModule","ScrollDispatcher","CdkScrollableModule","Directionality","coerceBooleanProperty","ESCAPE","hasModifierKey","Breakpoints","BreakpointObserver","normalizePassiveListenerOptions","Platform","ComponentPortal","Subject","takeUntil","take","trigger","state","style","transition","animate","keyframes","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","matTooltipAnimations","tooltipState","opacity","transform","offset","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","PANEL_CLASS","passiveListenerOptions","passive","LONGPRESS_DELAY","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","_MatTooltipBase","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","touchGestures","_message","_passiveListeners","_destroyed","_handleKeydown","event","_isTooltipVisible","keyCode","preventDefault","stopPropagation","run","hide","_scrollStrategy","change","pipe","subscribe","_overlayRef","_updatePosition","runOutsideAngular","nativeElement","addEventListener","value","_a","_tooltipInstance","show","updatePosition","_setupPointerEnterEventsIfNeeded","removeDescription","String","trim","_updateTooltipMessage","Promise","resolve","then","describe","message","_tooltipClass","_setTooltipClass","monitor","origin","clearTimeout","_touchstartTimeout","dispose","removeEventListener","forEach","listener","length","next","complete","stopMonitoring","delay","disabled","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","_tooltipComponent","attach","instance","afterHidden","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","_addOffset","Object","assign","main","fallback","isLtr","originPosition","originX","originY","ngDevMode","_invertPosition","x","y","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","tooltipClass","newPosition","_currentPosition","classPrefix","removePanelClass","addPanelClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","_wheelListener","touchendListener","listeners","IOS","ANDROID","elementUnderPointer","elementFromPoint","clientX","clientY","element","contains","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵfac","_MatTooltipBase_Factory","t","ɵɵdirectiveInject","undefined","ɵdir","ɵɵdefineDirective","type","inputs","MatTooltip","elementRef","scrollDispatcher","viewContainerRef","ngZone","platform","ariaDescriber","focusMonitor","dir","defaultOptions","TooltipComponent","MatTooltip_Factory","selectors","hostAttrs","exportAs","features","ɵɵInheritDefinitionFeature","_TooltipComponentBase","_changeDetectorRef","_visibility","_closeOnInteraction","_onHide","_onShow","toState","markForCheck","_TooltipComponentBase_Factory","changeDetectorRef","_breakpointObserver","_isHandset","observe","Handset","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","TooltipComponent_HostBindings","rf","ctx","ɵɵlistener","TooltipComponent_click_HostBindingHandler","_handleBodyInteraction","ɵɵresolveBody","TooltipComponent_auxclick_HostBindingHandler","ɵɵstyleProp","decls","vars","consts","template","TooltipComponent_Template","ɵɵelementStart","TooltipComponent_Template_div_animation_state_start_0_listener","_animationStart","TooltipComponent_Template_div_animation_state_done_0_listener","$event","_animationDone","ɵɵpipe","ɵɵtext","ɵɵelementEnd","tmp_0_0","ɵɵclassProp","ɵɵpipeBind1","matches","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","directives","NgClass","pipes","AsyncPipe","styles","encapsulation","data","animation","changeDetection","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/tooltip.js"],"sourcesContent":["import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Input, Optional, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        /** The default delay in ms before showing the tooltip after show is called */\n        this.showDelay = this._defaultOptions.showDelay;\n        /** The default delay in ms before hiding the tooltip after hide is called */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Handles the keydown events on the host element.\n         * Needs to be an arrow function so that we can use it in addEventListener.\n         */\n        this._handleKeydown = (event) => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        };\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n        _ngZone.runOutsideAngular(() => {\n            _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() { return this._position; }\n    set position(value) {\n        var _a;\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() { return this._message; }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() { return this._tooltipClass; }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor.monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal ||\n            new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)),\n            this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled || !this.message || !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners\n                .push(['mouseenter', () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                }]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners\n                .push(['touchstart', () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                }]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                    style.MozUserSelect = 'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) { return new (t || _MatTooltipBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\n_MatTooltipBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatTooltipBase, inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] } });\n_MatTooltipBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined },\n    { type: Directionality },\n    { type: undefined },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n_MatTooltipBase.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatTooltipBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined }, { type: ɵngcc5.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], touchGestures: [{\n            type: Input,\n            args: ['matTooltipTouchGestures']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatTooltip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostAttrs: [1, \"mat-tooltip-trigger\"], exportAs: [\"matTooltip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    'class': 'mat-tooltip-trigger'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            this._showTimeoutId = undefined;\n            this._onShow();\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = undefined;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    ngOnDestroy() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._onHide.complete();\n    }\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    _animationDone(event) {\n        const toState = event.toState;\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n}\n_TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) { return new (t || _TooltipComponentBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_TooltipComponentBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _TooltipComponentBase });\n_TooltipComponentBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_TooltipComponentBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _breakpointObserver) {\n        super(changeDetectorRef);\n        this._breakpointObserver = _breakpointObserver;\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody)(\"auxclick\", function TooltipComponent_auxclick_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        let tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, directives: [ɵngcc7.NgClass], pipes: [ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTooltipAnimations.tooltipState],\n                host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    '(body:auxclick)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true'\n                },\n                styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); };\nMatTooltipModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            A11yModule,\n            CommonModule,\n            OverlayModule,\n            MatCommonModule,\n        ], MatCommonModule, CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}