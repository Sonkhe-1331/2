{"ast":null,"code":"import _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nvar nextId = 0; // Boilerplate for applying mixins to MatBadge.\n\n/** @docs-private */\n\nvar _MatBadgeBase = /*#__PURE__*/mixinDisabled( /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  return _createClass(_class);\n}());\n/** Directive to display a text badge. */\n\n\nvar MatBadge = /*#__PURE__*/(function () {\n  var MatBadge = /*#__PURE__*/function (_MatBadgeBase2) {\n    _inherits(MatBadge, _MatBadgeBase2);\n\n    var _super = _createSuper(MatBadge);\n\n    function MatBadge(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n      var _this;\n\n      _classCallCheck(this, MatBadge);\n\n      _this = _super.call(this);\n      _this._ngZone = _ngZone;\n      _this._elementRef = _elementRef;\n      _this._ariaDescriber = _ariaDescriber;\n      _this._renderer = _renderer;\n      _this._animationMode = _animationMode;\n      /** Whether the badge has any content. */\n\n      _this._hasContent = false;\n      _this._color = 'primary';\n      _this._overlap = true;\n      /**\n       * Position the badge should reside.\n       * Accepts any combination of 'above'|'below' and 'before'|'after'\n       */\n\n      _this.position = 'above after';\n      /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n\n      _this.size = 'medium';\n      /** Unique id for the badge */\n\n      _this._id = nextId++;\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        var nativeElement = _elementRef.nativeElement;\n\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n\n      return _this;\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n\n\n    _createClass(MatBadge, [{\n      key: \"color\",\n      get: function get() {\n        return this._color;\n      },\n      set: function set(value) {\n        this._setColor(value);\n\n        this._color = value;\n      }\n      /** Whether the badge should overlap its contents or not */\n\n    }, {\n      key: \"overlap\",\n      get: function get() {\n        return this._overlap;\n      },\n      set: function set(val) {\n        this._overlap = coerceBooleanProperty(val);\n      }\n      /** Message used to describe the decorated element via aria-describedby */\n\n    }, {\n      key: \"description\",\n      get: function get() {\n        return this._description;\n      },\n      set: function set(newDescription) {\n        if (newDescription !== this._description) {\n          var badgeElement = this._badgeElement;\n\n          this._updateHostAriaDescription(newDescription, this._description);\n\n          this._description = newDescription;\n\n          if (badgeElement) {\n            newDescription ? badgeElement.setAttribute('aria-label', newDescription) : badgeElement.removeAttribute('aria-label');\n          }\n        }\n      }\n      /** Whether the badge is hidden. */\n\n    }, {\n      key: \"hidden\",\n      get: function get() {\n        return this._hidden;\n      },\n      set: function set(val) {\n        this._hidden = coerceBooleanProperty(val);\n      }\n      /** Whether the badge is above the host or not */\n\n    }, {\n      key: \"isAbove\",\n      value: function isAbove() {\n        return this.position.indexOf('below') === -1;\n      }\n      /** Whether the badge is after the host or not */\n\n    }, {\n      key: \"isAfter\",\n      value: function isAfter() {\n        return this.position.indexOf('before') === -1;\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var contentChange = changes['content'];\n\n        if (contentChange) {\n          var value = contentChange.currentValue;\n          this._hasContent = value != null && \"\".concat(value).trim().length > 0;\n\n          this._updateTextContent();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var badgeElement = this._badgeElement;\n\n        if (badgeElement) {\n          if (this.description) {\n            this._ariaDescriber.removeDescription(badgeElement, this.description);\n          } // When creating a badge through the Renderer, Angular will keep it in an index.\n          // We have to destroy it ourselves, otherwise it'll be retained in memory.\n\n\n          if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(badgeElement);\n          }\n        }\n      }\n      /**\n       * Gets the element into which the badge's content is being rendered.\n       * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n       */\n\n    }, {\n      key: \"getBadgeElement\",\n      value: function getBadgeElement() {\n        return this._badgeElement;\n      }\n      /** Injects a span element into the DOM with the content. */\n\n    }, {\n      key: \"_updateTextContent\",\n      value: function _updateTextContent() {\n        if (!this._badgeElement) {\n          this._badgeElement = this._createBadgeElement();\n        } else {\n          this._badgeElement.textContent = this._stringifyContent();\n        }\n\n        return this._badgeElement;\n      }\n      /** Creates the badge element */\n\n    }, {\n      key: \"_createBadgeElement\",\n      value: function _createBadgeElement() {\n        var badgeElement = this._renderer.createElement('span');\n\n        var activeClass = 'mat-badge-active';\n        var contentClass = 'mat-badge-content'; // Clear any existing badges which may have persisted from a server-side render.\n\n        this._clearExistingBadges(contentClass);\n\n        badgeElement.setAttribute('id', \"mat-badge-content-\".concat(this._id));\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this._stringifyContent();\n\n        if (this._animationMode === 'NoopAnimations') {\n          badgeElement.classList.add('_mat-animation-noopable');\n        }\n\n        if (this.description) {\n          badgeElement.setAttribute('aria-label', this.description);\n        }\n\n        this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n          this._ngZone.runOutsideAngular(function () {\n            requestAnimationFrame(function () {\n              badgeElement.classList.add(activeClass);\n            });\n          });\n        } else {\n          badgeElement.classList.add(activeClass);\n        }\n\n        return badgeElement;\n      }\n      /** Sets the aria-label property on the element */\n\n    }, {\n      key: \"_updateHostAriaDescription\",\n      value: function _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        var content = this._updateTextContent();\n\n        if (oldDescription) {\n          this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n\n        if (newDescription) {\n          this._ariaDescriber.describe(content, newDescription);\n        }\n      }\n      /** Adds css theme class given the color to the component host */\n\n    }, {\n      key: \"_setColor\",\n      value: function _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n          var classList = this._elementRef.nativeElement.classList;\n\n          if (this._color) {\n            classList.remove(\"mat-badge-\".concat(this._color));\n          }\n\n          if (colorPalette) {\n            classList.add(\"mat-badge-\".concat(colorPalette));\n          }\n        }\n      }\n      /** Clears any existing badges that might be left over from server-side rendering. */\n\n    }, {\n      key: \"_clearExistingBadges\",\n      value: function _clearExistingBadges(cssClass) {\n        var element = this._elementRef.nativeElement;\n        var childCount = element.children.length; // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n\n        while (childCount--) {\n          var currentChild = element.children[childCount];\n\n          if (currentChild.classList.contains(cssClass)) {\n            element.removeChild(currentChild);\n          }\n        }\n      }\n      /** Gets the string representation of the badge content. */\n\n    }, {\n      key: \"_stringifyContent\",\n      value: function _stringifyContent() {\n        // Convert null and undefined to an empty string which is consistent\n        // with how Angular handles them in inside template interpolations.\n        var content = this.content;\n        return content == null ? '' : \"\".concat(content);\n      }\n    }]);\n\n    return MatBadge;\n  }(_MatBadgeBase);\n\n  MatBadge.ɵfac = function MatBadge_Factory(t) {\n    return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatBadge.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatBadge,\n    selectors: [[\"\", \"matBadge\", \"\"]],\n    hostAttrs: [1, \"mat-badge\"],\n    hostVars: 20,\n    hostBindings: function MatBadge_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      disabled: [\"matBadgeDisabled\", \"disabled\"],\n      position: [\"matBadgePosition\", \"position\"],\n      size: [\"matBadgeSize\", \"size\"],\n      color: [\"matBadgeColor\", \"color\"],\n      overlap: [\"matBadgeOverlap\", \"overlap\"],\n      description: [\"matBadgeDescription\", \"description\"],\n      hidden: [\"matBadgeHidden\", \"hidden\"],\n      content: [\"matBadge\", \"content\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatBadge;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatBadgeModule = /*#__PURE__*/(function () {\n  var MatBadgeModule = /*#__PURE__*/_createClass(function MatBadgeModule() {\n    _classCallCheck(this, MatBadgeModule);\n  });\n\n  MatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n    return new (t || MatBadgeModule)();\n  };\n\n  MatBadgeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatBadgeModule\n  });\n  MatBadgeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[A11yModule, MatCommonModule], MatCommonModule]\n  });\n  return MatBadgeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, {\n    declarations: function declarations() {\n      return [MatBadge];\n    },\n    imports: function imports() {\n      return [A11yModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatBadge, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatBadge, MatBadgeModule };","map":{"version":3,"names":["Directive","NgZone","ElementRef","Renderer2","Optional","Inject","Input","NgModule","mixinDisabled","MatCommonModule","AriaDescriber","A11yModule","coerceBooleanProperty","ANIMATION_MODULE_TYPE","ɵngcc0","ɵngcc1","nextId","_MatBadgeBase","MatBadge","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_hasContent","_color","_overlap","position","size","_id","ngDevMode","nativeElement","nodeType","ELEMENT_NODE","Error","value","_setColor","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","setAttribute","removeAttribute","_hidden","indexOf","changes","contentChange","currentValue","trim","length","_updateTextContent","description","removeDescription","destroyNode","_createBadgeElement","textContent","_stringifyContent","createElement","activeClass","contentClass","_clearExistingBadges","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","content","describe","colorPalette","remove","cssClass","element","childCount","children","currentChild","contains","removeChild","ɵfac","MatBadge_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatBadge_HostBindings","rf","ctx","ɵɵclassProp","overlap","isAbove","isAfter","hidden","disabled","inputs","color","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","MatBadgeModule","MatBadgeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/badge.js"],"sourcesContent":["import { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /** Whether the badge has any content. */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() { return this._color; }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() { return this._overlap; }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() { return this._description; }\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /** Whether the badge is hidden. */\n    get hidden() { return this._hidden; }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    ngOnChanges(changes) {\n        const contentChange = changes['content'];\n        if (contentChange) {\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    ngOnDestroy() {\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /** Injects a span element into the DOM with the content. */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this._stringifyContent();\n        }\n        return this._badgeElement;\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this._stringifyContent();\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Sets the aria-label property on the element */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            const classList = this._elementRef.nativeElement.classList;\n            if (this._color) {\n                classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges(cssClass) {\n        const element = this._elementRef.nativeElement;\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n    /** Gets the string representation of the badge content. */\n    _stringifyContent() {\n        // Convert null and undefined to an empty string which is consistent\n        // with how Angular handles them in inside template interpolations.\n        const content = this.content;\n        return content == null ? '' : `${content}`;\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"], content: [\"matBadge\", \"content\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); };\nMatBadgeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            A11yModule,\n            MatCommonModule\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge, MatCommonModule],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,EAA6DC,MAA7D,EAAqEC,KAArE,EAA4EC,QAA5E,QAA4F,eAA5F;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,wBAA/C;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,mBAA1C;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,IAAIC,MAAM,GAAG,CAAb,C,CACA;;AACA;;AACA,IAAMC,aAAa,gBAAGT,aAAa;EAAA;IAAA;EAAA;;EAAA;AAAA,IAAnC;AAEA;;;IACMU,Q;MAAAA,Q;;;;;IACF,kBAAYC,OAAZ,EAAqBC,WAArB,EAAkCC,cAAlC,EAAkDC,SAAlD,EAA6DC,cAA7D,EAA6E;MAAA;;MAAA;;MACzE;MACA,MAAKJ,OAAL,GAAeA,OAAf;MACA,MAAKC,WAAL,GAAmBA,WAAnB;MACA,MAAKC,cAAL,GAAsBA,cAAtB;MACA,MAAKC,SAAL,GAAiBA,SAAjB;MACA,MAAKC,cAAL,GAAsBA,cAAtB;MACA;;MACA,MAAKC,WAAL,GAAmB,KAAnB;MACA,MAAKC,MAAL,GAAc,SAAd;MACA,MAAKC,QAAL,GAAgB,IAAhB;MACA;AACR;AACA;AACA;;MACQ,MAAKC,QAAL,GAAgB,aAAhB;MACA;;MACA,MAAKC,IAAL,GAAY,QAAZ;MACA;;MACA,MAAKC,GAAL,GAAWb,MAAM,EAAjB;;MACA,IAAI,OAAOc,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;QAC/C,IAAMC,aAAa,GAAGX,WAAW,CAACW,aAAlC;;QACA,IAAIA,aAAa,CAACC,QAAd,KAA2BD,aAAa,CAACE,YAA7C,EAA2D;UACvD,MAAMC,KAAK,CAAC,+CAAD,CAAX;QACH;MACJ;;MAzBwE;IA0B5E;IACD;;;;;WACA,eAAY;QAAE,OAAO,KAAKT,MAAZ;MAAqB,C;WACnC,aAAUU,KAAV,EAAiB;QACb,KAAKC,SAAL,CAAeD,KAAf;;QACA,KAAKV,MAAL,GAAcU,KAAd;MACH;MACD;;;;WACA,eAAc;QAAE,OAAO,KAAKT,QAAZ;MAAuB,C;WACvC,aAAYW,GAAZ,EAAiB;QACb,KAAKX,QAAL,GAAgBd,qBAAqB,CAACyB,GAAD,CAArC;MACH;MACD;;;;WACA,eAAkB;QAAE,OAAO,KAAKC,YAAZ;MAA2B,C;WAC/C,aAAgBC,cAAhB,EAAgC;QAC5B,IAAIA,cAAc,KAAK,KAAKD,YAA5B,EAA0C;UACtC,IAAME,YAAY,GAAG,KAAKC,aAA1B;;UACA,KAAKC,0BAAL,CAAgCH,cAAhC,EAAgD,KAAKD,YAArD;;UACA,KAAKA,YAAL,GAAoBC,cAApB;;UACA,IAAIC,YAAJ,EAAkB;YACdD,cAAc,GAAGC,YAAY,CAACG,YAAb,CAA0B,YAA1B,EAAwCJ,cAAxC,CAAH,GACVC,YAAY,CAACI,eAAb,CAA6B,YAA7B,CADJ;UAEH;QACJ;MACJ;MACD;;;;WACA,eAAa;QAAE,OAAO,KAAKC,OAAZ;MAAsB,C;WACrC,aAAWR,GAAX,EAAgB;QACZ,KAAKQ,OAAL,GAAejC,qBAAqB,CAACyB,GAAD,CAApC;MACH;MACD;;;;aACA,mBAAU;QACN,OAAO,KAAKV,QAAL,CAAcmB,OAAd,CAAsB,OAAtB,MAAmC,CAAC,CAA3C;MACH;MACD;;;;aACA,mBAAU;QACN,OAAO,KAAKnB,QAAL,CAAcmB,OAAd,CAAsB,QAAtB,MAAoC,CAAC,CAA5C;MACH;;;aACD,qBAAYC,OAAZ,EAAqB;QACjB,IAAMC,aAAa,GAAGD,OAAO,CAAC,SAAD,CAA7B;;QACA,IAAIC,aAAJ,EAAmB;UACf,IAAMb,KAAK,GAAGa,aAAa,CAACC,YAA5B;UACA,KAAKzB,WAAL,GAAmBW,KAAK,IAAI,IAAT,IAAiB,UAAGA,KAAH,EAAWe,IAAX,GAAkBC,MAAlB,GAA2B,CAA/D;;UACA,KAAKC,kBAAL;QACH;MACJ;;;aACD,uBAAc;QACV,IAAMZ,YAAY,GAAG,KAAKC,aAA1B;;QACA,IAAID,YAAJ,EAAkB;UACd,IAAI,KAAKa,WAAT,EAAsB;YAClB,KAAKhC,cAAL,CAAoBiC,iBAApB,CAAsCd,YAAtC,EAAoD,KAAKa,WAAzD;UACH,CAHa,CAId;UACA;;;UACA,IAAI,KAAK/B,SAAL,CAAeiC,WAAnB,EAAgC;YAC5B,KAAKjC,SAAL,CAAeiC,WAAf,CAA2Bf,YAA3B;UACH;QACJ;MACJ;MACD;AACJ;AACA;AACA;;;;aACI,2BAAkB;QACd,OAAO,KAAKC,aAAZ;MACH;MACD;;;;aACA,8BAAqB;QACjB,IAAI,CAAC,KAAKA,aAAV,EAAyB;UACrB,KAAKA,aAAL,GAAqB,KAAKe,mBAAL,EAArB;QACH,CAFD,MAGK;UACD,KAAKf,aAAL,CAAmBgB,WAAnB,GAAiC,KAAKC,iBAAL,EAAjC;QACH;;QACD,OAAO,KAAKjB,aAAZ;MACH;MACD;;;;aACA,+BAAsB;QAClB,IAAMD,YAAY,GAAG,KAAKlB,SAAL,CAAeqC,aAAf,CAA6B,MAA7B,CAArB;;QACA,IAAMC,WAAW,GAAG,kBAApB;QACA,IAAMC,YAAY,GAAG,mBAArB,CAHkB,CAIlB;;QACA,KAAKC,oBAAL,CAA0BD,YAA1B;;QACArB,YAAY,CAACG,YAAb,CAA0B,IAA1B,8BAAqD,KAAKd,GAA1D;QACAW,YAAY,CAACuB,SAAb,CAAuBC,GAAvB,CAA2BH,YAA3B;QACArB,YAAY,CAACiB,WAAb,GAA2B,KAAKC,iBAAL,EAA3B;;QACA,IAAI,KAAKnC,cAAL,KAAwB,gBAA5B,EAA8C;UAC1CiB,YAAY,CAACuB,SAAb,CAAuBC,GAAvB,CAA2B,yBAA3B;QACH;;QACD,IAAI,KAAKX,WAAT,EAAsB;UAClBb,YAAY,CAACG,YAAb,CAA0B,YAA1B,EAAwC,KAAKU,WAA7C;QACH;;QACD,KAAKjC,WAAL,CAAiBW,aAAjB,CAA+BkC,WAA/B,CAA2CzB,YAA3C,EAfkB,CAgBlB;;;QACA,IAAI,OAAO0B,qBAAP,KAAiC,UAAjC,IAA+C,KAAK3C,cAAL,KAAwB,gBAA3E,EAA6F;UACzF,KAAKJ,OAAL,CAAagD,iBAAb,CAA+B,YAAM;YACjCD,qBAAqB,CAAC,YAAM;cACxB1B,YAAY,CAACuB,SAAb,CAAuBC,GAAvB,CAA2BJ,WAA3B;YACH,CAFoB,CAArB;UAGH,CAJD;QAKH,CAND,MAOK;UACDpB,YAAY,CAACuB,SAAb,CAAuBC,GAAvB,CAA2BJ,WAA3B;QACH;;QACD,OAAOpB,YAAP;MACH;MACD;;;;aACA,oCAA2BD,cAA3B,EAA2C6B,cAA3C,EAA2D;QACvD;QACA,IAAMC,OAAO,GAAG,KAAKjB,kBAAL,EAAhB;;QACA,IAAIgB,cAAJ,EAAoB;UAChB,KAAK/C,cAAL,CAAoBiC,iBAApB,CAAsCe,OAAtC,EAA+CD,cAA/C;QACH;;QACD,IAAI7B,cAAJ,EAAoB;UAChB,KAAKlB,cAAL,CAAoBiD,QAApB,CAA6BD,OAA7B,EAAsC9B,cAAtC;QACH;MACJ;MACD;;;;aACA,mBAAUgC,YAAV,EAAwB;QACpB,IAAIA,YAAY,KAAK,KAAK9C,MAA1B,EAAkC;UAC9B,IAAMsC,SAAS,GAAG,KAAK3C,WAAL,CAAiBW,aAAjB,CAA+BgC,SAAjD;;UACA,IAAI,KAAKtC,MAAT,EAAiB;YACbsC,SAAS,CAACS,MAAV,qBAA8B,KAAK/C,MAAnC;UACH;;UACD,IAAI8C,YAAJ,EAAkB;YACdR,SAAS,CAACC,GAAV,qBAA2BO,YAA3B;UACH;QACJ;MACJ;MACD;;;;aACA,8BAAqBE,QAArB,EAA+B;QAC3B,IAAMC,OAAO,GAAG,KAAKtD,WAAL,CAAiBW,aAAjC;QACA,IAAI4C,UAAU,GAAGD,OAAO,CAACE,QAAR,CAAiBzB,MAAlC,CAF2B,CAG3B;;QACA,OAAOwB,UAAU,EAAjB,EAAqB;UACjB,IAAME,YAAY,GAAGH,OAAO,CAACE,QAAR,CAAiBD,UAAjB,CAArB;;UACA,IAAIE,YAAY,CAACd,SAAb,CAAuBe,QAAvB,CAAgCL,QAAhC,CAAJ,EAA+C;YAC3CC,OAAO,CAACK,WAAR,CAAoBF,YAApB;UACH;QACJ;MACJ;MACD;;;;aACA,6BAAoB;QAChB;QACA;QACA,IAAMR,OAAO,GAAG,KAAKA,OAArB;QACA,OAAOA,OAAO,IAAI,IAAX,GAAkB,EAAlB,aAA0BA,OAA1B,CAAP;MACH;;;;IA9KkBpD,a;;EAgLvBC,QAAQ,CAAC8D,IAAT,GAAgB,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;IAAE,OAAO,KAAKA,CAAC,IAAIhE,QAAV,EAAoBJ,MAAM,CAACqE,iBAAP,CAAyBrE,MAAM,CAACb,MAAhC,CAApB,EAA6Da,MAAM,CAACqE,iBAAP,CAAyBrE,MAAM,CAACZ,UAAhC,CAA7D,EAA0GY,MAAM,CAACqE,iBAAP,CAAyBpE,MAAM,CAACL,aAAhC,CAA1G,EAA0JI,MAAM,CAACqE,iBAAP,CAAyBrE,MAAM,CAACX,SAAhC,CAA1J,EAAsMW,MAAM,CAACqE,iBAAP,CAAyBtE,qBAAzB,EAAgD,CAAhD,CAAtM,CAAP;EAAmQ,CAAlT;;EACAK,QAAQ,CAACkE,IAAT,GAAgB,aAActE,MAAM,CAACuE,iBAAP,CAAyB;IAAEC,IAAI,EAAEpE,QAAR;IAAkBqE,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,UAAL,EAAiB,EAAjB,CAAD,CAA7B;IAAqDC,SAAS,EAAE,CAAC,CAAD,EAAI,WAAJ,CAAhE;IAAkFC,QAAQ,EAAE,EAA5F;IAAgGC,YAAY,EAAE,SAASC,qBAAT,CAA+BC,EAA/B,EAAmCC,GAAnC,EAAwC;MAAE,IAAID,EAAE,GAAG,CAAT,EAAY;QACnN9E,MAAM,CAACgF,WAAP,CAAmB,mBAAnB,EAAwCD,GAAG,CAACE,OAA5C,EAAqD,iBAArD,EAAwEF,GAAG,CAACG,OAAJ,EAAxE,EAAuF,iBAAvF,EAA0G,CAACH,GAAG,CAACG,OAAJ,EAA3G,EAA0H,kBAA1H,EAA8I,CAACH,GAAG,CAACI,OAAJ,EAA/I,EAA8J,iBAA9J,EAAiLJ,GAAG,CAACI,OAAJ,EAAjL,EAAgM,iBAAhM,EAAmNJ,GAAG,CAACjE,IAAJ,KAAa,OAAhO,EAAyO,kBAAzO,EAA6PiE,GAAG,CAACjE,IAAJ,KAAa,QAA1Q,EAAoR,iBAApR,EAAuSiE,GAAG,CAACjE,IAAJ,KAAa,OAApT,EAA6T,kBAA7T,EAAiViE,GAAG,CAACK,MAAJ,IAAc,CAACL,GAAG,CAACrE,WAApW,EAAiX,oBAAjX,EAAuYqE,GAAG,CAACM,QAA3Y;MACH;IAAE,CAFgD;IAE9CC,MAAM,EAAE;MAAED,QAAQ,EAAE,CAAC,kBAAD,EAAqB,UAArB,CAAZ;MAA8CxE,QAAQ,EAAE,CAAC,kBAAD,EAAqB,UAArB,CAAxD;MAA0FC,IAAI,EAAE,CAAC,cAAD,EAAiB,MAAjB,CAAhG;MAA0HyE,KAAK,EAAE,CAAC,eAAD,EAAkB,OAAlB,CAAjI;MAA6JN,OAAO,EAAE,CAAC,iBAAD,EAAoB,SAApB,CAAtK;MAAsM1C,WAAW,EAAE,CAAC,qBAAD,EAAwB,aAAxB,CAAnN;MAA2P6C,MAAM,EAAE,CAAC,gBAAD,EAAmB,QAAnB,CAAnQ;MAAiS7B,OAAO,EAAE,CAAC,UAAD,EAAa,SAAb;IAA1S,CAFsC;IAE+RiC,QAAQ,EAAE,CAACxF,MAAM,CAACyF,0BAAR,EAAoCzF,MAAM,CAAC0F,oBAA3C;EAFzS,CAAzB,CAA9B;SAjLMtF,Q;;;AAoMN;AAAA,CAAC,YAAY;EAAE,CAAC,OAAOY,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AA6CC,CA7ChB;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACM2E,c;MAAAA,c;;;;EAENA,cAAc,CAACzB,IAAf,GAAsB,SAAS0B,sBAAT,CAAgCxB,CAAhC,EAAmC;IAAE,OAAO,KAAKA,CAAC,IAAIuB,cAAV,GAAP;EAAqC,CAAhG;;EACAA,cAAc,CAACE,IAAf,GAAsB,aAAc7F,MAAM,CAAC8F,gBAAP,CAAwB;IAAEtB,IAAI,EAAEmB;EAAR,CAAxB,CAApC;EACAA,cAAc,CAACI,IAAf,GAAsB,aAAc/F,MAAM,CAACgG,gBAAP,CAAwB;IAAEC,OAAO,EAAE,CAAC,CAC5DpG,UAD4D,EAE5DF,eAF4D,CAAD,EAG5DA,eAH4D;EAAX,CAAxB,CAApC;SAJMgG,c;;;AAQN;AAAA,CAAC,YAAY;EAAE,CAAC,OAAO3E,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAUO,CAVtB;;AAWA;AAAA,CAAC,YAAY;EAAE,CAAC,OAAOkF,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDlG,MAAM,CAACmG,kBAAP,CAA0BR,cAA1B,EAA0C;IAAES,YAAY,EAAE,wBAAY;MAAE,OAAO,CAAChG,QAAD,CAAP;IAAoB,CAAlD;IAAoD6F,OAAO,EAAE,mBAAY;MAAE,OAAO,CAACpG,UAAD,EACtLF,eADsL,CAAP;IAC5J,CADiF;IAC/E0G,OAAO,EAAE,mBAAY;MAAE,OAAO,CAACjG,QAAD,EAAWT,eAAX,CAAP;IAAqC;EADmB,CAA1C,CAAnD;AACgF,CAD/F;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASS,QAAT,EAAmBuF,cAAnB"},"metadata":{},"sourceType":"module"}