{"ast":null,"code":"import _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nvar MatDialogConfig = /*#__PURE__*/_createClass(function MatDialogConfig() {\n  _classCallCheck(this, MatDialogConfig);\n\n  /** The ARIA role of the dialog element. */\n  this.role = 'dialog';\n  /** Custom class for the overlay pane. */\n\n  this.panelClass = '';\n  /** Whether the dialog has a backdrop. */\n\n  this.hasBackdrop = true;\n  /** Custom class for the backdrop. */\n\n  this.backdropClass = '';\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n  this.disableClose = false;\n  /** Width of the dialog. */\n\n  this.width = '';\n  /** Height of the dialog. */\n\n  this.height = '';\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n  this.maxWidth = '80vw';\n  /** Data being injected into the child component. */\n\n  this.data = null;\n  /** ID of the element that describes the dialog. */\n\n  this.ariaDescribedBy = null;\n  /** ID of the element that labels the dialog. */\n\n  this.ariaLabelledBy = null;\n  /** Aria label to assign to the dialog element. */\n\n  this.ariaLabel = null;\n  /** Whether the dialog should focus the first focusable element on open. */\n\n  this.autoFocus = true;\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n\n  this.restoreFocus = true;\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.closeOnNavigation = true; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\n\nvar matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: /*#__PURE__*/trigger('dialogContainer', [\n  /*#__PURE__*/\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), /*#__PURE__*/state('enter', /*#__PURE__*/style({\n    transform: 'none'\n  })), /*#__PURE__*/transition('* => enter', /*#__PURE__*/animate('150ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    transform: 'none',\n    opacity: 1\n  }))), /*#__PURE__*/transition('* => void, * => exit', /*#__PURE__*/animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n\n\nvar _MatDialogContainerBase = /*#__PURE__*/(function () {\n  var _MatDialogContainerBase = /*#__PURE__*/function (_BasePortalOutlet) {\n    _inherits(_MatDialogContainerBase, _BasePortalOutlet);\n\n    var _super = _createSuper(_MatDialogContainerBase);\n\n    function _MatDialogContainerBase(_elementRef, _focusTrapFactory, _changeDetectorRef, _document,\n    /** The dialog configuration. */\n    _config, _focusMonitor) {\n      var _this;\n\n      _classCallCheck(this, _MatDialogContainerBase);\n\n      _this = _super.call(this);\n      _this._elementRef = _elementRef;\n      _this._focusTrapFactory = _focusTrapFactory;\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._config = _config;\n      _this._focusMonitor = _focusMonitor;\n      /** Emits when an animation state changes. */\n\n      _this._animationStateChanged = new EventEmitter();\n      /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n\n      _this._elementFocusedBeforeDialogWasOpened = null;\n      /**\n       * Type of interaction that led to the dialog being closed. This is used to determine\n       * whether the focus style will be applied when returning focus to its original location\n       * after the dialog is closed.\n       */\n\n      _this._closeInteractionType = null;\n      /**\n       * Attaches a DOM portal to the dialog container.\n       * @param portal Portal to be attached.\n       * @deprecated To be turned into a method.\n       * @breaking-change 10.0.0\n       */\n\n      _this.attachDomPortal = function (portal) {\n        if (_this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDialogContentAlreadyAttachedError();\n        }\n\n        return _this._portalOutlet.attachDomPortal(portal);\n      };\n\n      _this._ariaLabelledBy = _config.ariaLabelledBy || null;\n      _this._document = _document;\n      return _this;\n    }\n    /** Initializes the dialog container with the attached content. */\n\n\n    _createClass(_MatDialogContainerBase, [{\n      key: \"_initializeWithAttachedContent\",\n      value: function _initializeWithAttachedContent() {\n        this._setupFocusTrap(); // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n\n\n        this._capturePreviouslyFocusedElement(); // Move focus onto the dialog immediately in order to prevent the user\n        // from accidentally opening multiple dialogs at the same time.\n\n\n        this._focusDialogContainer();\n      }\n      /**\n       * Attach a ComponentPortal as content to this dialog container.\n       * @param portal Portal to be attached as the dialog content.\n       */\n\n    }, {\n      key: \"attachComponentPortal\",\n      value: function attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDialogContentAlreadyAttachedError();\n        }\n\n        return this._portalOutlet.attachComponentPortal(portal);\n      }\n      /**\n       * Attach a TemplatePortal as content to this dialog container.\n       * @param portal Portal to be attached as the dialog content.\n       */\n\n    }, {\n      key: \"attachTemplatePortal\",\n      value: function attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDialogContentAlreadyAttachedError();\n        }\n\n        return this._portalOutlet.attachTemplatePortal(portal);\n      }\n      /** Moves focus back into the dialog if it was moved out. */\n\n    }, {\n      key: \"_recaptureFocus\",\n      value: function _recaptureFocus() {\n        if (!this._containsFocus()) {\n          var focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n\n          if (focusContainer) {\n            this._elementRef.nativeElement.focus();\n          }\n        }\n      }\n      /** Moves the focus inside the focus trap. */\n\n    }, {\n      key: \"_trapFocus\",\n      value: function _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n          this._focusTrap.focusInitialElementWhenReady();\n        } else if (!this._containsFocus()) {\n          // Otherwise ensure that focus is on the dialog container. It's possible that a different\n          // component tried to move focus while the open animation was running. See:\n          // https://github.com/angular/components/issues/16215. Note that we only want to do this\n          // if the focus isn't inside the dialog already, because it's possible that the consumer\n          // turned off `autoFocus` in order to move focus themselves.\n          this._elementRef.nativeElement.focus();\n        }\n      }\n      /** Restores focus to the element that was focused before the dialog opened. */\n\n    }, {\n      key: \"_restoreFocus\",\n      value: function _restoreFocus() {\n        var previousElement = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n        if (this._config.restoreFocus && previousElement && typeof previousElement.focus === 'function') {\n          var activeElement = _getFocusedElementPierceShadowDom();\n\n          var element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n          // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n          // the consumer moved it themselves before the animation was done, in which case we shouldn't\n          // do anything.\n\n          if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n            if (this._focusMonitor) {\n              this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n\n              this._closeInteractionType = null;\n            } else {\n              previousElement.focus();\n            }\n          }\n        }\n\n        if (this._focusTrap) {\n          this._focusTrap.destroy();\n        }\n      }\n      /** Sets up the focus trap. */\n\n    }, {\n      key: \"_setupFocusTrap\",\n      value: function _setupFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n      }\n      /** Captures the element that was focused before the dialog was opened. */\n\n    }, {\n      key: \"_capturePreviouslyFocusedElement\",\n      value: function _capturePreviouslyFocusedElement() {\n        if (this._document) {\n          this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n      }\n      /** Focuses the dialog container. */\n\n    }, {\n      key: \"_focusDialogContainer\",\n      value: function _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n          this._elementRef.nativeElement.focus();\n        }\n      }\n      /** Returns whether focus is inside the dialog. */\n\n    }, {\n      key: \"_containsFocus\",\n      value: function _containsFocus() {\n        var element = this._elementRef.nativeElement;\n\n        var activeElement = _getFocusedElementPierceShadowDom();\n\n        return element === activeElement || element.contains(activeElement);\n      }\n    }]);\n\n    return _MatDialogContainerBase;\n  }(BasePortalOutlet);\n\n  _MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) {\n    return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n  };\n\n  _MatDialogContainerBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatDialogContainerBase,\n    viewQuery: function _MatDialogContainerBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return _MatDialogContainerBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n\n\nvar MatDialogContainer = /*#__PURE__*/(function () {\n  var MatDialogContainer = /*#__PURE__*/function (_MatDialogContainerBa) {\n    _inherits(MatDialogContainer, _MatDialogContainerBa);\n\n    var _super2 = _createSuper(MatDialogContainer);\n\n    function MatDialogContainer() {\n      var _this2;\n\n      _classCallCheck(this, MatDialogContainer);\n\n      _this2 = _super2.apply(this, arguments);\n      /** State of the dialog animation. */\n\n      _this2._state = 'enter';\n      return _this2;\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n\n\n    _createClass(MatDialogContainer, [{\n      key: \"_onAnimationDone\",\n      value: function _onAnimationDone(_ref) {\n        var toState = _ref.toState,\n            totalTime = _ref.totalTime;\n\n        if (toState === 'enter') {\n          this._trapFocus();\n\n          this._animationStateChanged.next({\n            state: 'opened',\n            totalTime: totalTime\n          });\n        } else if (toState === 'exit') {\n          this._restoreFocus();\n\n          this._animationStateChanged.next({\n            state: 'closed',\n            totalTime: totalTime\n          });\n        }\n      }\n      /** Callback, invoked when an animation on the host starts. */\n\n    }, {\n      key: \"_onAnimationStart\",\n      value: function _onAnimationStart(_ref2) {\n        var toState = _ref2.toState,\n            totalTime = _ref2.totalTime;\n\n        if (toState === 'enter') {\n          this._animationStateChanged.next({\n            state: 'opening',\n            totalTime: totalTime\n          });\n        } else if (toState === 'exit' || toState === 'void') {\n          this._animationStateChanged.next({\n            state: 'closing',\n            totalTime: totalTime\n          });\n        }\n      }\n      /** Starts the dialog exit animation. */\n\n    }, {\n      key: \"_startExitAnimation\",\n      value: function _startExitAnimation() {\n        this._state = 'exit'; // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }]);\n\n    return MatDialogContainer;\n  }(_MatDialogContainerBase);\n\n  MatDialogContainer.ɵfac = /*@__PURE__*/function () {\n    var ɵMatDialogContainer_BaseFactory;\n    return function MatDialogContainer_Factory(t) {\n      return (ɵMatDialogContainer_BaseFactory || (ɵMatDialogContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer)))(t || MatDialogContainer);\n    };\n  }();\n\n  MatDialogContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatDialogContainer,\n    selectors: [[\"mat-dialog-container\"]],\n    hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n    hostVars: 6,\n    hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\n        ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function MatDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    directives: [ɵngcc2.CdkPortalOutlet],\n    styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matDialogAnimations.dialogContainer]\n    }\n  });\n  return MatDialogContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n\n\nvar uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\nvar MatDialogRef = /*#__PURE__*/function () {\n  function MatDialogRef(_overlayRef, _containerInstance) {\n    var _this3 = this;\n\n    var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"mat-dialog-\".concat(uniqueId++);\n\n    _classCallCheck(this, MatDialogRef);\n\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /** Whether the user is allowed to close the dialog. */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* OPEN */\n    ; // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.state === 'opened';\n    }), take(1)).subscribe(function () {\n      _this3._afterOpened.next();\n\n      _this3._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.state === 'closed';\n    }), take(1)).subscribe(function () {\n      clearTimeout(_this3._closeFallbackTimeout);\n\n      _this3._finishDialogClose();\n    });\n\n    _overlayRef.detachments().subscribe(function () {\n      _this3._beforeClosed.next(_this3._result);\n\n      _this3._beforeClosed.complete();\n\n      _this3._afterClosed.next(_this3._result);\n\n      _this3._afterClosed.complete();\n\n      _this3.componentInstance = null;\n\n      _this3._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(function (event) {\n      return event.keyCode === ESCAPE && !_this3.disableClose && !hasModifierKey(event);\n    })).subscribe(function (event) {\n      event.preventDefault();\n\n      _closeDialogVia(_this3, 'keyboard');\n    });\n\n    _overlayRef.backdropClick().subscribe(function () {\n      if (_this3.disableClose) {\n        _this3._containerInstance._recaptureFocus();\n      } else {\n        _closeDialogVia(_this3, 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  _createClass(MatDialogRef, [{\n    key: \"close\",\n    value: function close(dialogResult) {\n      var _this4 = this;\n\n      this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n      this._containerInstance._animationStateChanged.pipe(filter(function (event) {\n        return event.state === 'closing';\n      }), take(1)).subscribe(function (event) {\n        _this4._beforeClosed.next(dialogResult);\n\n        _this4._beforeClosed.complete();\n\n        _this4._overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n        _this4._closeFallbackTimeout = setTimeout(function () {\n          return _this4._finishDialogClose();\n        }, event.totalTime + 100);\n      });\n\n      this._state = 1\n      /* CLOSING */\n      ;\n\n      this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n\n  }, {\n    key: \"afterClosed\",\n    value: function afterClosed() {\n      return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n\n  }, {\n    key: \"beforeClosed\",\n    value: function beforeClosed() {\n      return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(position) {\n      var strategy = this._getPositionStrategy();\n\n      if (position && (position.left || position.right)) {\n        position.left ? strategy.left(position.left) : strategy.right(position.right);\n      } else {\n        strategy.centerHorizontally();\n      }\n\n      if (position && (position.top || position.bottom)) {\n        position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n      } else {\n        strategy.centerVertically();\n      }\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      this._overlayRef.updateSize({\n        width: width,\n        height: height\n      });\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      this._overlayRef.addPanelClass(classes);\n\n      return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      this._overlayRef.removePanelClass(classes);\n\n      return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n\n  }, {\n    key: \"_finishDialogClose\",\n    value: function _finishDialogClose() {\n      this._state = 2\n      /* CLOSED */\n      ;\n\n      this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n\n  }, {\n    key: \"_getPositionStrategy\",\n    value: function _getPositionStrategy() {\n      return this._overlayRef.getConfig().positionStrategy;\n    }\n  }]);\n\n  return MatDialogRef;\n}();\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\n\n\nfunction _closeDialogVia(ref, interactionType, result) {\n  // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n  // For those, we keep the behavior as is and do not deal with the interaction type.\n  if (ref._containerInstance !== undefined) {\n    ref._containerInstance._closeInteractionType = interactionType;\n  }\n\n  return ref.close(result);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nvar MAT_DIALOG_DATA = /*#__PURE__*/new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nvar MAT_DIALOG_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nvar MAT_DIALOG_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n\nvar _MatDialogBase = /*#__PURE__*/(function () {\n  var _MatDialogBase = /*#__PURE__*/function () {\n    function _MatDialogBase(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n      var _this5 = this;\n\n      _classCallCheck(this, _MatDialogBase);\n\n      this._overlay = _overlay;\n      this._injector = _injector;\n      this._defaultOptions = _defaultOptions;\n      this._parentDialog = _parentDialog;\n      this._overlayContainer = _overlayContainer;\n      this._dialogRefConstructor = _dialogRefConstructor;\n      this._dialogContainerType = _dialogContainerType;\n      this._dialogDataToken = _dialogDataToken;\n      this._openDialogsAtThisLevel = [];\n      this._afterAllClosedAtThisLevel = new Subject();\n      this._afterOpenedAtThisLevel = new Subject();\n      this._ariaHiddenElements = new Map(); // TODO (jelbourn): tighten the typing right-hand side of this expression.\n\n      /**\n       * Stream that emits when all open dialog have finished closing.\n       * Will emit on subscribe if there are no open dialogs to begin with.\n       */\n\n      this.afterAllClosed = defer(function () {\n        return _this5.openDialogs.length ? _this5._getAfterAllClosed() : _this5._getAfterAllClosed().pipe(startWith(undefined));\n      });\n      this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n\n\n    _createClass(_MatDialogBase, [{\n      key: \"openDialogs\",\n      get: function get() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n      }\n      /** Stream that emits when a dialog has been opened. */\n\n    }, {\n      key: \"afterOpened\",\n      get: function get() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n      }\n    }, {\n      key: \"_getAfterAllClosed\",\n      value: function _getAfterAllClosed() {\n        var parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n      }\n    }, {\n      key: \"open\",\n      value: function open(componentOrTemplateRef, config) {\n        var _this6 = this;\n\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n        if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error(\"Dialog with id \\\"\".concat(config.id, \"\\\" exists already. The dialog id must be unique.\"));\n        }\n\n        var overlayRef = this._createOverlay(config);\n\n        var dialogContainer = this._attachDialogContainer(overlayRef, config);\n\n        var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n        if (!this.openDialogs.length) {\n          this._hideNonDialogContentFromAssistiveTechnology();\n        }\n\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(function () {\n          return _this6._removeOpenDialog(dialogRef);\n        });\n        this.afterOpened.next(dialogRef); // Notify the dialog container that the content has been attached.\n\n        dialogContainer._initializeWithAttachedContent();\n\n        return dialogRef;\n      }\n      /**\n       * Closes all of the currently-open dialogs.\n       */\n\n    }, {\n      key: \"closeAll\",\n      value: function closeAll() {\n        this._closeDialogs(this.openDialogs);\n      }\n      /**\n       * Finds an open dialog by its id.\n       * @param id ID to use when looking up the dialog.\n       */\n\n    }, {\n      key: \"getDialogById\",\n      value: function getDialogById(id) {\n        return this.openDialogs.find(function (dialog) {\n          return dialog.id === id;\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n\n        this._afterAllClosedAtThisLevel.complete();\n\n        this._afterOpenedAtThisLevel.complete();\n      }\n      /**\n       * Creates the overlay into which the dialog will be loaded.\n       * @param config The dialog configuration.\n       * @returns A promise resolving to the OverlayRef for the created overlay.\n       */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay(config) {\n        var overlayConfig = this._getOverlayConfig(config);\n\n        return this._overlay.create(overlayConfig);\n      }\n      /**\n       * Creates an overlay config from a dialog config.\n       * @param dialogConfig The dialog configuration.\n       * @returns The overlay configuration.\n       */\n\n    }, {\n      key: \"_getOverlayConfig\",\n      value: function _getOverlayConfig(dialogConfig) {\n        var state = new OverlayConfig({\n          positionStrategy: this._overlay.position().global(),\n          scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n          panelClass: dialogConfig.panelClass,\n          hasBackdrop: dialogConfig.hasBackdrop,\n          direction: dialogConfig.direction,\n          minWidth: dialogConfig.minWidth,\n          minHeight: dialogConfig.minHeight,\n          maxWidth: dialogConfig.maxWidth,\n          maxHeight: dialogConfig.maxHeight,\n          disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n\n        if (dialogConfig.backdropClass) {\n          state.backdropClass = dialogConfig.backdropClass;\n        }\n\n        return state;\n      }\n      /**\n       * Attaches a dialog container to a dialog's already-created overlay.\n       * @param overlay Reference to the dialog's underlying overlay.\n       * @param config The dialog configuration.\n       * @returns A promise resolving to a ComponentRef for the attached container.\n       */\n\n    }, {\n      key: \"_attachDialogContainer\",\n      value: function _attachDialogContainer(overlay, config) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var injector = Injector.create({\n          parent: userInjector || this._injector,\n          providers: [{\n            provide: MatDialogConfig,\n            useValue: config\n          }]\n        });\n        var containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        var containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n      }\n      /**\n       * Attaches the user-provided component to the already-created dialog container.\n       * @param componentOrTemplateRef The type of component being loaded into the dialog,\n       *     or a TemplateRef to instantiate as the content.\n       * @param dialogContainer Reference to the wrapping dialog container.\n       * @param overlayRef Reference to the overlay in which the dialog resides.\n       * @param config The dialog configuration.\n       * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n       */\n\n    }, {\n      key: \"_attachDialogContent\",\n      value: function _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        var dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n          dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n            $implicit: config.data,\n            dialogRef: dialogRef\n          }));\n        } else {\n          var injector = this._createInjector(config, dialogRef, dialogContainer);\n\n          var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n          dialogRef.componentInstance = contentRef.instance;\n        }\n\n        dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n        return dialogRef;\n      }\n      /**\n       * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n       * of a dialog to close itself and, optionally, to return a value.\n       * @param config Config object that is used to construct the dialog.\n       * @param dialogRef Reference to the dialog.\n       * @param dialogContainer Dialog container element that wraps all of the contents.\n       * @returns The custom injector that can be used inside the dialog.\n       */\n\n    }, {\n      key: \"_createInjector\",\n      value: function _createInjector(config, dialogRef, dialogContainer) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector; // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n\n        var providers = [{\n          provide: this._dialogContainerType,\n          useValue: dialogContainer\n        }, {\n          provide: this._dialogDataToken,\n          useValue: config.data\n        }, {\n          provide: this._dialogRefConstructor,\n          useValue: dialogRef\n        }];\n\n        if (config.direction && (!userInjector || !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n          providers.push({\n            provide: Directionality,\n            useValue: {\n              value: config.direction,\n              change: of()\n            }\n          });\n        }\n\n        return Injector.create({\n          parent: userInjector || this._injector,\n          providers: providers\n        });\n      }\n      /**\n       * Removes a dialog from the array of open dialogs.\n       * @param dialogRef Dialog to be removed.\n       */\n\n    }, {\n      key: \"_removeOpenDialog\",\n      value: function _removeOpenDialog(dialogRef) {\n        var index = this.openDialogs.indexOf(dialogRef);\n\n        if (index > -1) {\n          this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n          // to a the siblings and emit to the `afterAllClosed` stream.\n\n          if (!this.openDialogs.length) {\n            this._ariaHiddenElements.forEach(function (previousValue, element) {\n              if (previousValue) {\n                element.setAttribute('aria-hidden', previousValue);\n              } else {\n                element.removeAttribute('aria-hidden');\n              }\n            });\n\n            this._ariaHiddenElements.clear();\n\n            this._getAfterAllClosed().next();\n          }\n        }\n      }\n      /**\n       * Hides all of the content that isn't an overlay from assistive technology.\n       */\n\n    }, {\n      key: \"_hideNonDialogContentFromAssistiveTechnology\",\n      value: function _hideNonDialogContentFromAssistiveTechnology() {\n        var overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n        if (overlayContainer.parentElement) {\n          var siblings = overlayContainer.parentElement.children;\n\n          for (var i = siblings.length - 1; i > -1; i--) {\n            var sibling = siblings[i];\n\n            if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n              this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n              sibling.setAttribute('aria-hidden', 'true');\n            }\n          }\n        }\n      }\n      /** Closes all of the dialogs in an array. */\n\n    }, {\n      key: \"_closeDialogs\",\n      value: function _closeDialogs(dialogs) {\n        var i = dialogs.length;\n\n        while (i--) {\n          // The `_openDialogs` property isn't updated after close until the rxjs subscription\n          // runs on the next microtask, in addition to modifying the array as we're going\n          // through it. We loop through all of them and call close without assuming that\n          // they'll be removed from the list instantaneously.\n          dialogs[i].close();\n        }\n      }\n    }]);\n\n    return _MatDialogBase;\n  }();\n\n  _MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) {\n    return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken));\n  };\n\n  _MatDialogBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatDialogBase\n  });\n  return _MatDialogBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Service to open Material Design modal dialogs.\n */\n\n\nvar MatDialog = /*#__PURE__*/(function () {\n  var MatDialog = /*#__PURE__*/function (_MatDialogBase2) {\n    _inherits(MatDialog, _MatDialogBase2);\n\n    var _super3 = _createSuper(MatDialog);\n\n    function MatDialog(overlay, injector,\n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n      _classCallCheck(this, MatDialog);\n\n      return _super3.call(this, overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n    }\n\n    return _createClass(MatDialog);\n  }(_MatDialogBase);\n\n  MatDialog.ɵfac = function MatDialog_Factory(t) {\n    return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n  };\n\n  MatDialog.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MatDialog,\n    factory: MatDialog.ɵfac\n  });\n  return MatDialog;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign(Object.assign({}, defaultOptions), config);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nvar dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nvar MatDialogClose = /*#__PURE__*/(function () {\n  var MatDialogClose = /*#__PURE__*/function () {\n    function MatDialogClose(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n      _classCallCheck(this, MatDialogClose);\n\n      this.dialogRef = dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      /** Default to \"button\" to prevents accidental form submits. */\n\n      this.type = 'button';\n    }\n\n    _createClass(MatDialogClose, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (!this.dialogRef) {\n          // When this directive is included in a dialog via TemplateRef (rather than being\n          // in a Component), the DialogRef isn't available via injection because embedded\n          // views cannot be given a custom injector. Instead, we look up the DialogRef by\n          // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n          // be resolved at constructor time.\n          this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n        if (proxiedChange) {\n          this.dialogResult = proxiedChange.currentValue;\n        }\n      }\n    }, {\n      key: \"_onButtonClick\",\n      value: function _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n      }\n    }]);\n\n    return MatDialogClose;\n  }();\n\n  MatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n    return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogClose.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogClose,\n    selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n    hostVars: 2,\n    hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n          return ctx._onButtonClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n      }\n    },\n    inputs: {\n      type: \"type\",\n      dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n    },\n    exportAs: [\"matDialogClose\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatDialogClose;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nvar MatDialogTitle = /*#__PURE__*/(function () {\n  var MatDialogTitle = /*#__PURE__*/function () {\n    function MatDialogTitle( // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n      _classCallCheck(this, MatDialogTitle);\n\n      this._dialogRef = _dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n\n      this.id = \"mat-dialog-title-\".concat(dialogElementUid++);\n    }\n\n    _createClass(MatDialogTitle, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this7 = this;\n\n        if (!this._dialogRef) {\n          this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n\n        if (this._dialogRef) {\n          Promise.resolve().then(function () {\n            var container = _this7._dialogRef._containerInstance;\n\n            if (container && !container._ariaLabelledBy) {\n              container._ariaLabelledBy = _this7.id;\n            }\n          });\n        }\n      }\n    }]);\n\n    return MatDialogTitle;\n  }();\n\n  MatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n    return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogTitle,\n    selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-title\"],\n    hostVars: 1,\n    hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    },\n    exportAs: [\"matDialogTitle\"]\n  });\n  return MatDialogTitle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nvar MatDialogContent = /*#__PURE__*/(function () {\n  var MatDialogContent = /*#__PURE__*/_createClass(function MatDialogContent() {\n    _classCallCheck(this, MatDialogContent);\n  });\n\n  MatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n    return new (t || MatDialogContent)();\n  };\n\n  MatDialogContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogContent,\n    selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-content\"]\n  });\n  return MatDialogContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nvar MatDialogActions = /*#__PURE__*/(function () {\n  var MatDialogActions = /*#__PURE__*/_createClass(function MatDialogActions() {\n    _classCallCheck(this, MatDialogActions);\n  });\n\n  MatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n    return new (t || MatDialogActions)();\n  };\n\n  MatDialogActions.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogActions,\n    selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-actions\"]\n  });\n  return MatDialogActions;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  var parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(function (dialog) {\n    return dialog.id === parent.id;\n  }) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatDialogModule = /*#__PURE__*/(function () {\n  var MatDialogModule = /*#__PURE__*/_createClass(function MatDialogModule() {\n    _classCallCheck(this, MatDialogModule);\n  });\n\n  MatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n    return new (t || MatDialogModule)();\n  };\n\n  MatDialogModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatDialogModule\n  });\n  MatDialogModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n    imports: [[OverlayModule, PortalModule, MatCommonModule], MatCommonModule]\n  });\n  return MatDialogModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n    declarations: function declarations() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n    },\n    imports: function imports() {\n      return [OverlayModule, PortalModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };","map":{"version":3,"names":["Overlay","OverlayConfig","OverlayContainer","OverlayModule","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","EventEmitter","Directive","ElementRef","ChangeDetectorRef","Optional","Inject","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injector","TemplateRef","InjectFlags","Type","Injectable","SkipSelf","Input","NgModule","MatCommonModule","Directionality","DOCUMENT","Location","Subject","defer","of","filter","take","startWith","FocusTrapFactory","FocusMonitor","_getFocusedElementPierceShadowDom","trigger","state","style","transition","animate","ESCAPE","hasModifierKey","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","MatDialogContainer_ng_template_0_Template","rf","ctx","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","throwMatDialogContentAlreadyAttachedError","Error","_MatDialogContainerBase","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_focusMonitor","_animationStateChanged","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","_ariaLabelledBy","_setupFocusTrap","_capturePreviouslyFocusedElement","_focusDialogContainer","attachComponentPortal","attachTemplatePortal","_containsFocus","focusContainer","_focusTrap","focusInitialElement","nativeElement","focus","focusInitialElementWhenReady","previousElement","activeElement","element","body","contains","focusVia","destroy","create","ɵfac","_MatDialogContainerBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatDialogContainerBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","features","ɵɵInheritDefinitionFeature","MatDialogContainer","arguments","_state","toState","totalTime","_trapFocus","next","_restoreFocus","markForCheck","ɵMatDialogContainer_BaseFactory","MatDialogContainer_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","ɵɵsyntheticHostListener","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","_onAnimationStart","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","_onAnimationDone","ɵɵhostProperty","_id","ɵɵattribute","ɵɵsyntheticHostProperty","decls","vars","consts","template","MatDialogContainer_Template","ɵɵtemplate","directives","styles","encapsulation","animation","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","pipe","event","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","preventDefault","_closeDialogVia","backdropClick","_recaptureFocus","dialogResult","detachBackdrop","setTimeout","_startExitAnimation","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updatePosition","updateSize","classes","addPanelClass","removePanelClass","getConfig","positionStrategy","ref","interactionType","result","undefined","close","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","_MatDialogBase","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_getAfterAllClosed","_scrollStrategy","afterOpened","parent","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","afterClosed","_removeOpenDialog","_initializeWithAttachedContent","_closeDialogs","find","dialog","overlayConfig","_getOverlayConfig","dialogConfig","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","providers","useValue","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","get","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","_MatDialogBase_Factory","MatDialog","location","defaultOptions","parentDialog","MatDialog_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","Object","assign","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","changes","proxiedChange","currentValue","screenX","screenY","MatDialogClose_Factory","MatDialogClose_HostBindings","ɵɵlistener","MatDialogClose_click_HostBindingHandler","_onButtonClick","inputs","_matDialogClose","exportAs","ɵɵNgOnChangesFeature","MatDialogTitle","_dialogRef","Promise","resolve","then","container","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","classList","MatDialogModule","MatDialogModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js"],"sourcesContent":["import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether the dialog should focus the first focusable element on open. */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\nclass _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._focusMonitor = _focusMonitor;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent() {\n        this._setupFocusTrap();\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        this._capturePreviouslyFocusedElement();\n        // Move focus onto the dialog immediately in order to prevent the user\n        // from accidentally opening multiple dialogs at the same time.\n        this._focusDialogContainer();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n            if (focusContainer) {\n                this._elementRef.nativeElement.focus();\n            }\n        }\n    }\n    /** Moves the focus inside the focus trap. */\n    _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else if (!this._containsFocus()) {\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Sets up the focus trap. */\n    _setupFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    /** Captures the element that was focused before the dialog was opened. */\n    _capturePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n}\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) { return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\n_MatDialogContainerBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatDialogContainerBase, viewQuery: function _MatDialogContainerBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatDialogContainerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig },\n    { type: FocusMonitor }\n];\n_MatDialogContainerBase.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }, { type: ɵngcc1.FocusMonitor }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n        super(...arguments);\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._trapFocus();\n            this._animationStateChanged.next({ state: 'opened', totalTime });\n        }\n        else if (toState === 'exit') {\n            this._restoreFocus();\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = /*@__PURE__*/ function () { let ɵMatDialogContainer_BaseFactory; return function MatDialogContainer_Factory(t) { return (ɵMatDialogContainer_BaseFactory || (ɵMatDialogContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer)))(t || MatDialogContainer); }; }();\nMatDialogContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\n        ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, \n    /** Id of the dialog. */\n    id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._overlayRef.updateSize({ width, height });\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length ?\n            this._getAfterAllClosed() :\n            this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        // Notify the dialog container that the content has been attached.\n        dialogContainer._initializeWithAttachedContent();\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n        const providers = [\n            { provide: this._dialogContainerType, useValue: dialogContainer },\n            { provide: this._dialogDataToken, useValue: config.data },\n            { provide: this._dialogRefConstructor, useValue: dialogRef }\n        ];\n        if (config.direction && (!userInjector ||\n            !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._getAfterAllClosed().next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) { return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken)); };\n_MatDialogBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatDialogBase });\n_MatDialogBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: undefined },\n    { type: undefined },\n    { type: OverlayContainer },\n    { type: undefined },\n    { type: Type },\n    { type: Type },\n    { type: InjectionToken }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: undefined }, { type: undefined }, { type: ɵngcc3.OverlayContainer }, { type: undefined }, { type: ɵngcc0.Type }, { type: ɵngcc0.Type }, { type: ɵngcc0.InjectionToken }]; }, null); })();\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) { return ctx._onButtonClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': '_onButtonClick($event)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); };\nMatDialogModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}