{"ast":null,"code":"import _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport var AuthService = /*#__PURE__*/(function () {\n  var AuthService = /*#__PURE__*/function () {\n    function AuthService(http, router) {\n      _classCallCheck(this, AuthService);\n\n      this.http = http;\n      this.router = router;\n      this.isloggedin$ = new BehaviorSubject(false);\n      this.BaseURI = 'https://localhost:44318/api/Access';\n    }\n\n    _createClass(AuthService, [{\n      key: \"register\",\n      value: function register(formData) {\n        var body = {\n          FirstName: formData.FirstName,\n          Email: formData.Email,\n          Username: formData.Email,\n          Name: formData.Name,\n          Surname: formData.Surname,\n          Password: formData.Passwords.Password,\n          isGuest: true,\n          IdNumber: formData.IdNumber\n        };\n        console.log(body);\n        return this.http.post(this.BaseURI + '/Register/1', body);\n      }\n    }, {\n      key: \"login\",\n      value: function login(formData) {\n        console.log(\"login\");\n        return this.http.post(this.BaseURI + '/Login/', formData);\n      }\n    }, {\n      key: \"setLoggedin\",\n      value: function setLoggedin(object) {\n        this.isloggedin$.next(object);\n      }\n    }, {\n      key: \"isLoggedIn\",\n      get: function get() {\n        return true;\n      }\n    }, {\n      key: \"Logout\",\n      value: function Logout() {\n        sessionStorage.removeItem('id');\n        sessionStorage.removeItem('rle');\n        sessionStorage.removeItem('typ');\n        this.setLoggedin(false);\n        this.router.navigateByUrl('/login');\n      }\n    }, {\n      key: \"setUserID\",\n      value: function setUserID(userID) {\n        sessionStorage.setItem('id', userID.toString());\n      }\n    }, {\n      key: \"getUserID\",\n      get: function get() {\n        var id = Number(sessionStorage.getItem('id'));\n        return id;\n      }\n    }, {\n      key: \"setUserRole\",\n      value: function setUserRole(role) {\n        sessionStorage.setItem('rle', role.toString());\n      }\n    }, {\n      key: \"setUserType\",\n      value: function setUserType(type) {\n        sessionStorage.setItem('typ', type.toString());\n      }\n    }, {\n      key: \"getUserType\",\n      get: function get() {\n        var id = Number(sessionStorage.getItem('typ'));\n        return id;\n      }\n    }, {\n      key: \"getUserRole\",\n      get: function get() {\n        var id = Number(sessionStorage.getItem('rle'));\n        return id;\n      }\n    }, {\n      key: \"getTypes\",\n      value: function getTypes() {\n        return this.http.get('https://localhost:44318/api/Users/getUserTypes');\n      }\n    }]);\n\n    return AuthService;\n  }();\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":{"version":3,"mappings":"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","names":["HttpClient","Router","BehaviorSubject","AuthService","http","router","formData","body","FirstName","Email","Username","Name","Surname","Password","Passwords","isGuest","IdNumber","console","log","post","BaseURI","object","isloggedin$","next","sessionStorage","removeItem","setLoggedin","navigateByUrl","userID","setItem","toString","id","Number","getItem","role","type","get","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\sonkh\\2\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\ndeclare var $;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(private http: HttpClient, private router: Router) { }\r\n\r\n  private isloggedin$: BehaviorSubject<any> = new BehaviorSubject<any>(false);\r\n  readonly BaseURI = 'https://localhost:44318/api/Access';\r\n\r\n\r\n  register(formData) {\r\n    const body = {\r\n      FirstName: formData.FirstName,\r\n      Email: formData.Email,\r\n      Username: formData.Email,\r\n      Name: formData.Name,\r\n      Surname: formData.Surname,\r\n      Password: formData.Passwords.Password,\r\n      isGuest: true,\r\n      IdNumber: formData.IdNumber,\r\n    };\r\n    console.log(body)\r\n    return this.http.post(this.BaseURI + '/Register/1', body);\r\n  }\r\n\r\n  login(formData) {\r\n    console.log(\"login\")\r\n    return this.http.post(this.BaseURI + '/Login/', formData);\r\n  }\r\n\r\n  setLoggedin(object: boolean) {\r\n    this.isloggedin$.next(object);\r\n  }\r\n\r\n  get isLoggedIn() {\r\n    return true ;\r\n  }\r\n  Logout() {\r\n\r\n    sessionStorage.removeItem('id');\r\n    sessionStorage.removeItem('rle');\r\n    sessionStorage.removeItem('typ');\r\n\r\n    this.setLoggedin(false);\r\n    this.router.navigateByUrl('/login');\r\n  }\r\n\r\n  setUserID(userID) {\r\n    sessionStorage.setItem('id', userID.toString());\r\n  }\r\n\r\n get getUserID () {\r\n   const id = Number(sessionStorage.getItem('id'));\r\n   return id;\r\n  }\r\n\r\n  setUserRole(role) {\r\n    sessionStorage.setItem('rle', role.toString());\r\n  }\r\n\r\n  setUserType(type) {\r\n    sessionStorage.setItem('typ', type.toString());\r\n  }\r\n  get getUserType () {\r\n    const id = Number(sessionStorage.getItem('typ'));\r\n    return id;\r\n   }\r\n  get getUserRole () {\r\n    const id = Number(sessionStorage.getItem('rle'));\r\n    return id;\r\n   }\r\n   getTypes():  Observable<any[]> {\r\n    return this.http.get<any[]>('https://localhost:44318/api/Users/getUserTypes');\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}