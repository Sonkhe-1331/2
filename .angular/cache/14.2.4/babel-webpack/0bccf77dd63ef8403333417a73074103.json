{"ast":null,"code":"import _get from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _toConsumableArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _assertThisInitialized from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/common';\nvar _c0 = [\"trigger\"];\nvar _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8._panelDoneAnimatingStream.next($event.toState);\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10._handleKeydown($event);\n    });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\n\nvar _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nvar _c3 = [\"mat-select-trigger\", \"*\"];\nvar matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: /*#__PURE__*/trigger('transformPanelWrap', [/*#__PURE__*/transition('* => void', /*#__PURE__*/query('@transformPanel', [/*#__PURE__*/animateChild()], {\n    optional: true\n  }))]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: /*#__PURE__*/trigger('transformPanel', [/*#__PURE__*/state('void', /*#__PURE__*/style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), /*#__PURE__*/state('showing', /*#__PURE__*/style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: 'scaleY(1)'\n  })), /*#__PURE__*/state('showing-multiple', /*#__PURE__*/style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    transform: 'scaleY(1)'\n  })), /*#__PURE__*/transition('void => *', /*#__PURE__*/animate('120ms cubic-bezier(0, 0, 0.2, 1)')), /*#__PURE__*/transition('* => void', /*#__PURE__*/animate('100ms 25ms linear', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel. */\n\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\n\nvar SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n\nvar SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\n\nvar SELECT_ITEM_HEIGHT_EM = 3; // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\n\nvar SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\n\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\n\nvar MAT_SELECT_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** Injection token that can be used to provide the default options the select module. */\n\n\nvar MAT_SELECT_CONFIG = /*#__PURE__*/new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\n\nvar MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** Change event object that is emitted when the select value has changed. */\n\nvar MatSelectChange = /*#__PURE__*/_createClass(function MatSelectChange(\n/** Reference to the select that emitted the change event. */\nsource,\n/** Current value of the select that emitted the event. */\nvalue) {\n  _classCallCheck(this, MatSelectChange);\n\n  this.source = source;\n  this.value = value;\n}); // Boilerplate for applying mixins to MatSelect.\n\n/** @docs-private */\n\n\nvar _MatSelectMixinBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinDisabled( /*#__PURE__*/mixinErrorState( /*#__PURE__*/function () {\n  function _class(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    _classCallCheck(this, _class);\n\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n  return _createClass(_class);\n}()))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar MAT_SELECT_TRIGGER = /*#__PURE__*/new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\nvar MatSelectTrigger = /*#__PURE__*/(function () {\n  var MatSelectTrigger = /*#__PURE__*/_createClass(function MatSelectTrigger() {\n    _classCallCheck(this, MatSelectTrigger);\n  });\n\n  MatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n    return new (t || MatSelectTrigger)();\n  };\n\n  MatSelectTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatSelectTrigger,\n    selectors: [[\"mat-select-trigger\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_SELECT_TRIGGER,\n      useExisting: MatSelectTrigger\n    }])]\n  });\n  return MatSelectTrigger;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Base class with all of the `MatSelect` functionality. */\n\n\nvar _MatSelectBase = /*#__PURE__*/(function () {\n  var _MatSelectBase = /*#__PURE__*/function (_MatSelectMixinBase2) {\n    _inherits(_MatSelectBase, _MatSelectMixinBase2);\n\n    var _super = _createSuper(_MatSelectBase);\n\n    function _MatSelectBase(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n      var _this;\n\n      _classCallCheck(this, _MatSelectBase);\n\n      var _a, _b, _c;\n\n      _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      _this._viewportRuler = _viewportRuler;\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._ngZone = _ngZone;\n      _this._dir = _dir;\n      _this._parentFormField = _parentFormField;\n      _this._liveAnnouncer = _liveAnnouncer;\n      _this._defaultOptions = _defaultOptions;\n      /** Whether or not the overlay panel is open. */\n\n      _this._panelOpen = false;\n      /** Comparison function to specify which option is displayed. Defaults to object equality. */\n\n      _this._compareWith = function (o1, o2) {\n        return o1 === o2;\n      };\n      /** Unique id for this input. */\n\n\n      _this._uid = \"mat-select-\".concat(nextUniqueId++);\n      /** Current `ariar-labelledby` value for the select trigger. */\n\n      _this._triggerAriaLabelledBy = null;\n      /** Emits whenever the component is destroyed. */\n\n      _this._destroy = new Subject();\n      /** `View -> model callback called when value changes` */\n\n      _this._onChange = function () {};\n      /** `View -> model callback called when select has been touched` */\n\n\n      _this._onTouched = function () {};\n      /** ID for the DOM node containing the select's value. */\n\n\n      _this._valueId = \"mat-select-value-\".concat(nextUniqueId++);\n      /** Emits when the panel element is finished transforming in. */\n\n      _this._panelDoneAnimatingStream = new Subject();\n      _this._overlayPanelClass = ((_a = _this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n      _this._focused = false;\n      /** A name for this control that can be used by `mat-form-field`. */\n\n      _this.controlType = 'mat-select';\n      _this._required = false;\n      _this._multiple = false;\n      _this._disableOptionCentering = (_c = (_b = _this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n      /** Aria label of the select. */\n\n      _this.ariaLabel = '';\n      /** Combined stream of all of the child options' change events. */\n\n      _this.optionSelectionChanges = defer(function () {\n        var options = _this.options;\n\n        if (options) {\n          return options.changes.pipe(startWith(options), switchMap(function () {\n            return merge.apply(void 0, _toConsumableArray(options.map(function (option) {\n              return option.onSelectionChange;\n            })));\n          }));\n        }\n\n        return _this._ngZone.onStable.pipe(take(1), switchMap(function () {\n          return _this.optionSelectionChanges;\n        }));\n      });\n      /** Event emitted when the select panel has been toggled. */\n\n      _this.openedChange = new EventEmitter();\n      /** Event emitted when the select has been opened. */\n\n      _this._openedStream = _this.openedChange.pipe(filter(function (o) {\n        return o;\n      }), map(function () {}));\n      /** Event emitted when the select has been closed. */\n\n      _this._closedStream = _this.openedChange.pipe(filter(function (o) {\n        return !o;\n      }), map(function () {}));\n      /** Event emitted when the selected value has been changed by the user. */\n\n      _this.selectionChange = new EventEmitter();\n      /**\n       * Event that emits whenever the raw value of the select changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * @docs-private\n       */\n\n      _this.valueChange = new EventEmitter();\n\n      if (_this.ngControl) {\n        // Note: we provide the value accessor through here, instead of\n        // the `providers` to avoid running into a circular import.\n        _this.ngControl.valueAccessor = _assertThisInitialized(_this);\n      } // Note that we only want to set this when the defaults pass it in, otherwise it should\n      // stay as `undefined` so that it falls back to the default in the key manager.\n\n\n      if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n        _this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n      }\n\n      _this._scrollStrategyFactory = scrollStrategyFactory;\n      _this._scrollStrategy = _this._scrollStrategyFactory();\n      _this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n      _this.id = _this.id;\n      return _this;\n    }\n    /** Whether the select is focused. */\n\n\n    _createClass(_MatSelectBase, [{\n      key: \"focused\",\n      get: function get() {\n        return this._focused || this._panelOpen;\n      }\n      /** Placeholder to be shown if no value has been selected. */\n\n    }, {\n      key: \"placeholder\",\n      get: function get() {\n        return this._placeholder;\n      },\n      set: function set(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n      }\n      /** Whether the component is required. */\n\n    }, {\n      key: \"required\",\n      get: function get() {\n        return this._required;\n      },\n      set: function set(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n      }\n      /** Whether the user should be allowed to select multiple options. */\n\n    }, {\n      key: \"multiple\",\n      get: function get() {\n        return this._multiple;\n      },\n      set: function set(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n      }\n      /** Whether to center the active option over the trigger. */\n\n    }, {\n      key: \"disableOptionCentering\",\n      get: function get() {\n        return this._disableOptionCentering;\n      },\n      set: function set(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n      }\n      /**\n       * Function to compare the option values with the selected values. The first argument\n       * is a value from an option. The second is a value from the selection. A boolean\n       * should be returned.\n       */\n\n    }, {\n      key: \"compareWith\",\n      get: function get() {\n        return this._compareWith;\n      },\n      set: function set(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n          // A different comparator means the selection could change.\n          this._initializeSelection();\n        }\n      }\n      /** Value of the select control. */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n          if (this.options) {\n            this._setSelectionByValue(newValue);\n          }\n\n          this._value = newValue;\n        }\n      }\n      /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n\n    }, {\n      key: \"typeaheadDebounceInterval\",\n      get: function get() {\n        return this._typeaheadDebounceInterval;\n      },\n      set: function set(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n      }\n      /** Unique id of the element. */\n\n    }, {\n      key: \"id\",\n      get: function get() {\n        return this._id;\n      },\n      set: function set(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n\n        this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(function () {\n          return _this2._panelDoneAnimating(_this2.panelOpen);\n        });\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this3 = this;\n\n        this._initKeyManager();\n\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(function (event) {\n          event.added.forEach(function (option) {\n            return option.select();\n          });\n          event.removed.forEach(function (option) {\n            return option.deselect();\n          });\n        });\n\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n          _this3._resetOptions();\n\n          _this3._initializeSelection();\n        });\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        var newAriaLabelledby = this._getTriggerAriaLabelledby(); // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n\n\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n          var element = this._elementRef.nativeElement;\n          this._triggerAriaLabelledBy = newAriaLabelledby;\n\n          if (newAriaLabelledby) {\n            element.setAttribute('aria-labelledby', newAriaLabelledby);\n          } else {\n            element.removeAttribute('aria-labelledby');\n          }\n        }\n\n        if (this.ngControl) {\n          this.updateErrorState();\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n          this.stateChanges.next();\n        }\n\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n          this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroy.next();\n\n        this._destroy.complete();\n\n        this.stateChanges.complete();\n      }\n      /** Toggles the overlay panel open or closed. */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        this.panelOpen ? this.close() : this.open();\n      }\n      /** Opens the overlay panel. */\n\n    }, {\n      key: \"open\",\n      value: function open() {\n        if (this._canOpen()) {\n          this._panelOpen = true;\n\n          this._keyManager.withHorizontalOrientation(null);\n\n          this._highlightCorrectOption();\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /** Closes the overlay panel and focuses the host element. */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (this._panelOpen) {\n          this._panelOpen = false;\n\n          this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n          this._changeDetectorRef.markForCheck();\n\n          this._onTouched();\n        }\n      }\n      /**\n       * Sets the select's value. Part of the ControlValueAccessor interface\n       * required to integrate with Angular's core forms API.\n       *\n       * @param value New value to be written to the model.\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.value = value;\n      }\n      /**\n       * Saves a callback function to be invoked when the select's value\n       * changes from user input. Part of the ControlValueAccessor interface\n       * required to integrate with Angular's core forms API.\n       *\n       * @param fn Callback to be triggered when the value changes.\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._onChange = fn;\n      }\n      /**\n       * Saves a callback function to be invoked when the select is blurred\n       * by the user. Part of the ControlValueAccessor interface required\n       * to integrate with Angular's core forms API.\n       *\n       * @param fn Callback to be triggered when the component has been touched.\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this._onTouched = fn;\n      }\n      /**\n       * Disables the select. Part of the ControlValueAccessor interface required\n       * to integrate with Angular's core forms API.\n       *\n       * @param isDisabled Sets whether the component is disabled.\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      }\n      /** Whether or not the overlay panel is open. */\n\n    }, {\n      key: \"panelOpen\",\n      get: function get() {\n        return this._panelOpen;\n      }\n      /** The currently selected option. */\n\n    }, {\n      key: \"selected\",\n      get: function get() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n      }\n      /** The value displayed in the trigger. */\n\n    }, {\n      key: \"triggerValue\",\n      get: function get() {\n        if (this.empty) {\n          return '';\n        }\n\n        if (this._multiple) {\n          var selectedOptions = this._selectionModel.selected.map(function (option) {\n            return option.viewValue;\n          });\n\n          if (this._isRtl()) {\n            selectedOptions.reverse();\n          } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n          return selectedOptions.join(', ');\n        }\n\n        return this._selectionModel.selected[0].viewValue;\n      }\n      /** Whether the element is in RTL mode. */\n\n    }, {\n      key: \"_isRtl\",\n      value: function _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n      }\n      /** Handles all keydown events on the select. */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        if (!this.disabled) {\n          this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n      }\n      /** Handles keyboard events while the select is closed. */\n\n    }, {\n      key: \"_handleClosedKeydown\",\n      value: function _handleClosedKeydown(event) {\n        var keyCode = event.keyCode;\n        var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        var isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        var manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n        if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n          event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n          this.open();\n        } else if (!this.multiple) {\n          var previouslySelectedOption = this.selected;\n          manager.onKeydown(event);\n          var selectedOption = this.selected; // Since the value has changed, we need to announce it ourselves.\n\n          if (selectedOption && previouslySelectedOption !== selectedOption) {\n            // We set a duration on the live announcement, because we want the live element to be\n            // cleared after a while so that users can't navigate to it using the arrow keys.\n            this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n          }\n        }\n      }\n      /** Handles keyboard events when the selected is open. */\n\n    }, {\n      key: \"_handleOpenKeydown\",\n      value: function _handleOpenKeydown(event) {\n        var manager = this._keyManager;\n        var keyCode = event.keyCode;\n        var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        var isTyping = manager.isTyping();\n\n        if (isArrowKey && event.altKey) {\n          // Close the select on ALT + arrow key to match the native <select>\n          event.preventDefault();\n          this.close(); // Don't do anything in this case if the user is typing,\n          // because the typing sequence can include the space key.\n        } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n          event.preventDefault();\n\n          manager.activeItem._selectViaInteraction();\n        } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n          event.preventDefault();\n          var hasDeselectedOptions = this.options.some(function (opt) {\n            return !opt.disabled && !opt.selected;\n          });\n          this.options.forEach(function (option) {\n            if (!option.disabled) {\n              hasDeselectedOptions ? option.select() : option.deselect();\n            }\n          });\n        } else {\n          var previouslyFocusedIndex = manager.activeItemIndex;\n          manager.onKeydown(event);\n\n          if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n            manager.activeItem._selectViaInteraction();\n          }\n        }\n      }\n    }, {\n      key: \"_onFocus\",\n      value: function _onFocus() {\n        if (!this.disabled) {\n          this._focused = true;\n          this.stateChanges.next();\n        }\n      }\n      /**\n       * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n       * \"blur\" to the panel when it opens, causing a false positive.\n       */\n\n    }, {\n      key: \"_onBlur\",\n      value: function _onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n          this._onTouched();\n\n          this._changeDetectorRef.markForCheck();\n\n          this.stateChanges.next();\n        }\n      }\n      /**\n       * Callback that is invoked when the overlay panel has been attached.\n       */\n\n    }, {\n      key: \"_onAttached\",\n      value: function _onAttached() {\n        var _this4 = this;\n\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(function () {\n          _this4._changeDetectorRef.detectChanges();\n\n          _this4._positioningSettled();\n        });\n      }\n      /** Returns the theme to be used on the panel. */\n\n    }, {\n      key: \"_getPanelTheme\",\n      value: function _getPanelTheme() {\n        return this._parentFormField ? \"mat-\".concat(this._parentFormField.color) : '';\n      }\n      /** Whether the select has a value. */\n\n    }, {\n      key: \"empty\",\n      get: function get() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n      }\n    }, {\n      key: \"_initializeSelection\",\n      value: function _initializeSelection() {\n        var _this5 = this;\n\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(function () {\n          _this5._setSelectionByValue(_this5.ngControl ? _this5.ngControl.value : _this5._value);\n\n          _this5.stateChanges.next();\n        });\n      }\n      /**\n       * Sets the selected option based on a value. If no option can be\n       * found with the designated value, the select trigger is cleared.\n       */\n\n    }, {\n      key: \"_setSelectionByValue\",\n      value: function _setSelectionByValue(value) {\n        var _this6 = this;\n\n        this._selectionModel.selected.forEach(function (option) {\n          return option.setInactiveStyles();\n        });\n\n        this._selectionModel.clear();\n\n        if (this.multiple && value) {\n          if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonArrayValueError();\n          }\n\n          value.forEach(function (currentValue) {\n            return _this6._selectValue(currentValue);\n          });\n\n          this._sortValues();\n        } else {\n          var correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n          // mode, because we don't know what option the user interacted with last.\n\n\n          if (correspondingOption) {\n            this._keyManager.updateActiveItem(correspondingOption);\n          } else if (!this.panelOpen) {\n            // Otherwise reset the highlighted option. Note that we only want to do this while\n            // closed, because doing it while open can shift the user's focus unnecessarily.\n            this._keyManager.updateActiveItem(-1);\n          }\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * Finds and selects and option based on its value.\n       * @returns Option that has the corresponding value.\n       */\n\n    }, {\n      key: \"_selectValue\",\n      value: function _selectValue(value) {\n        var _this7 = this;\n\n        var correspondingOption = this.options.find(function (option) {\n          // Skip options that are already in the model. This allows us to handle cases\n          // where the same primitive value is selected multiple times.\n          if (_this7._selectionModel.isSelected(option)) {\n            return false;\n          }\n\n          try {\n            // Treat null as a special reset value.\n            return option.value != null && _this7._compareWith(option.value, value);\n          } catch (error) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n              // Notify developers of errors in their comparator.\n              console.warn(error);\n            }\n\n            return false;\n          }\n        });\n\n        if (correspondingOption) {\n          this._selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n      }\n      /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n\n    }, {\n      key: \"_initKeyManager\",\n      value: function _initKeyManager() {\n        var _this8 = this;\n\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withAllowedModifierKeys(['shiftKey']);\n\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(function () {\n          if (_this8.panelOpen) {\n            // Select the active item when tabbing away. This is consistent with how the native\n            // select behaves. Note that we only want to do this in single selection mode.\n            if (!_this8.multiple && _this8._keyManager.activeItem) {\n              _this8._keyManager.activeItem._selectViaInteraction();\n            } // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n\n\n            _this8.focus();\n\n            _this8.close();\n          }\n        });\n\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(function () {\n          if (_this8._panelOpen && _this8.panel) {\n            _this8._scrollOptionIntoView(_this8._keyManager.activeItemIndex || 0);\n          } else if (!_this8._panelOpen && !_this8.multiple && _this8._keyManager.activeItem) {\n            _this8._keyManager.activeItem._selectViaInteraction();\n          }\n        });\n      }\n      /** Drops current option subscriptions and IDs and resets from scratch. */\n\n    }, {\n      key: \"_resetOptions\",\n      value: function _resetOptions() {\n        var _this9 = this;\n\n        var changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n          _this9._onSelect(event.source, event.isUserInput);\n\n          if (event.isUserInput && !_this9.multiple && _this9._panelOpen) {\n            _this9.close();\n\n            _this9.focus();\n          }\n        }); // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n\n        merge.apply(void 0, _toConsumableArray(this.options.map(function (option) {\n          return option._stateChanges;\n        }))).pipe(takeUntil(changedOrDestroyed)).subscribe(function () {\n          _this9._changeDetectorRef.markForCheck();\n\n          _this9.stateChanges.next();\n        });\n      }\n      /** Invoked when an option is clicked. */\n\n    }, {\n      key: \"_onSelect\",\n      value: function _onSelect(option, isUserInput) {\n        var wasSelected = this._selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n          option.deselect();\n\n          this._selectionModel.clear();\n\n          if (this.value != null) {\n            this._propagateChanges(option.value);\n          }\n        } else {\n          if (wasSelected !== option.selected) {\n            option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n          }\n\n          if (isUserInput) {\n            this._keyManager.setActiveItem(option);\n          }\n\n          if (this.multiple) {\n            this._sortValues();\n\n            if (isUserInput) {\n              // In case the user selected the option with their mouse, we\n              // want to restore focus back to the trigger, in order to\n              // prevent the select keyboard controls from clashing with\n              // the ones from `mat-option`.\n              this.focus();\n            }\n          }\n        }\n\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n          this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n      }\n      /** Sorts the selected values in the selected based on their order in the panel. */\n\n    }, {\n      key: \"_sortValues\",\n      value: function _sortValues() {\n        var _this10 = this;\n\n        if (this.multiple) {\n          var options = this.options.toArray();\n\n          this._selectionModel.sort(function (a, b) {\n            return _this10.sortComparator ? _this10.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n          });\n\n          this.stateChanges.next();\n        }\n      }\n      /** Emits change event to set the model value. */\n\n    }, {\n      key: \"_propagateChanges\",\n      value: function _propagateChanges(fallbackValue) {\n        var valueToEmit = null;\n\n        if (this.multiple) {\n          valueToEmit = this.selected.map(function (option) {\n            return option.value;\n          });\n        } else {\n          valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n\n        this._onChange(valueToEmit);\n\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * Highlights the selected item. If no option is selected, it will highlight\n       * the first item instead.\n       */\n\n    }, {\n      key: \"_highlightCorrectOption\",\n      value: function _highlightCorrectOption() {\n        if (this._keyManager) {\n          if (this.empty) {\n            this._keyManager.setFirstItemActive();\n          } else {\n            this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n          }\n        }\n      }\n      /** Whether the panel is allowed to open. */\n\n    }, {\n      key: \"_canOpen\",\n      value: function _canOpen() {\n        var _a;\n\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n      }\n      /** Focuses the select element. */\n\n    }, {\n      key: \"focus\",\n      value: function focus(options) {\n        this._elementRef.nativeElement.focus(options);\n      }\n      /** Gets the aria-labelledby for the select panel. */\n\n    }, {\n      key: \"_getPanelAriaLabelledby\",\n      value: function _getPanelAriaLabelledby() {\n        var _a;\n\n        if (this.ariaLabel) {\n          return null;\n        }\n\n        var labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        var labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n      }\n      /** Determines the `aria-activedescendant` to be set on the host. */\n\n    }, {\n      key: \"_getAriaActiveDescendant\",\n      value: function _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n          return this._keyManager.activeItem.id;\n        }\n\n        return null;\n      }\n      /** Gets the aria-labelledby of the select component trigger. */\n\n    }, {\n      key: \"_getTriggerAriaLabelledby\",\n      value: function _getTriggerAriaLabelledby() {\n        var _a;\n\n        if (this.ariaLabel) {\n          return null;\n        }\n\n        var labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        var value = (labelId ? labelId + ' ' : '') + this._valueId;\n\n        if (this.ariaLabelledby) {\n          value += ' ' + this.ariaLabelledby;\n        }\n\n        return value;\n      }\n      /** Called when the overlay panel is done animating. */\n\n    }, {\n      key: \"_panelDoneAnimating\",\n      value: function _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"setDescribedByIds\",\n      value: function setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"onContainerClick\",\n      value: function onContainerClick() {\n        this.focus();\n        this.open();\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"shouldLabelFloat\",\n      get: function get() {\n        return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n      }\n    }]);\n\n    return _MatSelectBase;\n  }(_MatSelectMixinBase);\n\n  _MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) {\n    return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n  };\n\n  _MatSelectBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatSelectBase,\n    viewQuery: function _MatSelectBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n      }\n    },\n    inputs: {\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      id: \"id\",\n      placeholder: \"placeholder\",\n      required: \"required\",\n      multiple: \"multiple\",\n      disableOptionCentering: \"disableOptionCentering\",\n      compareWith: \"compareWith\",\n      value: \"value\",\n      typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n      panelClass: \"panelClass\",\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      errorStateMatcher: \"errorStateMatcher\",\n      sortComparator: \"sortComparator\"\n    },\n    outputs: {\n      openedChange: \"openedChange\",\n      _openedStream: \"opened\",\n      _closedStream: \"closed\",\n      selectionChange: \"selectionChange\",\n      valueChange: \"valueChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return _MatSelectBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MatSelect = /*#__PURE__*/(function () {\n  var MatSelect = /*#__PURE__*/function (_MatSelectBase2) {\n    _inherits(MatSelect, _MatSelectBase2);\n\n    var _super2 = _createSuper(MatSelect);\n\n    function MatSelect() {\n      var _this11;\n\n      _classCallCheck(this, MatSelect);\n\n      _this11 = _super2.apply(this, arguments);\n      /** The scroll position of the overlay panel, calculated to center the selected option. */\n\n      _this11._scrollTop = 0;\n      /** The cached font-size of the trigger element. */\n\n      _this11._triggerFontSize = 0;\n      /** The value of the select panel's transform-origin property. */\n\n      _this11._transformOrigin = 'top';\n      /**\n       * The y-offset of the overlay panel in relation to the trigger's top start corner.\n       * This must be adjusted to align the selected option text over the trigger text.\n       * when the panel opens. Will change based on the y-position of the selected option.\n       */\n\n      _this11._offsetY = 0;\n      _this11._positions = [{\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n      }];\n      return _this11;\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n\n\n    _createClass(MatSelect, [{\n      key: \"_calculateOverlayScroll\",\n      value: function _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        var itemHeight = this._getItemHeight();\n\n        var optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        var halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n\n        var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this12 = this;\n\n        _get(_getPrototypeOf(MatSelect.prototype), \"ngOnInit\", this).call(this);\n\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(function () {\n          if (_this12.panelOpen) {\n            _this12._triggerRect = _this12.trigger.nativeElement.getBoundingClientRect();\n\n            _this12._changeDetectorRef.markForCheck();\n          }\n        });\n      }\n    }, {\n      key: \"open\",\n      value: function open() {\n        var _this13 = this;\n\n        if (_get(_getPrototypeOf(MatSelect.prototype), \"_canOpen\", this).call(this)) {\n          _get(_getPrototypeOf(MatSelect.prototype), \"open\", this).call(this);\n\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n          // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n          this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n          this._calculateOverlayPosition(); // Set the font size on the panel element once it exists.\n\n\n          this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n            if (_this13._triggerFontSize && _this13._overlayDir.overlayRef && _this13._overlayDir.overlayRef.overlayElement) {\n              _this13._overlayDir.overlayRef.overlayElement.style.fontSize = \"\".concat(_this13._triggerFontSize, \"px\");\n            }\n          });\n        }\n      }\n      /** Scrolls the active option into view. */\n\n    }, {\n      key: \"_scrollOptionIntoView\",\n      value: function _scrollOptionIntoView(index) {\n        var labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n\n        var itemHeight = this._getItemHeight();\n\n        if (index === 0 && labelCount === 1) {\n          // If we've got one group label before the option and we're at the top option,\n          // scroll the list to the top. This is better UX than scrolling the list to the\n          // top of the option, because it allows the user to read the top group's label.\n          this.panel.nativeElement.scrollTop = 0;\n        } else {\n          this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n      }\n    }, {\n      key: \"_positioningSettled\",\n      value: function _positioningSettled() {\n        this._calculateOverlayOffsetX();\n\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n      }\n    }, {\n      key: \"_panelDoneAnimating\",\n      value: function _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n        } else {\n          this._overlayDir.offsetX = 0;\n\n          this._changeDetectorRef.markForCheck();\n        }\n\n        _get(_getPrototypeOf(MatSelect.prototype), \"_panelDoneAnimating\", this).call(this, isOpen);\n      }\n    }, {\n      key: \"_getChangeEvent\",\n      value: function _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n      }\n      /**\n       * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n       * This must be adjusted to align the selected option text over the trigger text when\n       * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n       * can't be calculated until the panel has been attached, because we need to know the\n       * content width in order to constrain the panel within the viewport.\n       */\n\n    }, {\n      key: \"_calculateOverlayOffsetX\",\n      value: function _calculateOverlayOffsetX() {\n        var overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n\n        var viewportSize = this._viewportRuler.getViewportSize();\n\n        var isRtl = this._isRtl();\n\n        var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n        var offsetX; // Adjust the offset, depending on the option padding.\n\n        if (this.multiple) {\n          offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        } else if (this.disableOptionCentering) {\n          offsetX = SELECT_PANEL_PADDING_X;\n        } else {\n          var selected = this._selectionModel.selected[0] || this.options.first;\n          offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        } // Invert the offset in LTR.\n\n\n        if (!isRtl) {\n          offsetX *= -1;\n        } // Determine how much the select overflows on each side.\n\n\n        var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        var rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n        if (leftOverflow > 0) {\n          offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n          offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n\n\n        this._overlayDir.offsetX = Math.round(offsetX);\n\n        this._overlayDir.overlayRef.updatePosition();\n      }\n      /**\n       * Calculates the y-offset of the select's overlay panel in relation to the\n       * top start corner of the trigger. It has to be adjusted in order for the\n       * selected option to be aligned over the trigger when the panel opens.\n       */\n\n    }, {\n      key: \"_calculateOverlayOffsetY\",\n      value: function _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        var itemHeight = this._getItemHeight();\n\n        var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        var optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n        if (this.disableOptionCentering) {\n          return 0;\n        }\n\n        if (this._scrollTop === 0) {\n          optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        } else if (this._scrollTop === maxScroll) {\n          var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n          var selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what\n          // portion of it is shown in the viewport and account for it in our offset.\n\n          var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n          // there is always extra padding at the top or bottom of the panel. When\n          // scrolled to the very bottom, this padding is at the top of the panel and\n          // must be added to the offset.\n\n          optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        } else {\n          // If the option was scrolled to the middle of the panel using a scroll buffer,\n          // its offset will be the scroll buffer minus the half height that was added to\n          // center it.\n          optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        } // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n\n\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n      }\n      /**\n       * Checks that the attempted overlay position will fit within the viewport.\n       * If it will not fit, tries to adjust the scroll position and the associated\n       * y-offset so the panel can open fully on-screen. If it still won't fit,\n       * sets the offset back to 0 to allow the fallback position to take over.\n       */\n\n    }, {\n      key: \"_checkOverlayWithinViewport\",\n      value: function _checkOverlayWithinViewport(maxScroll) {\n        var itemHeight = this._getItemHeight();\n\n        var viewportSize = this._viewportRuler.getViewportSize();\n\n        var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        var panelHeightTop = Math.abs(this._offsetY);\n        var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n          this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n          this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n          this._transformOrigin = this._getOriginBasedOnOption();\n        }\n      }\n      /** Adjusts the overlay panel up to fit in the viewport. */\n\n    }, {\n      key: \"_adjustPanelUp\",\n      value: function _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n\n        if (this._scrollTop <= 0) {\n          this._scrollTop = 0;\n          this._offsetY = 0;\n          this._transformOrigin = \"50% bottom 0px\";\n        }\n      }\n      /** Adjusts the overlay panel down to fit in the viewport. */\n\n    }, {\n      key: \"_adjustPanelDown\",\n      value: function _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n\n        if (this._scrollTop >= maxScroll) {\n          this._scrollTop = maxScroll;\n          this._offsetY = 0;\n          this._transformOrigin = \"50% top 0px\";\n          return;\n        }\n      }\n      /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n\n    }, {\n      key: \"_calculateOverlayPosition\",\n      value: function _calculateOverlayPosition() {\n        var itemHeight = this._getItemHeight();\n\n        var items = this._getItemCount();\n\n        var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        var scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom\n\n        var maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.\n\n        var selectedOptionOffset;\n\n        if (this.empty) {\n          selectedOptionOffset = 0;\n        } else {\n          selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n\n        var scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n        this._checkOverlayWithinViewport(maxScroll);\n      }\n      /** Sets the transform origin point based on the selected option. */\n\n    }, {\n      key: \"_getOriginBasedOnOption\",\n      value: function _getOriginBasedOnOption() {\n        var itemHeight = this._getItemHeight();\n\n        var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return \"50% \".concat(originY, \"px 0px\");\n      }\n      /** Calculates the height of the select's options. */\n\n    }, {\n      key: \"_getItemHeight\",\n      value: function _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n      }\n      /** Calculates the amount of items in the select. This includes options and group labels. */\n\n    }, {\n      key: \"_getItemCount\",\n      value: function _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n      }\n    }]);\n\n    return MatSelect;\n  }(_MatSelectBase);\n\n  MatSelect.ɵfac = /*@__PURE__*/function () {\n    var ɵMatSelect_BaseFactory;\n    return function MatSelect_Factory(t) {\n      return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect);\n    };\n  }();\n\n  MatSelect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSelect,\n    selectors: [[\"mat-select\"]],\n    contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"],\n    hostVars: 20,\n    hostBindings: function MatSelect_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n          return ctx._onFocus();\n        })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matSelect\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatSelect\n    }, {\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatSelect\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c3,\n    decls: 9,\n    vars: 12,\n    consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n    template: function MatSelect_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n          return ctx.toggle();\n        });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n          return ctx.close();\n        })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n          return ctx._onAttached();\n        })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n          return ctx.close();\n        });\n      }\n\n      if (rf & 2) {\n        var _r0 = ɵngcc0.ɵɵreference(1);\n\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n      }\n    },\n    directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc8.NgSwitchDefault, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgClass],\n    styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n    },\n    changeDetection: 0\n  });\n  return MatSelect;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSelectModule = /*#__PURE__*/(function () {\n  var MatSelectModule = /*#__PURE__*/_createClass(function MatSelectModule() {\n    _classCallCheck(this, MatSelectModule);\n  });\n\n  MatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n    return new (t || MatSelectModule)();\n  };\n\n  MatSelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatSelectModule\n  });\n  MatSelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n    imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n  });\n  return MatSelectModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, {\n    declarations: function declarations() {\n      return [MatSelect, MatSelectTrigger];\n    },\n    imports: function imports() {\n      return [CommonModule, OverlayModule, MatOptionModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };","map":{"version":3,"names":["Overlay","CdkConnectedOverlay","OverlayModule","CommonModule","InjectionToken","Directive","EventEmitter","ChangeDetectorRef","NgZone","ElementRef","Optional","Inject","Self","Attribute","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","ErrorStateMatcher","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","MatFormField","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","ViewportRuler","CdkScrollableModule","ActiveDescendantKeyManager","LiveAnnouncer","Directionality","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","NgForm","FormGroupDirective","NgControl","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","ɵngcc8","_c0","_c1","MatSelect_span_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","ɵɵprojection","MatSelect_span_5_Template","ɵɵtemplate","ctx_r3","ɵɵproperty","customTrigger","MatSelect_ng_template_8_Template","_r9","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener","$event","ɵɵrestoreView","ctx_r8","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_1_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵstyleProp","_transformOrigin","_triggerFontSize","panelClass","multiple","ɵɵattribute","id","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","source","value","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","features","ɵɵProvidersFeature","useExisting","ngDevMode","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_required","_multiple","_disableOptionCentering","disableOptionCentering","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","_placeholder","stateChanges","_selectionModel","fn","_initializeSelection","_value","newValue","Array","isArray","_setSelectionByValue","_id","subscribe","_panelDoneAnimating","panelOpen","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","_keyManager","withTypeAhead","complete","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","isDisabled","disabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","setInactiveStyles","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","labelId","getLabelId","labelExpression","ariaLabelledby","isOpen","ids","_ariaDescribedby","_MatSelectBase_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","viewQuery","_MatSelectBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","required","compareWith","errorStateMatcher","outputs","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","MatSelect","arguments","_scrollTop","_offsetY","_positions","originX","originY","overlayX","overlayY","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","ɵMatSelect_BaseFactory","MatSelect_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","_onFocus","MatSelect_blur_HostBindingHandler","_onBlur","toString","errorState","_getAriaActiveDescendant","ɵɵclassProp","disableRipple","exportAs","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","toggle","ɵɵelement","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","_onAttached","MatSelect_Template_ng_template_detach_8_listener","_r0","ɵɵreference","directives","CdkOverlayOrigin","NgSwitch","NgSwitchCase","NgSwitchDefault","NgClass","styles","encapsulation","data","animation","changeDetection","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js"],"sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/common';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._required = false;\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = (labelId ? labelId + ' ' : '');\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) { return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\n_MatSelectBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatSelectBase, viewQuery: function _MatSelectBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatSelectBase.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\n_MatSelectBase.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    _overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    panelClass: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], _overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], panelClass: [{\n            type: Input\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize =\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize && this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset =\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = /*@__PURE__*/ function () { let ɵMatSelect_BaseFactory; return function MatSelect_Factory(t) { return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect); }; }();\nMatSelect.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 9, vars: 12, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc8.NgSwitchDefault, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.propDecorators = {\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'combobox',\n                    'aria-autocomplete': 'none',\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                    // value. At some point we should try to switch it back to being `listbox`.\n                    'aria-haspopup': 'true',\n                    'class': 'mat-select',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                    '[attr.aria-expanded]': 'panelOpen',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    '[class.mat-select-multiple]': 'multiple',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"]\n            }]\n    }], null, { options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}