{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { RoomService } from '../../../../services/room.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../../../services/room.service\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/select\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/button\";\n\nfunction RoomDialogComponent_mat_option_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var roomType_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", roomType_r1.Id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", roomType_r1.name, \" \");\n  }\n}\n\nexport var RoomDialogComponent = /*#__PURE__*/function () {\n  function RoomDialogComponent(dialog, fb, dialogRef, data, roomService) {\n    _classCallCheck(this, RoomDialogComponent);\n\n    this.dialog = dialog;\n    this.fb = fb;\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.roomService = roomService;\n    this.roomsType = [];\n    this.isEditable = false;\n  }\n\n  _createClass(RoomDialogComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var edit;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                edit = this.data.edit;\n                this.isEditable = edit;\n                _context.next = 4;\n                return this.getRoomsTypes();\n\n              case 4:\n                console.log(this.data);\n                this.formCentre = this.fb.group({\n                  roomNumber: [\"\", Validators.required],\n                  roomName: [\"\", Validators.required],\n                  typeId: [\"\", Validators.required]\n                });\n                edit == true ? this.populateForm(this.data.room) : \"\";\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit() {\n      var _this = this;\n\n      console.log(this.formCentre.valid);\n\n      if (this.formCentre.valid) {\n        console.error(this.formCentre.valid);\n\n        if (this.data.edit == true) {\n          this.roomService.updateRoom(this.formCentre.value, this.data.centre.CentreId).subscribe(function (data) {\n            _this.Close();\n          });\n        } else {\n          this.roomService.AddRoom(this.formCentre.value).subscribe(function (data) {\n            console.error(data);\n\n            _this.Close();\n          }, function (err) {\n            console.error(err);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"getRoomsTypes\",\n    value: function getRoomsTypes() {\n      var _this2 = this;\n\n      this.roomService.getRoomsTypes().subscribe(function (res) {\n        console.log(res);\n        _this2.roomsType = res;\n      });\n    }\n  }, {\n    key: \"populateForm\",\n    value: function populateForm(data) {\n      this.formCentre.patchValue({\n        roomName: data.roomName,\n        roomNumber: data.roomNumber,\n        typeId: data.typeId\n      });\n    }\n  }, {\n    key: \"Close\",\n    value: function Close() {\n      this.dialog.closeAll();\n    }\n  }]);\n\n  return RoomDialogComponent;\n}();\n\nRoomDialogComponent.ɵfac = function RoomDialogComponent_Factory(t) {\n  return new (t || RoomDialogComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i3.RoomService));\n};\n\nRoomDialogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RoomDialogComponent,\n  selectors: [[\"app-RoomDialog\"]],\n  decls: 25,\n  vars: 3,\n  consts: [[\"mat-dialog-title\", \"\", \"align\", \"center\"], [\"autocomplete\", \"off\", 1, \"example-form\", 3, \"formGroup\", \"submit\"], [\"mat-dialog-content\", \"\"], [\"appearance\", \"fill\", 1, \"example-full-width\"], [\"matInput\", \"\", \"placeholder\", \"ex. Midrand c\", \"formControlName\", \"roomNumber\"], [\"matInput\", \"\", \"placeholder\", \"\", \"formControlName\", \"roomName\"], [\"appearance\", \"fill\"], [\"formControlName\", \"typeId\", \"required\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-dialog-actions\", \"\", \"align\", \"end\"], [\"mat-stroked-button\", \"\", \"type\", \"submit\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\"], [3, \"value\"]],\n  template: function RoomDialogComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"submit\", function RoomDialogComponent_Template_form_submit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelement(3, \"div\", 2);\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"mat-form-field\", 3)(6, \"mat-label\");\n      i0.ɵɵtext(7, \"Room Number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"mat-form-field\", 3)(10, \"mat-label\");\n      i0.ɵɵtext(11, \"Room Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"mat-form-field\", 6)(14, \"mat-label\");\n      i0.ɵɵtext(15, \"Choose Room Type\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"mat-select\", 7)(17, \"mat-option\");\n      i0.ɵɵtext(18, \"--\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(19, RoomDialogComponent_mat_option_19_Template, 2, 2, \"mat-option\", 8);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(20, \"div\", 9)(21, \"button\", 10);\n      i0.ɵɵtext(22, \"Confirm\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"button\", 11);\n      i0.ɵɵlistener(\"click\", function RoomDialogComponent_Template_button_click_23_listener() {\n        return ctx.Close();\n      });\n      i0.ɵɵtext(24, \"Cancel\");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.isEditable ? \"Editable\" : \"Add New Room\", \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.formCentre);\n      i0.ɵɵadvance(17);\n      i0.ɵɵproperty(\"ngForOf\", ctx.roomsType);\n    }\n  },\n  directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i6.MatSelect, i2.RequiredValidator, i7.MatOption, i8.NgForOf, i9.MatButton],\n  styles: [\"\"]\n});","map":null,"metadata":{},"sourceType":"module"}