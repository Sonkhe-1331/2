{"ast":null,"code":"import _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, forwardRef, ElementRef, NgZone, EventEmitter, Optional, Input, HostBinding, Output, HostListener, QueryList, ContentChildren, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/common';\nvar _c0 = [\"*\"];\n\nfunction MatDrawerContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-drawer-content\");\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c1 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nvar _c2 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\n\nfunction MatSidenavContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-sidenav-content\", 3);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c3 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nvar _c4 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nvar _c5 = \".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\";\nvar matDrawerAnimations = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: /*#__PURE__*/trigger('transform', [\n  /*#__PURE__*/\n  // We remove the `transform` here completely, rather than setting it to zero, because:\n  // 1. Having a transform can cause elements with ripples or an animated\n  //    transform to shift around in Chrome with an RTL layout (see #10023).\n  // 2. 3d transforms causes text to appear blurry on IE and Edge.\n  state('open, open-instant', /*#__PURE__*/style({\n    'transform': 'none',\n    'visibility': 'visible'\n  })), /*#__PURE__*/state('void', /*#__PURE__*/style({\n    // Avoids the shadow showing up when closed in SSR.\n    'box-shadow': 'none',\n    'visibility': 'hidden'\n  })), /*#__PURE__*/transition('void => open-instant', /*#__PURE__*/animate('0ms')), /*#__PURE__*/transition('void <=> open, open-instant => void', /*#__PURE__*/animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))])\n};\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\n\nfunction throwMatDuplicatedDrawerError(position) {\n  throw Error(\"A drawer was already declared for 'position=\\\"\".concat(position, \"\\\"'\"));\n}\n/** Configures whether drawers should use auto sizing by default. */\n\n\nvar MAT_DRAWER_DEFAULT_AUTOSIZE = /*#__PURE__*/new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n  providedIn: 'root',\n  factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\n\nvar MAT_DRAWER_CONTAINER = /*#__PURE__*/new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\n\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n  return false;\n}\n\nvar MatDrawerContent = /*#__PURE__*/(function () {\n  var MatDrawerContent = /*#__PURE__*/function (_CdkScrollable) {\n    _inherits(MatDrawerContent, _CdkScrollable);\n\n    var _super = _createSuper(MatDrawerContent);\n\n    function MatDrawerContent(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n      var _this;\n\n      _classCallCheck(this, MatDrawerContent);\n\n      _this = _super.call(this, elementRef, scrollDispatcher, ngZone);\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._container = _container;\n      return _this;\n    }\n\n    _createClass(MatDrawerContent, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this2 = this;\n\n        this._container._contentMarginChanges.subscribe(function () {\n          _this2._changeDetectorRef.markForCheck();\n        });\n      }\n    }]);\n\n    return MatDrawerContent;\n  }(CdkScrollable);\n\n  MatDrawerContent.ɵfac = function MatDrawerContent_Factory(t) {\n    return new (t || MatDrawerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n      return MatDrawerContainer;\n    })), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MatDrawerContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatDrawerContent,\n    selectors: [[\"mat-drawer-content\"]],\n    hostAttrs: [1, \"mat-drawer-content\"],\n    hostVars: 4,\n    hostBindings: function MatDrawerContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatDrawerContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatDrawerContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n\n\nvar MatDrawer = /*#__PURE__*/(function () {\n  var MatDrawer = /*#__PURE__*/function () {\n    function MatDrawer(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {\n      var _this3 = this;\n\n      _classCallCheck(this, MatDrawer);\n\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      this._focusMonitor = _focusMonitor;\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._doc = _doc;\n      this._container = _container;\n      this._elementFocusedBeforeDrawerWasOpened = null;\n      /** Whether the drawer is initialized. Used for disabling the initial animation. */\n\n      this._enableAnimations = false;\n      this._position = 'start';\n      this._mode = 'over';\n      this._disableClose = false;\n      this._opened = false;\n      /** Emits whenever the drawer has started animating. */\n\n      this._animationStarted = new Subject();\n      /** Emits whenever the drawer is done animating. */\n\n      this._animationEnd = new Subject();\n      /** Current state of the sidenav animation. */\n      // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n      // metadata is not inherited by child classes, instead the host binding data is defined in a way\n      // that can be inherited.\n      // tslint:disable-next-line:no-host-decorator-in-concrete\n\n      this._animationState = 'void';\n      /** Event emitted when the drawer open state is changed. */\n\n      this.openedChange = // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter(\n      /* isAsync */\n      true);\n      /** Event emitted when the drawer has been opened. */\n\n      this._openedStream = this.openedChange.pipe(filter(function (o) {\n        return o;\n      }), map(function () {}));\n      /** Event emitted when the drawer has started opening. */\n\n      this.openedStart = this._animationStarted.pipe(filter(function (e) {\n        return e.fromState !== e.toState && e.toState.indexOf('open') === 0;\n      }), mapTo(undefined));\n      /** Event emitted when the drawer has been closed. */\n\n      this._closedStream = this.openedChange.pipe(filter(function (o) {\n        return !o;\n      }), map(function () {}));\n      /** Event emitted when the drawer has started closing. */\n\n      this.closedStart = this._animationStarted.pipe(filter(function (e) {\n        return e.fromState !== e.toState && e.toState === 'void';\n      }), mapTo(undefined));\n      /** Emits when the component is destroyed. */\n\n      this._destroyed = new Subject();\n      /** Event emitted when the drawer's position changes. */\n      // tslint:disable-next-line:no-output-on-prefix\n\n      this.onPositionChanged = new EventEmitter();\n      /**\n       * An observable that emits when the drawer mode changes. This is used by the drawer container to\n       * to know when to when the mode changes so it can adapt the margins on the content.\n       */\n\n      this._modeChanged = new Subject();\n      this.openedChange.subscribe(function (opened) {\n        if (opened) {\n          if (_this3._doc) {\n            _this3._elementFocusedBeforeDrawerWasOpened = _this3._doc.activeElement;\n          }\n\n          _this3._takeFocus();\n        } else if (_this3._isFocusWithinDrawer()) {\n          _this3._restoreFocus();\n        }\n      });\n      /**\n       * Listen to `keydown` events outside the zone so that change detection is not run every\n       * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n       * and we don't have close disabled.\n       */\n\n      this._ngZone.runOutsideAngular(function () {\n        fromEvent(_this3._elementRef.nativeElement, 'keydown').pipe(filter(function (event) {\n          return event.keyCode === ESCAPE && !_this3.disableClose && !hasModifierKey(event);\n        }), takeUntil(_this3._destroyed)).subscribe(function (event) {\n          return _this3._ngZone.run(function () {\n            _this3.close();\n\n            event.stopPropagation();\n            event.preventDefault();\n          });\n        });\n      }); // We need a Subject with distinctUntilChanged, because the `done` event\n      // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n\n      this._animationEnd.pipe(distinctUntilChanged(function (x, y) {\n        return x.fromState === y.fromState && x.toState === y.toState;\n      })).subscribe(function (event) {\n        var fromState = event.fromState,\n            toState = event.toState;\n\n        if (toState.indexOf('open') === 0 && fromState === 'void' || toState === 'void' && fromState.indexOf('open') === 0) {\n          _this3.openedChange.emit(_this3._opened);\n        }\n      });\n    }\n    /** The side that the drawer is attached to. */\n\n\n    _createClass(MatDrawer, [{\n      key: \"position\",\n      get: function get() {\n        return this._position;\n      },\n      set: function set(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n\n        if (value != this._position) {\n          this._position = value;\n          this.onPositionChanged.emit();\n        }\n      }\n      /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n\n    }, {\n      key: \"mode\",\n      get: function get() {\n        return this._mode;\n      },\n      set: function set(value) {\n        this._mode = value;\n\n        this._updateFocusTrapState();\n\n        this._modeChanged.next();\n      }\n      /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n\n    }, {\n      key: \"disableClose\",\n      get: function get() {\n        return this._disableClose;\n      },\n      set: function set(value) {\n        this._disableClose = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether the drawer should focus the first focusable element automatically when opened.\n       * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n       * enabled, focus will be moved into the sidenav in `side` mode as well.\n       */\n\n    }, {\n      key: \"autoFocus\",\n      get: function get() {\n        var value = this._autoFocus; // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n        // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n        // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n\n        return value == null ? this.mode !== 'side' : value;\n      },\n      set: function set(value) {\n        this._autoFocus = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether the drawer is opened. We overload this because we trigger an event when it\n       * starts or end.\n       */\n\n    }, {\n      key: \"opened\",\n      get: function get() {\n        return this._opened;\n      },\n      set: function set(value) {\n        this.toggle(coerceBooleanProperty(value));\n      }\n      /**\n       * Moves focus into the drawer. Note that this works even if\n       * the focus trap is disabled in `side` mode.\n       */\n\n    }, {\n      key: \"_takeFocus\",\n      value: function _takeFocus() {\n        var _this4 = this;\n\n        if (!this.autoFocus || !this._focusTrap) {\n          return;\n        }\n\n        this._focusTrap.focusInitialElementWhenReady().then(function (hasMovedFocus) {\n          // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n          // still works. We need to check that `focus` is a function due to Universal.\n          if (!hasMovedFocus && typeof _this4._elementRef.nativeElement.focus === 'function') {\n            _this4._elementRef.nativeElement.focus();\n          }\n        });\n      }\n      /**\n       * Restores focus to the element that was originally focused when the drawer opened.\n       * If no element was focused at that time, the focus will be restored to the drawer.\n       */\n\n    }, {\n      key: \"_restoreFocus\",\n      value: function _restoreFocus() {\n        if (!this.autoFocus) {\n          return;\n        } // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n\n\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n          this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n        } else {\n          this._elementRef.nativeElement.blur();\n        }\n\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        this._openedVia = null;\n      }\n      /** Whether focus is currently within the drawer. */\n\n    }, {\n      key: \"_isFocusWithinDrawer\",\n      value: function _isFocusWithinDrawer() {\n        var _a;\n\n        var activeEl = (_a = this._doc) === null || _a === void 0 ? void 0 : _a.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n\n        this._updateFocusTrapState();\n      }\n    }, {\n      key: \"ngAfterContentChecked\",\n      value: function ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n          this._enableAnimations = true;\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._focusTrap) {\n          this._focusTrap.destroy();\n        }\n\n        this._animationStarted.complete();\n\n        this._animationEnd.complete();\n\n        this._modeChanged.complete();\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /**\n       * Open the drawer.\n       * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n       * Used for focus management after the sidenav is closed.\n       */\n\n    }, {\n      key: \"open\",\n      value: function open(openedVia) {\n        return this.toggle(true, openedVia);\n      }\n      /** Close the drawer. */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        return this.toggle(false);\n      }\n      /** Closes the drawer with context that the backdrop was clicked. */\n\n    }, {\n      key: \"_closeViaBackdropClick\",\n      value: function _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurring of the active element.\n        return this._setOpen(\n        /* isOpen */\n        false,\n        /* restoreFocus */\n        true);\n      }\n      /**\n       * Toggle this drawer.\n       * @param isOpen Whether the drawer should be open.\n       * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n       * Used for focus management after the sidenav is closed.\n       */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        var isOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.opened;\n        var openedVia = arguments.length > 1 ? arguments[1] : undefined;\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        return this._setOpen(isOpen,\n        /* restoreFocus */\n        !isOpen && this._isFocusWithinDrawer(), openedVia);\n      }\n      /**\n       * Toggles the opened state of the drawer.\n       * @param isOpen Whether the drawer should open or close.\n       * @param restoreFocus Whether focus should be restored on close.\n       * @param openedVia Focus origin that can be optionally set when opening a drawer. The\n       *   origin will be used later when focus is restored on drawer close.\n       */\n\n    }, {\n      key: \"_setOpen\",\n      value: function _setOpen(isOpen, restoreFocus) {\n        var _this5 = this;\n\n        var openedVia = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'program';\n        this._opened = isOpen;\n\n        if (isOpen) {\n          this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n          this._openedVia = openedVia;\n        } else {\n          this._animationState = 'void';\n\n          if (restoreFocus) {\n            this._restoreFocus();\n          }\n        }\n\n        this._updateFocusTrapState();\n\n        return new Promise(function (resolve) {\n          _this5.openedChange.pipe(take(1)).subscribe(function (open) {\n            return resolve(open ? 'open' : 'close');\n          });\n        });\n      }\n    }, {\n      key: \"_getWidth\",\n      value: function _getWidth() {\n        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n      }\n      /** Updates the enabled state of the focus trap. */\n\n    }, {\n      key: \"_updateFocusTrapState\",\n      value: function _updateFocusTrapState() {\n        if (this._focusTrap) {\n          // The focus trap is only enabled when the drawer is open in any mode other than side.\n          this._focusTrap.enabled = this.opened && this.mode !== 'side';\n        }\n      } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n      // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n      // ViewEngine they're overwritten.\n      // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n      // tslint:disable-next-line:no-host-decorator-in-concrete\n\n    }, {\n      key: \"_animationStartListener\",\n      value: function _animationStartListener(event) {\n        this._animationStarted.next(event);\n      } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n      // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n      // ViewEngine they're overwritten.\n      // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n      // tslint:disable-next-line:no-host-decorator-in-concrete\n\n    }, {\n      key: \"_animationDoneListener\",\n      value: function _animationDoneListener(event) {\n        this._animationEnd.next(event);\n      }\n    }]);\n\n    return MatDrawer;\n  }();\n\n  MatDrawer.ɵfac = function MatDrawer_Factory(t) {\n    return new (t || MatDrawer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_CONTAINER, 8));\n  };\n\n  MatDrawer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatDrawer,\n    selectors: [[\"mat-drawer\"]],\n    hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\"],\n    hostVars: 12,\n    hostBindings: function MatDrawer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) {\n          return ctx._animationStartListener($event);\n        })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) {\n          return ctx._animationDoneListener($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened);\n      }\n    },\n    inputs: {\n      position: \"position\",\n      mode: \"mode\",\n      disableClose: \"disableClose\",\n      autoFocus: \"autoFocus\",\n      opened: \"opened\"\n    },\n    outputs: {\n      openedChange: \"openedChange\",\n      _openedStream: \"opened\",\n      openedStart: \"openedStart\",\n      _closedStream: \"closed\",\n      closedStart: \"closedStart\",\n      onPositionChanged: \"positionChanged\"\n    },\n    exportAs: [\"matDrawer\"],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"]],\n    template: function MatDrawer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    directives: [ɵngcc1.CdkScrollable],\n    encapsulation: 2,\n    data: {\n      animation: [matDrawerAnimations.transformDrawer]\n    },\n    changeDetection: 0\n  });\n  return MatDrawer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n\n\nvar MatDrawerContainer = /*#__PURE__*/(function () {\n  var MatDrawerContainer = /*#__PURE__*/function () {\n    function MatDrawerContainer(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler) {\n      var _this6 = this;\n\n      var defaultAutosize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n      var _animationMode = arguments.length > 6 ? arguments[6] : undefined;\n\n      _classCallCheck(this, MatDrawerContainer);\n\n      this._dir = _dir;\n      this._element = _element;\n      this._ngZone = _ngZone;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._animationMode = _animationMode;\n      /** Drawers that belong to this container. */\n\n      this._drawers = new QueryList();\n      /** Event emitted when the drawer backdrop is clicked. */\n\n      this.backdropClick = new EventEmitter();\n      /** Emits when the component is destroyed. */\n\n      this._destroyed = new Subject();\n      /** Emits on every ngDoCheck. Used for debouncing reflows. */\n\n      this._doCheckSubject = new Subject();\n      /**\n       * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n       * drawer is open. We use margin rather than transform even for push mode because transform breaks\n       * fixed position elements inside of the transformed element.\n       */\n\n      this._contentMargins = {\n        left: null,\n        right: null\n      };\n      this._contentMarginChanges = new Subject(); // If a `Dir` directive exists up the tree, listen direction changes\n      // and update the left/right properties to point to the proper start/end.\n\n      if (_dir) {\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          _this6._validateDrawers();\n\n          _this6.updateContentMargins();\n        });\n      } // Since the minimum width of the sidenav depends on the viewport width,\n      // we need to recompute the margins if the viewport changes.\n\n\n      viewportRuler.change().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this6.updateContentMargins();\n      });\n      this._autosize = defaultAutosize;\n    }\n    /** The drawer child with the `start` position. */\n\n\n    _createClass(MatDrawerContainer, [{\n      key: \"start\",\n      get: function get() {\n        return this._start;\n      }\n      /** The drawer child with the `end` position. */\n\n    }, {\n      key: \"end\",\n      get: function get() {\n        return this._end;\n      }\n      /**\n       * Whether to automatically resize the container whenever\n       * the size of any of its drawers changes.\n       *\n       * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n       * the drawers on every change detection cycle. Can be configured globally via the\n       * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n       */\n\n    }, {\n      key: \"autosize\",\n      get: function get() {\n        return this._autosize;\n      },\n      set: function set(value) {\n        this._autosize = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n       * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n       * mode as well.\n       */\n\n    }, {\n      key: \"hasBackdrop\",\n      get: function get() {\n        if (this._backdropOverride == null) {\n          return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n\n        return this._backdropOverride;\n      },\n      set: function set(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n      }\n      /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n\n    }, {\n      key: \"scrollable\",\n      get: function get() {\n        return this._userContent || this._content;\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this7 = this;\n\n        this._allDrawers.changes.pipe(startWith(this._allDrawers), takeUntil(this._destroyed)).subscribe(function (drawer) {\n          _this7._drawers.reset(drawer.filter(function (item) {\n            return !item._container || item._container === _this7;\n          }));\n\n          _this7._drawers.notifyOnChanges();\n        });\n\n        this._drawers.changes.pipe(startWith(null)).subscribe(function () {\n          _this7._validateDrawers();\n\n          _this7._drawers.forEach(function (drawer) {\n            _this7._watchDrawerToggle(drawer);\n\n            _this7._watchDrawerPosition(drawer);\n\n            _this7._watchDrawerMode(drawer);\n          });\n\n          if (!_this7._drawers.length || _this7._isDrawerOpen(_this7._start) || _this7._isDrawerOpen(_this7._end)) {\n            _this7.updateContentMargins();\n          }\n\n          _this7._changeDetectorRef.markForCheck();\n        }); // Avoid hitting the NgZone through the debounce timeout.\n\n\n        this._ngZone.runOutsideAngular(function () {\n          _this7._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n          takeUntil(_this7._destroyed)).subscribe(function () {\n            return _this7.updateContentMargins();\n          });\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._contentMarginChanges.complete();\n\n        this._doCheckSubject.complete();\n\n        this._drawers.destroy();\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /** Calls `open` of both start and end drawers */\n\n    }, {\n      key: \"open\",\n      value: function open() {\n        this._drawers.forEach(function (drawer) {\n          return drawer.open();\n        });\n      }\n      /** Calls `close` of both start and end drawers */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        this._drawers.forEach(function (drawer) {\n          return drawer.close();\n        });\n      }\n      /**\n       * Recalculates and updates the inline styles for the content. Note that this should be used\n       * sparingly, because it causes a reflow.\n       */\n\n    }, {\n      key: \"updateContentMargins\",\n      value: function updateContentMargins() {\n        var _this8 = this;\n\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        var left = 0;\n        var right = 0;\n\n        if (this._left && this._left.opened) {\n          if (this._left.mode == 'side') {\n            left += this._left._getWidth();\n          } else if (this._left.mode == 'push') {\n            var width = this._left._getWidth();\n\n            left += width;\n            right -= width;\n          }\n        }\n\n        if (this._right && this._right.opened) {\n          if (this._right.mode == 'side') {\n            right += this._right._getWidth();\n          } else if (this._right.mode == 'push') {\n            var _width = this._right._getWidth();\n\n            right += _width;\n            left -= _width;\n          }\n        } // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n\n\n        left = left || null;\n        right = right || null;\n\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n          this._contentMargins = {\n            left: left,\n            right: right\n          }; // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n          // to do it only when something changed, otherwise we can end up hitting the zone too often.\n\n          this._ngZone.run(function () {\n            return _this8._contentMarginChanges.next(_this8._contentMargins);\n          });\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        var _this9 = this;\n\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n          // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n          this._ngZone.runOutsideAngular(function () {\n            return _this9._doCheckSubject.next();\n          });\n        }\n      }\n      /**\n       * Subscribes to drawer events in order to set a class on the main container element when the\n       * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n       * is properly hidden.\n       */\n\n    }, {\n      key: \"_watchDrawerToggle\",\n      value: function _watchDrawerToggle(drawer) {\n        var _this10 = this;\n\n        drawer._animationStarted.pipe(filter(function (event) {\n          return event.fromState !== event.toState;\n        }), takeUntil(this._drawers.changes)).subscribe(function (event) {\n          // Set the transition class on the container so that the animations occur. This should not\n          // be set initially because animations should only be triggered via a change in state.\n          if (event.toState !== 'open-instant' && _this10._animationMode !== 'NoopAnimations') {\n            _this10._element.nativeElement.classList.add('mat-drawer-transition');\n          }\n\n          _this10.updateContentMargins();\n\n          _this10._changeDetectorRef.markForCheck();\n        });\n\n        if (drawer.mode !== 'side') {\n          drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n            return _this10._setContainerClass(drawer.opened);\n          });\n        }\n      }\n      /**\n       * Subscribes to drawer onPositionChanged event in order to\n       * re-validate drawers when the position changes.\n       */\n\n    }, {\n      key: \"_watchDrawerPosition\",\n      value: function _watchDrawerPosition(drawer) {\n        var _this11 = this;\n\n        if (!drawer) {\n          return;\n        } // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n\n\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n          _this11._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(function () {\n            _this11._validateDrawers();\n          });\n        });\n      }\n      /** Subscribes to changes in drawer mode so we can run change detection. */\n\n    }, {\n      key: \"_watchDrawerMode\",\n      value: function _watchDrawerMode(drawer) {\n        var _this12 = this;\n\n        if (drawer) {\n          drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(function () {\n            _this12.updateContentMargins();\n\n            _this12._changeDetectorRef.markForCheck();\n          });\n        }\n      }\n      /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n\n    }, {\n      key: \"_setContainerClass\",\n      value: function _setContainerClass(isAdd) {\n        var classList = this._element.nativeElement.classList;\n        var className = 'mat-drawer-container-has-open';\n\n        if (isAdd) {\n          classList.add(className);\n        } else {\n          classList.remove(className);\n        }\n      }\n      /** Validate the state of the drawer children components. */\n\n    }, {\n      key: \"_validateDrawers\",\n      value: function _validateDrawers() {\n        var _this13 = this;\n\n        this._start = this._end = null; // Ensure that we have at most one start and one end drawer.\n\n        this._drawers.forEach(function (drawer) {\n          if (drawer.position == 'end') {\n            if (_this13._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n              throwMatDuplicatedDrawerError('end');\n            }\n\n            _this13._end = drawer;\n          } else {\n            if (_this13._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n              throwMatDuplicatedDrawerError('start');\n            }\n\n            _this13._start = drawer;\n          }\n        });\n\n        this._right = this._left = null; // Detect if we're LTR or RTL.\n\n        if (this._dir && this._dir.value === 'rtl') {\n          this._left = this._end;\n          this._right = this._start;\n        } else {\n          this._left = this._start;\n          this._right = this._end;\n        }\n      }\n      /** Whether the container is being pushed to the side by one of the drawers. */\n\n    }, {\n      key: \"_isPushed\",\n      value: function _isPushed() {\n        return this._isDrawerOpen(this._start) && this._start.mode != 'over' || this._isDrawerOpen(this._end) && this._end.mode != 'over';\n      }\n    }, {\n      key: \"_onBackdropClicked\",\n      value: function _onBackdropClicked() {\n        this.backdropClick.emit();\n\n        this._closeModalDrawersViaBackdrop();\n      }\n    }, {\n      key: \"_closeModalDrawersViaBackdrop\",\n      value: function _closeModalDrawersViaBackdrop() {\n        var _this14 = this;\n\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end].filter(function (drawer) {\n          return drawer && !drawer.disableClose && _this14._canHaveBackdrop(drawer);\n        }).forEach(function (drawer) {\n          return drawer._closeViaBackdropClick();\n        });\n      }\n    }, {\n      key: \"_isShowingBackdrop\",\n      value: function _isShowingBackdrop() {\n        return this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start) || this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end);\n      }\n    }, {\n      key: \"_canHaveBackdrop\",\n      value: function _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n      }\n    }, {\n      key: \"_isDrawerOpen\",\n      value: function _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n      }\n    }]);\n\n    return MatDrawerContainer;\n  }();\n\n  MatDrawerContainer.ɵfac = function MatDrawerContainer_Factory(t) {\n    return new (t || MatDrawerContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatDrawerContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatDrawerContainer,\n    selectors: [[\"mat-drawer-container\"]],\n    contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawerContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawer, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n      }\n    },\n    viewQuery: function MatDrawerContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatDrawerContent, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-drawer-container\"],\n    hostVars: 2,\n    hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n      }\n    },\n    inputs: {\n      autosize: \"autosize\",\n      hasBackdrop: \"hasBackdrop\"\n    },\n    outputs: {\n      backdropClick: \"backdropClick\"\n    },\n    exportAs: [\"matDrawerContainer\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_DRAWER_CONTAINER,\n      useExisting: MatDrawerContainer\n    }])],\n    ngContentSelectors: _c2,\n    decls: 4,\n    vars: 2,\n    consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]],\n    template: function MatDrawerContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n      }\n    },\n    directives: [ɵngcc5.NgIf, MatDrawerContent],\n    styles: [_c5],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatDrawerContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSidenavContent = /*#__PURE__*/(function () {\n  var MatSidenavContent = /*#__PURE__*/function (_MatDrawerContent) {\n    _inherits(MatSidenavContent, _MatDrawerContent);\n\n    var _super2 = _createSuper(MatSidenavContent);\n\n    function MatSidenavContent(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n      _classCallCheck(this, MatSidenavContent);\n\n      return _super2.call(this, changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n\n    return _createClass(MatSidenavContent);\n  }(MatDrawerContent);\n\n  MatSidenavContent.ɵfac = function MatSidenavContent_Factory(t) {\n    return new (t || MatSidenavContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n      return MatSidenavContainer;\n    })), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MatSidenavContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSidenavContent,\n    selectors: [[\"mat-sidenav-content\"]],\n    hostAttrs: [1, \"mat-drawer-content\", \"mat-sidenav-content\"],\n    hostVars: 4,\n    hostBindings: function MatSidenavContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatSidenavContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatSidenavContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MatSidenav = /*#__PURE__*/(function () {\n  var MatSidenav = /*#__PURE__*/function (_MatDrawer) {\n    _inherits(MatSidenav, _MatDrawer);\n\n    var _super3 = _createSuper(MatSidenav);\n\n    function MatSidenav() {\n      var _this15;\n\n      _classCallCheck(this, MatSidenav);\n\n      _this15 = _super3.apply(this, arguments);\n      _this15._fixedInViewport = false;\n      _this15._fixedTopGap = 0;\n      _this15._fixedBottomGap = 0;\n      return _this15;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n\n\n    _createClass(MatSidenav, [{\n      key: \"fixedInViewport\",\n      get: function get() {\n        return this._fixedInViewport;\n      },\n      set: function set(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n      }\n      /**\n       * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n       * mode.\n       */\n\n    }, {\n      key: \"fixedTopGap\",\n      get: function get() {\n        return this._fixedTopGap;\n      },\n      set: function set(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n      }\n      /**\n       * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n       * fixed mode.\n       */\n\n    }, {\n      key: \"fixedBottomGap\",\n      get: function get() {\n        return this._fixedBottomGap;\n      },\n      set: function set(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n      }\n    }]);\n\n    return MatSidenav;\n  }(MatDrawer);\n\n  MatSidenav.ɵfac = /*@__PURE__*/function () {\n    var ɵMatSidenav_BaseFactory;\n    return function MatSidenav_Factory(t) {\n      return (ɵMatSidenav_BaseFactory || (ɵMatSidenav_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenav)))(t || MatSidenav);\n    };\n  }();\n\n  MatSidenav.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSidenav,\n    selectors: [[\"mat-sidenav\"]],\n    hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\", \"mat-sidenav\"],\n    hostVars: 17,\n    hostBindings: function MatSidenav_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened)(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n      }\n    },\n    inputs: {\n      fixedInViewport: \"fixedInViewport\",\n      fixedTopGap: \"fixedTopGap\",\n      fixedBottomGap: \"fixedBottomGap\"\n    },\n    exportAs: [\"matSidenav\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"]],\n    template: function MatSidenav_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    directives: [ɵngcc1.CdkScrollable],\n    encapsulation: 2,\n    data: {\n      animation: [matDrawerAnimations.transformDrawer]\n    },\n    changeDetection: 0\n  });\n  return MatSidenav;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MatSidenavContainer = /*#__PURE__*/(function () {\n  var MatSidenavContainer = /*#__PURE__*/function (_MatDrawerContainer) {\n    _inherits(MatSidenavContainer, _MatDrawerContainer);\n\n    var _super4 = _createSuper(MatSidenavContainer);\n\n    function MatSidenavContainer() {\n      _classCallCheck(this, MatSidenavContainer);\n\n      return _super4.apply(this, arguments);\n    }\n\n    return _createClass(MatSidenavContainer);\n  }(MatDrawerContainer);\n\n  MatSidenavContainer.ɵfac = /*@__PURE__*/function () {\n    var ɵMatSidenavContainer_BaseFactory;\n    return function MatSidenavContainer_Factory(t) {\n      return (ɵMatSidenavContainer_BaseFactory || (ɵMatSidenavContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenavContainer)))(t || MatSidenavContainer);\n    };\n  }();\n\n  MatSidenavContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSidenavContainer,\n    selectors: [[\"mat-sidenav-container\"]],\n    contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenavContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenav, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-drawer-container\", \"mat-sidenav-container\"],\n    hostVars: 2,\n    hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n      }\n    },\n    exportAs: [\"matSidenavContainer\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_DRAWER_CONTAINER,\n      useExisting: MatSidenavContainer\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c4,\n    decls: 4,\n    vars: 2,\n    consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [\"cdkScrollable\", \"\", 4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"], [\"cdkScrollable\", \"\"]],\n    template: function MatSidenavContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n      }\n    },\n    directives: [ɵngcc5.NgIf, MatSidenavContent, ɵngcc1.CdkScrollable],\n    styles: [_c5],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatSidenavContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSidenavModule = /*#__PURE__*/(function () {\n  var MatSidenavModule = /*#__PURE__*/_createClass(function MatSidenavModule() {\n    _classCallCheck(this, MatSidenavModule);\n  });\n\n  MatSidenavModule.ɵfac = function MatSidenavModule_Factory(t) {\n    return new (t || MatSidenavModule)();\n  };\n\n  MatSidenavModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatSidenavModule\n  });\n  MatSidenavModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule], CdkScrollableModule, MatCommonModule]\n  });\n  return MatSidenavModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSidenavModule, {\n    declarations: function declarations() {\n      return [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule];\n    },\n    exports: function exports() {\n      return [CdkScrollableModule, MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError, MAT_DRAWER_CONTAINER as ɵangular_material_src_material_sidenav_sidenav_a };","map":{"version":3,"names":["Platform","PlatformModule","CdkScrollable","ScrollDispatcher","ViewportRuler","CdkScrollableModule","DOCUMENT","CommonModule","InjectionToken","Component","ChangeDetectionStrategy","ViewEncapsulation","ChangeDetectorRef","Inject","forwardRef","ElementRef","NgZone","EventEmitter","Optional","Input","HostBinding","Output","HostListener","QueryList","ContentChildren","ContentChild","ViewChild","NgModule","MatCommonModule","FocusTrapFactory","FocusMonitor","Directionality","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","Subject","fromEvent","merge","filter","map","mapTo","takeUntil","distinctUntilChanged","take","startWith","debounceTime","trigger","state","style","transition","animate","ANIMATION_MODULE_TYPE","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","MatDrawerContainer_div_0_Template","rf","ctx","_r3","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatDrawerContainer_div_0_Template_div_click_0_listener","ɵɵrestoreView","ctx_r2","ɵɵnextContext","_onBackdropClicked","ɵɵelementEnd","ctx_r0","ɵɵclassProp","_isShowingBackdrop","MatDrawerContainer_mat_drawer_content_3_Template","ɵɵprojection","_c1","_c2","MatSidenavContainer_div_0_Template","MatSidenavContainer_div_0_Template_div_click_0_listener","MatSidenavContainer_mat_sidenav_content_3_Template","_c3","_c4","_c5","matDrawerAnimations","transformDrawer","throwMatDuplicatedDrawerError","position","Error","MAT_DRAWER_DEFAULT_AUTOSIZE","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","_contentMarginChanges","subscribe","markForCheck","ɵfac","MatDrawerContent_Factory","t","ɵɵdirectiveInject","MatDrawerContainer","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatDrawerContent_HostBindings","ɵɵstyleProp","_contentMargins","left","right","features","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatDrawerContent_Template","ɵɵprojectionDef","encapsulation","changeDetection","ngDevMode","MatDrawer","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_opened","_animationStarted","_animationEnd","_animationState","openedChange","_openedStream","pipe","o","openedStart","e","fromState","toState","indexOf","undefined","_closedStream","closedStart","_destroyed","onPositionChanged","_modeChanged","opened","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","runOutsideAngular","nativeElement","event","keyCode","disableClose","run","close","stopPropagation","preventDefault","x","y","emit","value","_updateFocusTrapState","next","_autoFocus","mode","toggle","autoFocus","_focusTrap","focusInitialElementWhenReady","then","hasMovedFocus","focus","focusVia","_openedVia","blur","_a","activeEl","contains","create","isBrowser","destroy","complete","openedVia","_setOpen","isOpen","restoreFocus","Promise","resolve","open","offsetWidth","enabled","MatDrawer_Factory","MatDrawer_HostBindings","ɵɵsyntheticHostListener","MatDrawer_animation_transform_start_HostBindingHandler","$event","_animationStartListener","MatDrawer_animation_transform_done_HostBindingHandler","_animationDoneListener","ɵɵattribute","ɵɵsyntheticHostProperty","inputs","outputs","exportAs","consts","MatDrawer_Template","directives","data","animation","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","backdropClick","_doCheckSubject","change","_validateDrawers","updateContentMargins","_autosize","_start","_end","_backdropOverride","_userContent","_content","_allDrawers","changes","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","_left","_getWidth","width","_right","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","isAdd","className","remove","_closeModalDrawersViaBackdrop","_canHaveBackdrop","_closeViaBackdropClick","MatDrawerContainer_Factory","contentQueries","MatDrawerContainer_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","viewQuery","MatDrawerContainer_Query","ɵɵviewQuery","MatDrawerContainer_HostBindings","autosize","hasBackdrop","ɵɵProvidersFeature","provide","useExisting","MatDrawerContainer_Template","ɵɵtemplate","ɵɵproperty","ɵɵadvance","NgIf","styles","MatSidenavContent","changeDetectorRef","container","MatSidenavContent_Factory","MatSidenavContainer","MatSidenavContent_HostBindings","MatSidenavContent_Template","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","ɵMatSidenav_BaseFactory","MatSidenav_Factory","ɵɵgetInheritedFactory","MatSidenav_HostBindings","fixedInViewport","fixedTopGap","fixedBottomGap","MatSidenav_Template","ɵMatSidenavContainer_BaseFactory","MatSidenavContainer_Factory","MatSidenavContainer_ContentQueries","MatSidenavContainer_HostBindings","MatSidenavContainer_Template","MatSidenavModule","MatSidenavModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","ɵangular_material_src_material_sidenav_sidenav_a"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/sidenav.js"],"sourcesContent":["import { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, forwardRef, ElementRef, NgZone, EventEmitter, Optional, Input, HostBinding, Output, HostListener, QueryList, ContentChildren, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/common';\n\nconst _c0 = [\"*\"];\nfunction MatDrawerContainer_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2._onBackdropClicked(); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n} }\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-drawer-content\");\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c1 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nconst _c2 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\nfunction MatSidenavContainer_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2._onBackdropClicked(); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n} }\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-sidenav-content\", 3);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c3 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nconst _c4 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nconst _c5 = \".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\";\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n}\nMatDrawerContent.ɵfac = function MatDrawerContent_Factory(t) { return new (t || MatDrawerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatDrawerContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatDrawerContent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDrawerContent, selectors: [[\"mat-drawer-content\"]], hostAttrs: [1, \"mat-drawer-content\"], hostVars: 4, hostBindings: function MatDrawerContent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatDrawerContent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatDrawerContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatDrawerContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatDrawerContainer),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDrawerContent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: MatDrawerContainer, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatDrawerContainer)]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._doc = _doc;\n        this._container = _container;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /** Whether the drawer is initialized. Used for disabling the initial animation. */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /** Emits whenever the drawer has started animating. */\n        this._animationStarted = new Subject();\n        /** Emits whenever the drawer is done animating. */\n        this._animationEnd = new Subject();\n        /** Current state of the sidenav animation. */\n        // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n        // metadata is not inherited by child classes, instead the host binding data is defined in a way\n        // that can be inherited.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        this._animationState = 'void';\n        /** Event emitted when the drawer open state is changed. */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ true);\n        /** Event emitted when the drawer has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the drawer has started opening. */\n        this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n        /** Event emitted when the drawer has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the drawer has started closing. */\n        this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Event emitted when the drawer's position changes. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this.openedChange.subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus();\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown').pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed)).subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        })).subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /** The side that the drawer is attached to. */\n    get position() { return this._position; }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value != this._position) {\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() { return this._mode; }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() { return this._disableClose; }\n    set disableClose(value) { this._disableClose = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n        // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n        // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n        return value == null ? this.mode !== 'side' : value;\n    }\n    set autoFocus(value) { this._autoFocus = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() { return this._opened; }\n    set opened(value) { this.toggle(coerceBooleanProperty(value)); }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this.autoFocus || !this._focusTrap) {\n            return;\n        }\n        this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n            // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n            // still works. We need to check that `focus` is a function due to Universal.\n            if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                this._elementRef.nativeElement.focus();\n            }\n        });\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus() {\n        if (!this.autoFocus) {\n            return;\n        }\n        // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        this._openedVia = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        var _a;\n        const activeEl = (_a = this._doc) === null || _a === void 0 ? void 0 : _a.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterContentInit() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._updateFocusTrapState();\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurring of the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true);\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        return this._setOpen(isOpen, /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), openedVia);\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param openedVia Focus origin that can be optionally set when opening a drawer. The\n     *   origin will be used later when focus is restored on drawer close.\n     */\n    _setOpen(isOpen, restoreFocus, openedVia = 'program') {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n            this._openedVia = openedVia;\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus();\n            }\n        }\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // The focus trap is only enabled when the drawer is open in any mode other than side.\n            this._focusTrap.enabled = this.opened && this.mode !== 'side';\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationStartListener(event) {\n        this._animationStarted.next(event);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationDoneListener(event) {\n        this._animationEnd.next(event);\n    }\n}\nMatDrawer.ɵfac = function MatDrawer_Factory(t) { return new (t || MatDrawer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_CONTAINER, 8)); };\nMatDrawer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDrawer, selectors: [[\"mat-drawer\"]], hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\"], hostVars: 12, hostBindings: function MatDrawer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) { return ctx._animationStartListener($event); })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) { return ctx._animationDoneListener($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened);\n    } }, inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, exportAs: [\"matDrawer\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"]], template: function MatDrawer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, directives: [ɵngcc1.CdkScrollable], encapsulation: 2, data: { animation: [matDrawerAnimations.transformDrawer] }, changeDetection: 0 });\nMatDrawer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: FocusMonitor },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDrawerContainer, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DRAWER_CONTAINER,] }] }\n];\nMatDrawer.propDecorators = {\n    position: [{ type: Input }],\n    mode: [{ type: Input }],\n    disableClose: [{ type: Input }],\n    autoFocus: [{ type: Input }],\n    opened: [{ type: Input }],\n    _animationState: [{ type: HostBinding, args: ['@transform',] }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    openedStart: [{ type: Output }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    closedStart: [{ type: Output }],\n    onPositionChanged: [{ type: Output, args: ['positionChanged',] }],\n    _animationStartListener: [{ type: HostListener, args: ['@transform.start', ['$event'],] }],\n    _animationDoneListener: [{ type: HostListener, args: ['@transform.done', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDrawer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer',\n                exportAs: 'matDrawer',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    'tabIndex': '-1'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.FocusTrapFactory }, { type: ɵngcc2.FocusMonitor }, { type: ɵngcc3.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDrawerContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DRAWER_CONTAINER]\n            }] }]; }, { _animationState: [{\n            type: HostBinding,\n            args: ['@transform']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], openedStart: [{\n            type: Output\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], closedStart: [{\n            type: Output\n        }], onPositionChanged: [{\n            type: Output,\n            args: ['positionChanged']\n        }], position: [{\n            type: Input\n        }], mode: [{\n            type: Input\n        }], disableClose: [{\n            type: Input\n        }], autoFocus: [{\n            type: Input\n        }], opened: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationStartListener: [{\n            type: HostListener,\n            args: ['@transform.start', ['$event']]\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationDoneListener: [{\n            type: HostListener,\n            args: ['@transform.done', ['$event']]\n        }] }); })();\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Drawers that belong to this container. */\n        this._drawers = new QueryList();\n        /** Event emitted when the drawer backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Emits on every ngDoCheck. Used for debouncing reflows. */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            });\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler.change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        this._autosize = defaultAutosize;\n    }\n    /** The drawer child with the `start` position. */\n    get start() { return this._start; }\n    /** The drawer child with the `end` position. */\n    get end() { return this._end; }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() { return this._autosize; }\n    set autosize(value) { this._autosize = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        if (this._backdropOverride == null) {\n            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted.pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n                this._validateDrawers();\n            });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n    }\n    _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n}\nMatDrawerContainer.ɵfac = function MatDrawerContainer_Factory(t) { return new (t || MatDrawerContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatDrawerContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDrawerContainer, selectors: [[\"mat-drawer-container\"]], contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawerContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawer, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    } }, viewQuery: function MatDrawerContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatDrawerContent, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n    } }, hostAttrs: [1, \"mat-drawer-container\"], hostVars: 2, hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    } }, inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, exportAs: [\"matDrawerContainer\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatDrawerContainer\n            }])], ngContentSelectors: _c2, decls: 4, vars: 2, consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]], template: function MatDrawerContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    } }, directives: [ɵngcc5.NgIf, MatDrawerContent], styles: [_c5], encapsulation: 2, changeDetection: 0 });\nMatDrawerContainer.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatDrawerContainer.propDecorators = {\n    _allDrawers: [{ type: ContentChildren, args: [MatDrawer, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }],\n    _content: [{ type: ContentChild, args: [MatDrawerContent,] }],\n    _userContent: [{ type: ViewChild, args: [MatDrawerContent,] }],\n    autosize: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    backdropClick: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDrawerContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer-container',\n                exportAs: 'matDrawerContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatDrawerContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { backdropClick: [{\n            type: Output\n        }], autosize: [{\n            type: Input\n        }], hasBackdrop: [{\n            type: Input\n        }], _allDrawers: [{\n            type: ContentChildren,\n            args: [MatDrawer, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }], _content: [{\n            type: ContentChild,\n            args: [MatDrawerContent]\n        }], _userContent: [{\n            type: ViewChild,\n            args: [MatDrawerContent]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n}\nMatSidenavContent.ɵfac = function MatSidenavContent_Factory(t) { return new (t || MatSidenavContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatSidenavContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatSidenavContent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSidenavContent, selectors: [[\"mat-sidenav-content\"]], hostAttrs: [1, \"mat-drawer-content\", \"mat-sidenav-content\"], hostVars: 4, hostBindings: function MatSidenavContent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatSidenavContent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatSidenavContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatSidenavContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatSidenavContainer),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenavContent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content mat-sidenav-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: MatSidenavContainer, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatSidenavContainer)]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() { return this._fixedInViewport; }\n    set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() { return this._fixedTopGap; }\n    set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() { return this._fixedBottomGap; }\n    set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n}\nMatSidenav.ɵfac = /*@__PURE__*/ function () { let ɵMatSidenav_BaseFactory; return function MatSidenav_Factory(t) { return (ɵMatSidenav_BaseFactory || (ɵMatSidenav_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenav)))(t || MatSidenav); }; }();\nMatSidenav.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSidenav, selectors: [[\"mat-sidenav\"]], hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\", \"mat-sidenav\"], hostVars: 17, hostBindings: function MatSidenav_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened)(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n    } }, inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, exportAs: [\"matSidenav\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"]], template: function MatSidenav_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, directives: [ɵngcc1.CdkScrollable], encapsulation: 2, data: { animation: [matDrawerAnimations.transformDrawer] }, changeDetection: 0 });\nMatSidenav.propDecorators = {\n    fixedInViewport: [{ type: Input }],\n    fixedTopGap: [{ type: Input }],\n    fixedBottomGap: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenav, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav',\n                exportAs: 'matSidenav',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer mat-sidenav',\n                    'tabIndex': '-1',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, { fixedInViewport: [{\n            type: Input\n        }], fixedTopGap: [{\n            type: Input\n        }], fixedBottomGap: [{\n            type: Input\n        }] }); })();\nclass MatSidenavContainer extends MatDrawerContainer {\n}\nMatSidenavContainer.ɵfac = /*@__PURE__*/ function () { let ɵMatSidenavContainer_BaseFactory; return function MatSidenavContainer_Factory(t) { return (ɵMatSidenavContainer_BaseFactory || (ɵMatSidenavContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenavContainer)))(t || MatSidenavContainer); }; }();\nMatSidenavContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSidenavContainer, selectors: [[\"mat-sidenav-container\"]], contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenavContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenav, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    } }, hostAttrs: [1, \"mat-drawer-container\", \"mat-sidenav-container\"], hostVars: 2, hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    } }, exportAs: [\"matSidenavContainer\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatSidenavContainer\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 4, vars: 2, consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [\"cdkScrollable\", \"\", 4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"], [\"cdkScrollable\", \"\"]], template: function MatSidenavContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    } }, directives: [ɵngcc5.NgIf, MatSidenavContent, ɵngcc1.CdkScrollable], styles: [_c5], encapsulation: 2, changeDetection: 0 });\nMatSidenavContainer.propDecorators = {\n    _allDrawers: [{ type: ContentChildren, args: [MatSidenav, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }],\n    _content: [{ type: ContentChild, args: [MatSidenavContent,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenavContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav-container',\n                exportAs: 'matSidenavContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable>\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container mat-sidenav-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatSidenavContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            }]\n    }], null, { _allDrawers: [{\n            type: ContentChildren,\n            args: [MatSidenav, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }], _content: [{\n            type: ContentChild,\n            args: [MatSidenavContent]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavModule {\n}\nMatSidenavModule.ɵfac = function MatSidenavModule_Factory(t) { return new (t || MatSidenavModule)(); };\nMatSidenavModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSidenavModule });\nMatSidenavModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            MatCommonModule,\n            PlatformModule,\n            CdkScrollableModule,\n        ], CdkScrollableModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenavModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    PlatformModule,\n                    CdkScrollableModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatCommonModule,\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n                declarations: [\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSidenavModule, { declarations: function () { return [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        PlatformModule,\n        CdkScrollableModule]; }, exports: function () { return [CdkScrollableModule,\n        MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError, MAT_DRAWER_CONTAINER as ɵangular_material_src_material_sidenav_sidenav_a };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}