{"ast":null,"code":"import _get from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _toConsumableArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nvar _c0 = [\"*\"];\nvar _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nvar _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nvar _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\";\n\nvar TileCoordinator = /*#__PURE__*/function () {\n  function TileCoordinator() {\n    _classCallCheck(this, TileCoordinator);\n\n    /** Index at which the search for the next gap will start. */\n    this.columnIndex = 0;\n    /** The current row index. */\n\n    this.rowIndex = 0;\n  }\n  /** Gets the total number of rows occupied by tiles */\n\n\n  _createClass(TileCoordinator, [{\n    key: \"rowCount\",\n    get: function get() {\n      return this.rowIndex + 1;\n    }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n\n  }, {\n    key: \"rowspan\",\n    get: function get() {\n      var lastRowMax = Math.max.apply(Math, _toConsumableArray(this.tracker)); // if any of the tiles has a rowspan that pushes it beyond the total row count,\n      // add the difference to the rowcount\n\n      return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(numColumns, tiles) {\n      var _this = this;\n\n      this.columnIndex = 0;\n      this.rowIndex = 0;\n      this.tracker = new Array(numColumns);\n      this.tracker.fill(0, 0, this.tracker.length);\n      this.positions = tiles.map(function (tile) {\n        return _this._trackTile(tile);\n      });\n    }\n    /** Calculates the row and col position of a tile. */\n\n  }, {\n    key: \"_trackTile\",\n    value: function _trackTile(tile) {\n      // Find a gap large enough for this tile.\n      var gapStartIndex = this._findMatchingGap(tile.colspan); // Place tile in the resulting gap.\n\n\n      this._markTilePosition(gapStartIndex, tile); // The next time we look for a gap, the search will start at columnIndex, which should be\n      // immediately after the tile that has just been placed.\n\n\n      this.columnIndex = gapStartIndex + tile.colspan;\n      return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n\n  }, {\n    key: \"_findMatchingGap\",\n    value: function _findMatchingGap(tileCols) {\n      if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\"mat-grid-list: tile with colspan \".concat(tileCols, \" is wider than \") + \"grid with cols=\\\"\".concat(this.tracker.length, \"\\\".\"));\n      } // Start index is inclusive, end index is exclusive.\n\n\n      var gapStartIndex = -1;\n      var gapEndIndex = -1; // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n\n      do {\n        // If we've reached the end of the row, go to the next row.\n        if (this.columnIndex + tileCols > this.tracker.length) {\n          this._nextRow();\n\n          gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n          gapEndIndex = this._findGapEndIndex(gapStartIndex);\n          continue;\n        }\n\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex); // If there are no more empty spaces in this row at all, move on to the next row.\n\n        if (gapStartIndex == -1) {\n          this._nextRow();\n\n          gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n          gapEndIndex = this._findGapEndIndex(gapStartIndex);\n          continue;\n        }\n\n        gapEndIndex = this._findGapEndIndex(gapStartIndex); // If a gap large enough isn't found, we want to start looking immediately after the current\n        // gap on the next iteration.\n\n        this.columnIndex = gapStartIndex + 1; // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n        // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n      } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0); // If we still didn't manage to find a gap, ensure that the index is\n      // at least zero so the tile doesn't get pulled out of the grid.\n\n\n      return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n\n  }, {\n    key: \"_nextRow\",\n    value: function _nextRow() {\n      this.columnIndex = 0;\n      this.rowIndex++; // Decrement all spaces by one to reflect moving down one row.\n\n      for (var i = 0; i < this.tracker.length; i++) {\n        this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n      }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n\n  }, {\n    key: \"_findGapEndIndex\",\n    value: function _findGapEndIndex(gapStartIndex) {\n      for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {\n        if (this.tracker[i] != 0) {\n          return i;\n        }\n      } // The gap ends with the end of the row.\n\n\n      return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n\n  }, {\n    key: \"_markTilePosition\",\n    value: function _markTilePosition(start, tile) {\n      for (var i = 0; i < tile.colspan; i++) {\n        this.tracker[start + i] = tile.rowspan;\n      }\n    }\n  }]);\n\n  return TileCoordinator;\n}();\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\n\n\nvar TilePosition = /*#__PURE__*/_createClass(function TilePosition(row, col) {\n  _classCallCheck(this, TilePosition);\n\n  this.row = row;\n  this.col = col;\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\n\n\nvar MAT_GRID_LIST = /*#__PURE__*/new InjectionToken('MAT_GRID_LIST');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar MatGridTile = /*#__PURE__*/(function () {\n  var MatGridTile = /*#__PURE__*/function () {\n    function MatGridTile(_element, _gridList) {\n      _classCallCheck(this, MatGridTile);\n\n      this._element = _element;\n      this._gridList = _gridList;\n      this._rowspan = 1;\n      this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n\n\n    _createClass(MatGridTile, [{\n      key: \"rowspan\",\n      get: function get() {\n        return this._rowspan;\n      },\n      set: function set(value) {\n        this._rowspan = Math.round(coerceNumberProperty(value));\n      }\n      /** Amount of columns that the grid tile takes up. */\n\n    }, {\n      key: \"colspan\",\n      get: function get() {\n        return this._colspan;\n      },\n      set: function set(value) {\n        this._colspan = Math.round(coerceNumberProperty(value));\n      }\n      /**\n       * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n       * \"Changed after checked\" errors that would occur with HostBinding.\n       */\n\n    }, {\n      key: \"_setStyle\",\n      value: function _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n      }\n    }]);\n\n    return MatGridTile;\n  }();\n\n  MatGridTile.ɵfac = function MatGridTile_Factory(t) {\n    return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8));\n  };\n\n  MatGridTile.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatGridTile,\n    selectors: [[\"mat-grid-tile\"]],\n    hostAttrs: [1, \"mat-grid-tile\"],\n    hostVars: 2,\n    hostBindings: function MatGridTile_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n      }\n    },\n    inputs: {\n      rowspan: \"rowspan\",\n      colspan: \"colspan\"\n    },\n    exportAs: [\"matGridTile\"],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"mat-grid-tile-content\"]],\n    template: function MatGridTile_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [_c3],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatGridTile;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MatGridTileText = /*#__PURE__*/(function () {\n  var MatGridTileText = /*#__PURE__*/function () {\n    function MatGridTileText(_element) {\n      _classCallCheck(this, MatGridTileText);\n\n      this._element = _element;\n    }\n\n    _createClass(MatGridTileText, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        setLines(this._lines, this._element);\n      }\n    }]);\n\n    return MatGridTileText;\n  }();\n\n  MatGridTileText.ɵfac = function MatGridTileText_Factory(t) {\n    return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MatGridTileText.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatGridTileText,\n    selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n    contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n      }\n    },\n    ngContentSelectors: _c2,\n    decls: 4,\n    vars: 0,\n    consts: [[1, \"mat-grid-list-text\"]],\n    template: function MatGridTileText_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatGridTileText;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nvar MatGridAvatarCssMatStyler = /*#__PURE__*/(function () {\n  var MatGridAvatarCssMatStyler = /*#__PURE__*/_createClass(function MatGridAvatarCssMatStyler() {\n    _classCallCheck(this, MatGridAvatarCssMatStyler);\n  });\n\n  MatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) {\n    return new (t || MatGridAvatarCssMatStyler)();\n  };\n\n  MatGridAvatarCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatGridAvatarCssMatStyler,\n    selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n    hostAttrs: [1, \"mat-grid-avatar\"]\n  });\n  return MatGridAvatarCssMatStyler;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nvar MatGridTileHeaderCssMatStyler = /*#__PURE__*/(function () {\n  var MatGridTileHeaderCssMatStyler = /*#__PURE__*/_createClass(function MatGridTileHeaderCssMatStyler() {\n    _classCallCheck(this, MatGridTileHeaderCssMatStyler);\n  });\n\n  MatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) {\n    return new (t || MatGridTileHeaderCssMatStyler)();\n  };\n\n  MatGridTileHeaderCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatGridTileHeaderCssMatStyler,\n    selectors: [[\"mat-grid-tile-header\"]],\n    hostAttrs: [1, \"mat-grid-tile-header\"]\n  });\n  return MatGridTileHeaderCssMatStyler;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nvar MatGridTileFooterCssMatStyler = /*#__PURE__*/(function () {\n  var MatGridTileFooterCssMatStyler = /*#__PURE__*/_createClass(function MatGridTileFooterCssMatStyler() {\n    _classCallCheck(this, MatGridTileFooterCssMatStyler);\n  });\n\n  MatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) {\n    return new (t || MatGridTileFooterCssMatStyler)();\n  };\n\n  MatGridTileFooterCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatGridTileFooterCssMatStyler,\n    selectors: [[\"mat-grid-tile-footer\"]],\n    hostAttrs: [1, \"mat-grid-tile-footer\"]\n  });\n  return MatGridTileFooterCssMatStyler;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\n\n\nvar cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\n\nvar TileStyler = /*#__PURE__*/function () {\n  function TileStyler() {\n    _classCallCheck(this, TileStyler);\n\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n\n\n  _createClass(TileStyler, [{\n    key: \"init\",\n    value: function init(gutterSize, tracker, cols, direction) {\n      this._gutterSize = normalizeUnits(gutterSize);\n      this._rows = tracker.rowCount;\n      this._rowspan = tracker.rowspan;\n      this._cols = cols;\n      this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n\n  }, {\n    key: \"getBaseTileSize\",\n    value: function getBaseTileSize(sizePercent, gutterFraction) {\n      // Take the base size percent (as would be if evenly dividing the size between cells),\n      // and then subtracting the size of one gutter. However, since there are no gutters on the\n      // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n      // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n      // edge evenly among the cells).\n      return \"(\".concat(sizePercent, \"% - (\").concat(this._gutterSize, \" * \").concat(gutterFraction, \"))\");\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n\n  }, {\n    key: \"getTilePosition\",\n    value: function getTilePosition(baseSize, offset) {\n      // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n      // row/column (offset).\n      return offset === 0 ? '0' : calc(\"(\".concat(baseSize, \" + \").concat(this._gutterSize, \") * \").concat(offset));\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n\n  }, {\n    key: \"getTileSize\",\n    value: function getTileSize(baseSize, span) {\n      return \"(\".concat(baseSize, \" * \").concat(span, \") + (\").concat(span - 1, \" * \").concat(this._gutterSize, \")\");\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(tile, rowIndex, colIndex) {\n      // Percent of the available horizontal space that one column takes up.\n      var percentWidthPerTile = 100 / this._cols; // Fraction of the vertical gutter size that each column takes up.\n      // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n\n      var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n      this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n      this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n\n  }, {\n    key: \"setColStyles\",\n    value: function setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n      // Base horizontal size of a column.\n      var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth); // The width and horizontal position of each tile is always calculated the same way, but the\n      // height and vertical position depends on the rowMode.\n\n      var side = this._direction === 'rtl' ? 'right' : 'left';\n\n      tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n\n      tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n\n  }, {\n    key: \"getGutterSpan\",\n    value: function getGutterSpan() {\n      return \"\".concat(this._gutterSize, \" * (\").concat(this._rowspan, \" - 1)\");\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n\n  }, {\n    key: \"getTileSpan\",\n    value: function getTileSpan(tileHeight) {\n      return \"\".concat(this._rowspan, \" * \").concat(this.getTileSize(tileHeight, 1));\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return null;\n    }\n  }]);\n\n  return TileStyler;\n}();\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\n\n\nvar FixedTileStyler = /*#__PURE__*/function (_TileStyler) {\n  _inherits(FixedTileStyler, _TileStyler);\n\n  var _super = _createSuper(FixedTileStyler);\n\n  function FixedTileStyler(fixedRowHeight) {\n    var _this2;\n\n    _classCallCheck(this, FixedTileStyler);\n\n    _this2 = _super.call(this);\n    _this2.fixedRowHeight = fixedRowHeight;\n    return _this2;\n  }\n\n  _createClass(FixedTileStyler, [{\n    key: \"init\",\n    value: function init(gutterSize, tracker, cols, direction) {\n      _get(_getPrototypeOf(FixedTileStyler.prototype), \"init\", this).call(this, gutterSize, tracker, cols, direction);\n\n      this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n      if (!cssCalcAllowedValue.test(this.fixedRowHeight) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\"Invalid value \\\"\".concat(this.fixedRowHeight, \"\\\" set as rowHeight.\"));\n      }\n    }\n  }, {\n    key: \"setRowStyles\",\n    value: function setRowStyles(tile, rowIndex) {\n      tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n\n      tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return ['height', calc(\"\".concat(this.getTileSpan(this.fixedRowHeight), \" + \").concat(this.getGutterSpan()))];\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      list._setListStyle(['height', null]);\n\n      if (list._tiles) {\n        list._tiles.forEach(function (tile) {\n          tile._setStyle('top', null);\n\n          tile._setStyle('height', null);\n        });\n      }\n    }\n  }]);\n\n  return FixedTileStyler;\n}(TileStyler);\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\n\n\nvar RatioTileStyler = /*#__PURE__*/function (_TileStyler2) {\n  _inherits(RatioTileStyler, _TileStyler2);\n\n  var _super2 = _createSuper(RatioTileStyler);\n\n  function RatioTileStyler(value) {\n    var _this3;\n\n    _classCallCheck(this, RatioTileStyler);\n\n    _this3 = _super2.call(this);\n\n    _this3._parseRatio(value);\n\n    return _this3;\n  }\n\n  _createClass(RatioTileStyler, [{\n    key: \"setRowStyles\",\n    value: function setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n      var percentHeightPerTile = percentWidth / this.rowHeightRatio;\n      this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth); // Use padding-top and margin-top to maintain the given aspect ratio, as\n      // a percentage-based value for these properties is applied versus the *width* of the\n      // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n\n      tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n\n      tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return ['paddingBottom', calc(\"\".concat(this.getTileSpan(this.baseTileHeight), \" + \").concat(this.getGutterSpan()))];\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      list._setListStyle(['paddingBottom', null]);\n\n      list._tiles.forEach(function (tile) {\n        tile._setStyle('marginTop', null);\n\n        tile._setStyle('paddingTop', null);\n      });\n    }\n  }, {\n    key: \"_parseRatio\",\n    value: function _parseRatio(value) {\n      var ratioParts = value.split(':');\n\n      if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\"mat-grid-list: invalid ratio given for row-height: \\\"\".concat(value, \"\\\"\"));\n      }\n\n      this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n  }]);\n\n  return RatioTileStyler;\n}(TileStyler);\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\n\n\nvar FitTileStyler = /*#__PURE__*/function (_TileStyler3) {\n  _inherits(FitTileStyler, _TileStyler3);\n\n  var _super3 = _createSuper(FitTileStyler);\n\n  function FitTileStyler() {\n    _classCallCheck(this, FitTileStyler);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(FitTileStyler, [{\n    key: \"setRowStyles\",\n    value: function setRowStyles(tile, rowIndex) {\n      // Percent of the available vertical space that one row takes up.\n      var percentHeightPerTile = 100 / this._rowspan; // Fraction of the horizontal gutter size that each column takes up.\n\n      var gutterHeightPerTile = (this._rows - 1) / this._rows; // Base vertical size of a column.\n\n      var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n      tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n\n      tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      if (list._tiles) {\n        list._tiles.forEach(function (tile) {\n          tile._setStyle('top', null);\n\n          tile._setStyle('height', null);\n        });\n      }\n    }\n  }]);\n\n  return FitTileStyler;\n}(TileStyler);\n/** Wraps a CSS string in a calc function */\n\n\nfunction calc(exp) {\n  return \"calc(\".concat(exp, \")\");\n}\n/** Appends pixels to a CSS string if no units are given. */\n\n\nfunction normalizeUnits(value) {\n  return value.match(/([A-Za-z%]+)$/) ? value : \"\".concat(value, \"px\");\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\n\nvar MAT_FIT_MODE = 'fit';\nvar MatGridList = /*#__PURE__*/(function () {\n  var MatGridList = /*#__PURE__*/function () {\n    function MatGridList(_element, _dir) {\n      _classCallCheck(this, MatGridList);\n\n      this._element = _element;\n      this._dir = _dir;\n      /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n\n      this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n\n\n    _createClass(MatGridList, [{\n      key: \"cols\",\n      get: function get() {\n        return this._cols;\n      },\n      set: function set(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n      }\n      /** Size of the grid list's gutter in pixels. */\n\n    }, {\n      key: \"gutterSize\",\n      get: function get() {\n        return this._gutter;\n      },\n      set: function set(value) {\n        this._gutter = \"\".concat(value == null ? '' : value);\n      }\n      /** Set internal representation of row height from the user-provided value. */\n\n    }, {\n      key: \"rowHeight\",\n      get: function get() {\n        return this._rowHeight;\n      },\n      set: function set(value) {\n        var newValue = \"\".concat(value == null ? '' : value);\n\n        if (newValue !== this._rowHeight) {\n          this._rowHeight = newValue;\n\n          this._setTileStyler(this._rowHeight);\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._checkCols();\n\n        this._checkRowHeight();\n      }\n      /**\n       * The layout calculation is fairly cheap if nothing changes, so there's little cost\n       * to run it frequently.\n       */\n\n    }, {\n      key: \"ngAfterContentChecked\",\n      value: function ngAfterContentChecked() {\n        this._layoutTiles();\n      }\n      /** Throw a friendly error if cols property is missing */\n\n    }, {\n      key: \"_checkCols\",\n      value: function _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error(\"mat-grid-list: must pass in number of columns. \" + \"Example: <mat-grid-list cols=\\\"3\\\">\");\n        }\n      }\n      /** Default to equal width:height if rowHeight property is missing */\n\n    }, {\n      key: \"_checkRowHeight\",\n      value: function _checkRowHeight() {\n        if (!this._rowHeight) {\n          this._setTileStyler('1:1');\n        }\n      }\n      /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n\n    }, {\n      key: \"_setTileStyler\",\n      value: function _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n          this._tileStyler.reset(this);\n        }\n\n        if (rowHeight === MAT_FIT_MODE) {\n          this._tileStyler = new FitTileStyler();\n        } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n          this._tileStyler = new RatioTileStyler(rowHeight);\n        } else {\n          this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n      }\n      /** Computes and applies the size and position for all children grid tiles. */\n\n    }, {\n      key: \"_layoutTiles\",\n      value: function _layoutTiles() {\n        var _this4 = this;\n\n        if (!this._tileCoordinator) {\n          this._tileCoordinator = new TileCoordinator();\n        }\n\n        var tracker = this._tileCoordinator;\n\n        var tiles = this._tiles.filter(function (tile) {\n          return !tile._gridList || tile._gridList === _this4;\n        });\n\n        var direction = this._dir ? this._dir.value : 'ltr';\n\n        this._tileCoordinator.update(this.cols, tiles);\n\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n        tiles.forEach(function (tile, index) {\n          var pos = tracker.positions[index];\n\n          _this4._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n\n        this._setListStyle(this._tileStyler.getComputedHeight());\n      }\n      /** Sets style on the main grid-list element, given the style name and value. */\n\n    }, {\n      key: \"_setListStyle\",\n      value: function _setListStyle(style) {\n        if (style) {\n          this._element.nativeElement.style[style[0]] = style[1];\n        }\n      }\n    }]);\n\n    return MatGridList;\n  }();\n\n  MatGridList.ɵfac = function MatGridList_Factory(t) {\n    return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n  };\n\n  MatGridList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatGridList,\n    selectors: [[\"mat-grid-list\"]],\n    contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-grid-list\"],\n    hostVars: 1,\n    hostBindings: function MatGridList_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n      }\n    },\n    inputs: {\n      cols: \"cols\",\n      gutterSize: \"gutterSize\",\n      rowHeight: \"rowHeight\"\n    },\n    exportAs: [\"matGridList\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_GRID_LIST,\n      useExisting: MatGridList\n    }])],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    template: function MatGridList_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [_c3],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatGridList;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatGridListModule = /*#__PURE__*/(function () {\n  var MatGridListModule = /*#__PURE__*/_createClass(function MatGridListModule() {\n    _classCallCheck(this, MatGridListModule);\n  });\n\n  MatGridListModule.ɵfac = function MatGridListModule_Factory(t) {\n    return new (t || MatGridListModule)();\n  };\n\n  MatGridListModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatGridListModule\n  });\n  MatGridListModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatLineModule, MatCommonModule], MatLineModule, MatCommonModule]\n  });\n  return MatGridListModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, {\n    declarations: function declarations() {\n      return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    },\n    imports: function imports() {\n      return [MatLineModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\n\n\nvar ɵTileCoordinator = TileCoordinator;\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };","map":{"version":3,"names":["InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","Optional","Inject","Input","ContentChildren","Directive","NgModule","setLines","MatLine","MatLineModule","MatCommonModule","coerceNumberProperty","Directionality","ɵngcc0","ɵngcc1","_c0","_c1","_c2","_c3","TileCoordinator","columnIndex","rowIndex","lastRowMax","Math","max","tracker","rowCount","numColumns","tiles","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","ngDevMode","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","rowspan","row","col","MAT_GRID_LIST","MatGridTile","_element","_gridList","_rowspan","_colspan","value","round","property","nativeElement","style","ɵfac","MatGridTile_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatGridTile_HostBindings","rf","ctx","ɵɵattribute","inputs","exportAs","ngContentSelectors","decls","vars","consts","template","MatGridTile_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","MatGridTileText","_lines","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatGridTileText_Template","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","ɵɵdefineDirective","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","cssCalcAllowedValue","TileStyler","_rows","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","sizePercent","gutterFraction","baseSize","offset","calc","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","getBaseTileSize","side","_setStyle","getTilePosition","getTileSize","tileHeight","FixedTileStyler","fixedRowHeight","test","getTileSpan","getGutterSpan","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","_rowHeight","newValue","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","reset","_tileCoordinator","filter","update","init","index","pos","setStyle","getComputedHeight","MatGridList_Factory","MatGridList_ContentQueries","MatGridList_HostBindings","features","ɵɵProvidersFeature","provide","useExisting","MatGridList_Template","MatGridListModule","MatGridListModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","ɵTileCoordinator","ɵangular_material_src_material_grid_list_grid_list_a"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/grid-list.js"],"sourcesContent":["import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\";\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridTile {\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() { return this._rowspan; }\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() { return this._colspan; }\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], hostVars: 2, hostBindings: function MatGridTile_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    } }, inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-grid-tile-content\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nclass MatGridTileText {\n    constructor(_element) {\n        this._element = _element;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }] }); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n        this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n    get cols() { return this._cols; }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() { return this._gutter; }\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() { return this._rowHeight; }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], hostVars: 1, hostBindings: function MatGridList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    } }, inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols'\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); };\nMatGridListModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatLineModule, MatCommonModule], MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}