{"ast":null,"code":"import _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nvar MatTextareaAutosize = /*#__PURE__*/(function () {\n  var MatTextareaAutosize = /*#__PURE__*/function (_CdkTextareaAutosize) {\n    _inherits(MatTextareaAutosize, _CdkTextareaAutosize);\n\n    var _super = _createSuper(MatTextareaAutosize);\n\n    function MatTextareaAutosize() {\n      _classCallCheck(this, MatTextareaAutosize);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(MatTextareaAutosize, [{\n      key: \"matAutosizeMinRows\",\n      get: function get() {\n        return this.minRows;\n      },\n      set: function set(value) {\n        this.minRows = value;\n      }\n    }, {\n      key: \"matAutosizeMaxRows\",\n      get: function get() {\n        return this.maxRows;\n      },\n      set: function set(value) {\n        this.maxRows = value;\n      }\n    }, {\n      key: \"matAutosize\",\n      get: function get() {\n        return this.enabled;\n      },\n      set: function set(value) {\n        this.enabled = value;\n      }\n    }, {\n      key: \"matTextareaAutosize\",\n      get: function get() {\n        return this.enabled;\n      },\n      set: function set(value) {\n        this.enabled = value;\n      }\n    }]);\n\n    return MatTextareaAutosize;\n  }(CdkTextareaAutosize);\n\n  MatTextareaAutosize.ɵfac = /*@__PURE__*/function () {\n    var ɵMatTextareaAutosize_BaseFactory;\n    return function MatTextareaAutosize_Factory(t) {\n      return (ɵMatTextareaAutosize_BaseFactory || (ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize)))(t || MatTextareaAutosize);\n    };\n  }();\n\n  MatTextareaAutosize.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTextareaAutosize,\n    selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]],\n    hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"],\n    inputs: {\n      cdkAutosizeMinRows: \"cdkAutosizeMinRows\",\n      cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\",\n      matAutosizeMinRows: \"matAutosizeMinRows\",\n      matAutosizeMaxRows: \"matAutosizeMaxRows\",\n      matAutosize: [\"mat-autosize\", \"matAutosize\"],\n      matTextareaAutosize: \"matTextareaAutosize\"\n    },\n    exportAs: [\"matTextareaAutosize\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTextareaAutosize;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\n\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(\"Input type \\\"\".concat(type, \"\\\" isn't supported by matInput.\"));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\n\n\nvar MAT_INPUT_VALUE_ACCESSOR = /*#__PURE__*/new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n\nvar MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\nvar nextUniqueId = 0; // Boilerplate for applying mixins to MatInput.\n\n/** @docs-private */\n\nvar _MatInputBase = /*#__PURE__*/mixinErrorState( /*#__PURE__*/function () {\n  function _class(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    _classCallCheck(this, _class);\n\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n  return _createClass(_class);\n}());\n/** Directive that allows a native input to work inside a `MatFormField`. */\n\n\nvar MatInput = /*#__PURE__*/(function () {\n  var MatInput = /*#__PURE__*/function (_MatInputBase2) {\n    _inherits(MatInput, _MatInputBase2);\n\n    var _super2 = _createSuper(MatInput);\n\n    function MatInput(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n      var _this;\n\n      _classCallCheck(this, MatInput);\n\n      _this = _super2.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      _this._elementRef = _elementRef;\n      _this._platform = _platform;\n      _this._autofillMonitor = _autofillMonitor;\n      _this._formField = _formField;\n      _this._uid = \"mat-input-\".concat(nextUniqueId++);\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n      _this.focused = false;\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n      _this.stateChanges = new Subject();\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n      _this.controlType = 'mat-input';\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n      _this.autofilled = false;\n      _this._disabled = false;\n      _this._required = false;\n      _this._type = 'text';\n      _this._readonly = false;\n      _this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(function (t) {\n        return getSupportedInputTypes().has(t);\n      });\n      var element = _this._elementRef.nativeElement;\n      var nodeName = element.nodeName.toLowerCase(); // If no input value accessor was explicitly specified, use the element as the input value\n      // accessor.\n\n      _this._inputValueAccessor = inputValueAccessor || element;\n      _this._previousNativeValue = _this.value; // Force setter to be called in case id was not specified.\n\n      _this.id = _this.id; // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n      // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n      // exists on iOS, we only bother to install the listener on iOS.\n\n      if (_platform.IOS) {\n        ngZone.runOutsideAngular(function () {\n          _elementRef.nativeElement.addEventListener('keyup', function (event) {\n            var el = event.target; // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n              // Note: Just setting `0, 0` doesn't fix the issue. Setting\n              // `1, 1` fixes it for the first time that you type text and\n              // then hold delete. Toggling to `1, 1` and then back to\n              // `0, 0` seems to completely fix it.\n              el.setSelectionRange(1, 1);\n              el.setSelectionRange(0, 0);\n            }\n          });\n        });\n      }\n\n      _this._isServer = !_this._platform.isBrowser;\n      _this._isNativeSelect = nodeName === 'select';\n      _this._isTextarea = nodeName === 'textarea';\n      _this._isInFormField = !!_formField;\n\n      if (_this._isNativeSelect) {\n        _this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n      }\n\n      return _this;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    _createClass(MatInput, [{\n      key: \"disabled\",\n      get: function get() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n          return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value); // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n\n        if (this.focused) {\n          this.focused = false;\n          this.stateChanges.next();\n        }\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"id\",\n      get: function get() {\n        return this._id;\n      },\n      set: function set(value) {\n        this._id = value || this._uid;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"required\",\n      get: function get() {\n        return this._required;\n      },\n      set: function set(value) {\n        this._required = coerceBooleanProperty(value);\n      }\n      /** Input type of the element. */\n\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this._type;\n      },\n      set: function set(value) {\n        this._type = value || 'text';\n\n        this._validateType(); // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n\n\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n          this._elementRef.nativeElement.type = this._type;\n        }\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._inputValueAccessor.value;\n      },\n      set: function set(value) {\n        if (value !== this.value) {\n          this._inputValueAccessor.value = value;\n          this.stateChanges.next();\n        }\n      }\n      /** Whether the element is readonly. */\n\n    }, {\n      key: \"readonly\",\n      get: function get() {\n        return this._readonly;\n      },\n      set: function set(value) {\n        this._readonly = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this2 = this;\n\n        if (this._platform.isBrowser) {\n          this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(function (event) {\n            _this2.autofilled = event.isAutofilled;\n\n            _this2.stateChanges.next();\n          });\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        this.stateChanges.next();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.stateChanges.complete();\n\n        if (this._platform.isBrowser) {\n          this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (this.ngControl) {\n          // We need to re-evaluate this on every change detection cycle, because there are some\n          // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n          // that whatever logic is in here has to be super lean or we risk destroying the performance.\n          this.updateErrorState();\n        } // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n\n\n        this._dirtyCheckNativeValue(); // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n\n\n        this._dirtyCheckPlaceholder();\n      }\n      /** Focuses the input. */\n\n    }, {\n      key: \"focus\",\n      value: function focus(options) {\n        this._elementRef.nativeElement.focus(options);\n      } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n      // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n      // ViewEngine they're overwritten.\n      // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n\n      /** Callback for the cases where the focused state of the input changes. */\n      // tslint:disable:no-host-decorator-in-concrete\n      // tslint:enable:no-host-decorator-in-concrete\n\n    }, {\n      key: \"_focusChanged\",\n      value: function _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n          this.focused = isFocused;\n          this.stateChanges.next();\n        }\n      } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n      // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n      // ViewEngine they're overwritten.\n      // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n      // tslint:disable-next-line:no-host-decorator-in-concrete\n\n    }, {\n      key: \"_onInput\",\n      value: function _onInput() {// This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n      }\n      /** Does some manual dirty checking on the native input `placeholder` attribute. */\n\n    }, {\n      key: \"_dirtyCheckPlaceholder\",\n      value: function _dirtyCheckPlaceholder() {\n        var _a, _b; // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n\n\n        var placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n\n        if (placeholder !== this._previousPlaceholder) {\n          var element = this._elementRef.nativeElement;\n          this._previousPlaceholder = placeholder;\n          placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n      }\n      /** Does some manual dirty checking on the native input `value` property. */\n\n    }, {\n      key: \"_dirtyCheckNativeValue\",\n      value: function _dirtyCheckNativeValue() {\n        var newValue = this._elementRef.nativeElement.value;\n\n        if (this._previousNativeValue !== newValue) {\n          this._previousNativeValue = newValue;\n          this.stateChanges.next();\n        }\n      }\n      /** Make sure the input is a supported type. */\n\n    }, {\n      key: \"_validateType\",\n      value: function _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatInputUnsupportedTypeError(this._type);\n        }\n      }\n      /** Checks whether the input type is one of the types that are never empty. */\n\n    }, {\n      key: \"_isNeverEmpty\",\n      value: function _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n      }\n      /** Checks whether the input is invalid based on the native validation. */\n\n    }, {\n      key: \"_isBadInput\",\n      value: function _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        var validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"empty\",\n      get: function get() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"shouldLabelFloat\",\n      get: function get() {\n        if (this._isNativeSelect) {\n          // For a single-selection `<select>`, the label should float when the selected option has\n          // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n          // overlapping the label with the options.\n          var selectElement = this._elementRef.nativeElement;\n          var firstOption = selectElement.options[0]; // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n          // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n\n          return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        } else {\n          return this.focused || !this.empty;\n        }\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"setDescribedByIds\",\n      value: function setDescribedByIds(ids) {\n        if (ids.length) {\n          this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        } else {\n          this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"onContainerClick\",\n      value: function onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n          this.focus();\n        }\n      }\n    }]);\n\n    return MatInput;\n  }(_MatInputBase);\n\n  MatInput.ɵfac = function MatInput_Factory(t) {\n    return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8));\n  };\n\n  MatInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatInput,\n    selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n    hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n    hostVars: 9,\n    hostBindings: function MatInput_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() {\n          return ctx._focusChanged(true);\n        })(\"blur\", function MatInput_blur_HostBindingHandler() {\n          return ctx._focusChanged(false);\n        })(\"input\", function MatInput_input_HostBindingHandler() {\n          return ctx._onInput();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required);\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      disabled: \"disabled\",\n      required: \"required\",\n      type: \"type\",\n      value: \"value\",\n      readonly: \"readonly\",\n      placeholder: \"placeholder\",\n      errorStateMatcher: \"errorStateMatcher\",\n      userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"]\n    },\n    exportAs: [\"matInput\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatInput\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatInput;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatInputModule = /*#__PURE__*/(function () {\n  var MatInputModule = /*#__PURE__*/_createClass(function MatInputModule() {\n    _classCallCheck(this, MatInputModule);\n  });\n\n  MatInputModule.ɵfac = function MatInputModule_Factory(t) {\n    return new (t || MatInputModule)();\n  };\n\n  MatInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatInputModule\n  });\n  MatInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [ErrorStateMatcher],\n    imports: [[TextFieldModule, MatFormFieldModule, MatCommonModule], TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule]\n  });\n  return MatInputModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, {\n    declarations: function declarations() {\n      return [MatInput, MatTextareaAutosize];\n    },\n    imports: function imports() {\n      return [TextFieldModule, MatFormFieldModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput, MatTextareaAutosize];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };","map":{"version":3,"names":["CdkTextareaAutosize","AutofillMonitor","TextFieldModule","Directive","Input","InjectionToken","ElementRef","Optional","Self","Inject","NgZone","HostListener","NgModule","coerceBooleanProperty","getSupportedInputTypes","Platform","NgControl","NgForm","FormGroupDirective","mixinErrorState","ErrorStateMatcher","MatCommonModule","MatFormFieldControl","MatFormField","MAT_FORM_FIELD","MatFormFieldModule","Subject","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","MatTextareaAutosize","minRows","value","maxRows","enabled","ɵfac","ɵMatTextareaAutosize_BaseFactory","MatTextareaAutosize_Factory","t","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","cdkAutosizeMinRows","cdkAutosizeMaxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","exportAs","features","ɵɵInheritDefinitionFeature","ngDevMode","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","_MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatInput","_elementRef","_platform","inputValueAccessor","_autofillMonitor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","has","element","nativeElement","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","event","el","target","selectionStart","selectionEnd","setSelectionRange","_isServer","isBrowser","_isNativeSelect","_isTextarea","_isInFormField","multiple","disabled","next","_id","_validateType","monitor","subscribe","isAutofilled","complete","stopMonitoring","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","options","focus","isFocused","readonly","_a","_b","placeholder","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","validity","badInput","_isNeverEmpty","_isBadInput","selectElement","firstOption","empty","selectedIndex","label","ids","length","join","MatInput_Factory","ɵɵdirectiveInject","hostVars","hostBindings","MatInput_HostBindings","rf","ctx","ɵɵlistener","MatInput_focus_HostBindingHandler","_focusChanged","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","_onInput","ɵɵhostProperty","required","ɵɵattribute","errorState","ɵɵclassProp","errorStateMatcher","userAriaDescribedBy","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","MatInputModule","MatInputModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js"],"sourcesContent":["import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = /*@__PURE__*/ function () { let ɵMatTextareaAutosize_BaseFactory; return function MatTextareaAutosize_Factory(t) { return (ɵMatTextareaAutosize_BaseFactory || (ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize)))(t || MatTextareaAutosize); }; }();\nMatTextareaAutosize.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputBase {\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    const el = event.target;\n                    // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n                    // indicate different things. If the value is 0, it means that the caret is at the start\n                    // of the input, whereas a value of `null` means that the input doesn't support\n                    // manipulating the selection range. Inputs that don't support setting the selection range\n                    // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n                    // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n                    if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8)); };\nMatInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 9, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required);\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"] }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    userAriaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    // Only mark the input as invalid for assistive technology if it has a value since the\n                    // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                    '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                    '[attr.aria-required]': 'required'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged: [{\n            type: HostListener,\n            args: ['focus', ['true']]\n        }, {\n            type: HostListener,\n            args: ['blur', ['false']]\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput: [{\n            type: HostListener,\n            args: ['input']\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], userAriaDescribedBy: [{\n            type: Input,\n            args: ['aria-describedby']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = function MatInputModule_Factory(t) { return new (t || MatInputModule)(); };\nMatInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n            MatCommonModule,\n        ], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput, MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule,\n        MatCommonModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule, MatInput, MatTextareaAutosize]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}