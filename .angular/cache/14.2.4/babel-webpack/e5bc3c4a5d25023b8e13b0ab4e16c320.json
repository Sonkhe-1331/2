{"ast":null,"code":"import _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1.action();\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\n\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) {}\n\nvar MAT_SNACK_BAR_DATA = /*#__PURE__*/new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\n\nvar MatSnackBarConfig = /*#__PURE__*/_createClass(function MatSnackBarConfig() {\n  _classCallCheck(this, MatSnackBarConfig);\n\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  this.politeness = 'assertive';\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n\n  this.announcementMessage = '';\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n\n  this.duration = 0;\n  /** Data being injected into the child component. */\n\n  this.data = null;\n  /** The horizontal position to place the snack bar. */\n\n  this.horizontalPosition = 'center';\n  /** The vertical position to place the snack bar. */\n\n  this.verticalPosition = 'bottom';\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\n\n\nvar MAX_TIMEOUT = /*#__PURE__*/Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\n\nvar MatSnackBarRef = /*#__PURE__*/function () {\n  function MatSnackBarRef(containerInstance, _overlayRef) {\n    var _this = this;\n\n    _classCallCheck(this, MatSnackBarRef);\n\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance; // Dismiss snackbar on action.\n\n    this.onAction().subscribe(function () {\n      return _this.dismiss();\n    });\n\n    containerInstance._onExit.subscribe(function () {\n      return _this._finishDismiss();\n    });\n  }\n  /** Dismisses the snack bar. */\n\n\n  _createClass(MatSnackBarRef, [{\n    key: \"dismiss\",\n    value: function dismiss() {\n      if (!this._afterDismissed.closed) {\n        this.containerInstance.exit();\n      }\n\n      clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n\n  }, {\n    key: \"dismissWithAction\",\n    value: function dismissWithAction() {\n      if (!this._onAction.closed) {\n        this._dismissedByAction = true;\n\n        this._onAction.next();\n\n        this._onAction.complete();\n      }\n\n      clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n\n  }, {\n    key: \"closeWithAction\",\n    value: function closeWithAction() {\n      this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n\n  }, {\n    key: \"_dismissAfter\",\n    value: function _dismissAfter(duration) {\n      var _this2 = this;\n\n      // Note that we need to cap the duration to the maximum value for setTimeout, because\n      // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n      this._durationTimeoutId = setTimeout(function () {\n        return _this2.dismiss();\n      }, Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n\n  }, {\n    key: \"_open\",\n    value: function _open() {\n      if (!this._afterOpened.closed) {\n        this._afterOpened.next();\n\n        this._afterOpened.complete();\n      }\n    }\n    /** Cleans up the DOM after closing. */\n\n  }, {\n    key: \"_finishDismiss\",\n    value: function _finishDismiss() {\n      this._overlayRef.dispose();\n\n      if (!this._onAction.closed) {\n        this._onAction.complete();\n      }\n\n      this._afterDismissed.next({\n        dismissedByAction: this._dismissedByAction\n      });\n\n      this._afterDismissed.complete();\n\n      this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n\n  }, {\n    key: \"afterDismissed\",\n    value: function afterDismissed() {\n      return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n\n  }, {\n    key: \"onAction\",\n    value: function onAction() {\n      return this._onAction;\n    }\n  }]);\n\n  return MatSnackBarRef;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n\n\nvar SimpleSnackBar = /*#__PURE__*/(function () {\n  var SimpleSnackBar = /*#__PURE__*/function () {\n    function SimpleSnackBar(snackBarRef, data) {\n      _classCallCheck(this, SimpleSnackBar);\n\n      this.snackBarRef = snackBarRef;\n      this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n\n\n    _createClass(SimpleSnackBar, [{\n      key: \"action\",\n      value: function action() {\n        this.snackBarRef.dismissWithAction();\n      }\n      /** If the action button should be shown. */\n\n    }, {\n      key: \"hasAction\",\n      get: function get() {\n        return !!this.data.action;\n      }\n    }]);\n\n    return SimpleSnackBar;\n  }();\n\n  SimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n    return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n  };\n\n  SimpleSnackBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: SimpleSnackBar,\n    selectors: [[\"simple-snack-bar\"]],\n    hostAttrs: [1, \"mat-simple-snackbar\"],\n    decls: 3,\n    vars: 2,\n    consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n    template: function SimpleSnackBar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc2.MatButton],\n    styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return SimpleSnackBar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\n\n\nvar matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: /*#__PURE__*/trigger('state', [/*#__PURE__*/state('void, hidden', /*#__PURE__*/style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), /*#__PURE__*/state('visible', /*#__PURE__*/style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), /*#__PURE__*/transition('* => visible', /*#__PURE__*/animate('150ms cubic-bezier(0, 0, 0.2, 1)')), /*#__PURE__*/transition('* => void, * => hidden', /*#__PURE__*/animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n\nvar MatSnackBarContainer = /*#__PURE__*/(function () {\n  var MatSnackBarContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n    _inherits(MatSnackBarContainer, _BasePortalOutlet);\n\n    var _super = _createSuper(MatSnackBarContainer);\n\n    function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, _platform,\n    /** The snack bar configuration. */\n    snackBarConfig) {\n      var _this3;\n\n      _classCallCheck(this, MatSnackBarContainer);\n\n      _this3 = _super.call(this);\n      _this3._ngZone = _ngZone;\n      _this3._elementRef = _elementRef;\n      _this3._changeDetectorRef = _changeDetectorRef;\n      _this3._platform = _platform;\n      _this3.snackBarConfig = snackBarConfig;\n      /** The number of milliseconds to wait before announcing the snack bar's content. */\n\n      _this3._announceDelay = 150;\n      /** Whether the component has been destroyed. */\n\n      _this3._destroyed = false;\n      /** Subject for notifying that the snack bar has announced to screen readers. */\n\n      _this3._onAnnounce = new Subject();\n      /** Subject for notifying that the snack bar has exited from view. */\n\n      _this3._onExit = new Subject();\n      /** Subject for notifying that the snack bar has finished entering the view. */\n\n      _this3._onEnter = new Subject();\n      /** The state of the snack bar animations. */\n\n      _this3._animationState = 'void';\n      /**\n       * Attaches a DOM portal to the snack bar container.\n       * @deprecated To be turned into a method.\n       * @breaking-change 10.0.0\n       */\n\n      _this3.attachDomPortal = function (portal) {\n        _this3._assertNotAttached();\n\n        _this3._applySnackBarClasses();\n\n        return _this3._portalOutlet.attachDomPortal(portal);\n      }; // Use aria-live rather than a live role like 'alert' or 'status'\n      // because NVDA and JAWS have show inconsistent behavior with live roles.\n\n\n      if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n        _this3._live = 'assertive';\n      } else if (snackBarConfig.politeness === 'off') {\n        _this3._live = 'off';\n      } else {\n        _this3._live = 'polite';\n      } // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n      // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n\n\n      if (_this3._platform.FIREFOX) {\n        if (_this3._live === 'polite') {\n          _this3._role = 'status';\n        }\n\n        if (_this3._live === 'assertive') {\n          _this3._role = 'alert';\n        }\n      }\n\n      return _this3;\n    }\n    /** Attach a component portal as content to this snack bar container. */\n\n\n    _createClass(MatSnackBarContainer, [{\n      key: \"attachComponentPortal\",\n      value: function attachComponentPortal(portal) {\n        this._assertNotAttached();\n\n        this._applySnackBarClasses();\n\n        return this._portalOutlet.attachComponentPortal(portal);\n      }\n      /** Attach a template portal as content to this snack bar container. */\n\n    }, {\n      key: \"attachTemplatePortal\",\n      value: function attachTemplatePortal(portal) {\n        this._assertNotAttached();\n\n        this._applySnackBarClasses();\n\n        return this._portalOutlet.attachTemplatePortal(portal);\n      }\n      /** Handle end of animations, updating the state of the snackbar. */\n\n    }, {\n      key: \"onAnimationEnd\",\n      value: function onAnimationEnd(event) {\n        var fromState = event.fromState,\n            toState = event.toState;\n\n        if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n          this._completeExit();\n        }\n\n        if (toState === 'visible') {\n          // Note: we shouldn't use `this` inside the zone callback,\n          // because it can cause a memory leak.\n          var onEnter = this._onEnter;\n\n          this._ngZone.run(function () {\n            onEnter.next();\n            onEnter.complete();\n          });\n        }\n      }\n      /** Begin animation of snack bar entrance into view. */\n\n    }, {\n      key: \"enter\",\n      value: function enter() {\n        if (!this._destroyed) {\n          this._animationState = 'visible';\n\n          this._changeDetectorRef.detectChanges();\n\n          this._screenReaderAnnounce();\n        }\n      }\n      /** Begin animation of the snack bar exiting from view. */\n\n    }, {\n      key: \"exit\",\n      value: function exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden'; // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n\n        this._elementRef.nativeElement.setAttribute('mat-exit', ''); // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n\n\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n      }\n      /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed = true;\n\n        this._completeExit();\n      }\n      /**\n       * Waits for the zone to settle before removing the element. Helps prevent\n       * errors where we end up removing an element which is in the middle of an animation.\n       */\n\n    }, {\n      key: \"_completeExit\",\n      value: function _completeExit() {\n        var _this4 = this;\n\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(function () {\n          _this4._onExit.next();\n\n          _this4._onExit.complete();\n        });\n      }\n      /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n\n    }, {\n      key: \"_applySnackBarClasses\",\n      value: function _applySnackBarClasses() {\n        var element = this._elementRef.nativeElement;\n        var panelClasses = this.snackBarConfig.panelClass;\n\n        if (panelClasses) {\n          if (Array.isArray(panelClasses)) {\n            // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n            panelClasses.forEach(function (cssClass) {\n              return element.classList.add(cssClass);\n            });\n          } else {\n            element.classList.add(panelClasses);\n          }\n        }\n\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n          element.classList.add('mat-snack-bar-center');\n        }\n\n        if (this.snackBarConfig.verticalPosition === 'top') {\n          element.classList.add('mat-snack-bar-top');\n        }\n      }\n      /** Asserts that no content is already attached to the container. */\n\n    }, {\n      key: \"_assertNotAttached\",\n      value: function _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n      }\n      /**\n       * Starts a timeout to move the snack bar content to the live region so screen readers will\n       * announce it.\n       */\n\n    }, {\n      key: \"_screenReaderAnnounce\",\n      value: function _screenReaderAnnounce() {\n        var _this5 = this;\n\n        if (!this._announceTimeoutId) {\n          this._ngZone.runOutsideAngular(function () {\n            _this5._announceTimeoutId = setTimeout(function () {\n              var inertElement = _this5._elementRef.nativeElement.querySelector('[aria-hidden]');\n\n              var liveElement = _this5._elementRef.nativeElement.querySelector('[aria-live]');\n\n              if (inertElement && liveElement) {\n                // If an element in the snack bar content is focused before being moved\n                // track it and restore focus after moving to the live region.\n                var focusedElement = null;\n\n                if (_this5._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n                  focusedElement = document.activeElement;\n                }\n\n                inertElement.removeAttribute('aria-hidden');\n                liveElement.appendChild(inertElement);\n                focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n\n                _this5._onAnnounce.next();\n\n                _this5._onAnnounce.complete();\n              }\n            }, _this5._announceDelay);\n          });\n        }\n      }\n    }]);\n\n    return MatSnackBarContainer;\n  }(BasePortalOutlet);\n\n  MatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {\n    return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig));\n  };\n\n  MatSnackBarContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSnackBarContainer,\n    selectors: [[\"snack-bar-container\"]],\n    viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-snack-bar-container\"],\n    hostVars: 1,\n    hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n          return ctx.onAnimationEnd($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n    template: function MatSnackBarContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n      }\n    },\n    directives: [ɵngcc4.CdkPortalOutlet],\n    styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matSnackBarAnimations.snackBarState]\n    }\n  });\n  return MatSnackBarContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSnackBarModule = /*#__PURE__*/(function () {\n  var MatSnackBarModule = /*#__PURE__*/_createClass(function MatSnackBarModule() {\n    _classCallCheck(this, MatSnackBarModule);\n  });\n\n  MatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n    return new (t || MatSnackBarModule)();\n  };\n\n  MatSnackBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatSnackBarModule\n  });\n  MatSnackBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule]\n  });\n  return MatSnackBarModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, {\n    declarations: function declarations() {\n      return [MatSnackBarContainer, SimpleSnackBar];\n    },\n    imports: function imports() {\n      return [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatSnackBarContainer, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to specify default snack bar. */\n\n\nvar MAT_SNACK_BAR_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nvar MatSnackBar = /*#__PURE__*/(function () {\n  var MatSnackBar = /*#__PURE__*/function () {\n    function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n      _classCallCheck(this, MatSnackBar);\n\n      this._overlay = _overlay;\n      this._live = _live;\n      this._injector = _injector;\n      this._breakpointObserver = _breakpointObserver;\n      this._parentSnackBar = _parentSnackBar;\n      this._defaultConfig = _defaultConfig;\n      /**\n       * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n       * If there is a parent snack-bar service, all operations should delegate to that parent\n       * via `_openedSnackBarRef`.\n       */\n\n      this._snackBarRefAtThisLevel = null;\n      /** The component that should be rendered as the snack bar's simple component. */\n\n      this.simpleSnackBarComponent = SimpleSnackBar;\n      /** The container component that attaches the provided template or component. */\n\n      this.snackBarContainerComponent = MatSnackBarContainer;\n      /** The CSS class to apply for handset mode. */\n\n      this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n\n\n    _createClass(MatSnackBar, [{\n      key: \"_openedSnackBarRef\",\n      get: function get() {\n        var parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n      },\n      set: function set(value) {\n        if (this._parentSnackBar) {\n          this._parentSnackBar._openedSnackBarRef = value;\n        } else {\n          this._snackBarRefAtThisLevel = value;\n        }\n      }\n      /**\n       * Creates and dispatches a snack bar with a custom component for the content, removing any\n       * currently opened snack bars.\n       *\n       * @param component Component to be instantiated.\n       * @param config Extra configuration for the snack bar.\n       */\n\n    }, {\n      key: \"openFromComponent\",\n      value: function openFromComponent(component, config) {\n        return this._attach(component, config);\n      }\n      /**\n       * Creates and dispatches a snack bar with a custom template for the content, removing any\n       * currently opened snack bars.\n       *\n       * @param template Template to be instantiated.\n       * @param config Extra configuration for the snack bar.\n       */\n\n    }, {\n      key: \"openFromTemplate\",\n      value: function openFromTemplate(template, config) {\n        return this._attach(template, config);\n      }\n      /**\n       * Opens a snackbar with a message and an optional action.\n       * @param message The message to show in the snackbar.\n       * @param action The label for the snackbar action.\n       * @param config Additional configuration options for the snackbar.\n       */\n\n    }, {\n      key: \"open\",\n      value: function open(message) {\n        var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        var config = arguments.length > 2 ? arguments[2] : undefined;\n\n        var _config = Object.assign(Object.assign({}, this._defaultConfig), config); // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n\n\n        _config.data = {\n          message: message,\n          action: action\n        }; // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n\n        if (_config.announcementMessage === message) {\n          _config.announcementMessage = undefined;\n        }\n\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n      }\n      /**\n       * Dismisses the currently-visible snack bar.\n       */\n\n    }, {\n      key: \"dismiss\",\n      value: function dismiss() {\n        if (this._openedSnackBarRef) {\n          this._openedSnackBarRef.dismiss();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n          this._snackBarRefAtThisLevel.dismiss();\n        }\n      }\n      /**\n       * Attaches the snack bar container component to the overlay.\n       */\n\n    }, {\n      key: \"_attachSnackBarContainer\",\n      value: function _attachSnackBarContainer(overlayRef, config) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var injector = Injector.create({\n          parent: userInjector || this._injector,\n          providers: [{\n            provide: MatSnackBarConfig,\n            useValue: config\n          }]\n        });\n        var containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        var containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n      }\n      /**\n       * Places a new component or a template as the content of the snack bar container.\n       */\n\n    }, {\n      key: \"_attach\",\n      value: function _attach(content, userConfig) {\n        var _this6 = this;\n\n        var config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n\n        var overlayRef = this._createOverlay(config);\n\n        var container = this._attachSnackBarContainer(overlayRef, config);\n\n        var snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n        if (content instanceof TemplateRef) {\n          var portal = new TemplatePortal(content, null, {\n            $implicit: config.data,\n            snackBarRef: snackBarRef\n          });\n          snackBarRef.instance = container.attachTemplatePortal(portal);\n        } else {\n          var injector = this._createInjector(config, snackBarRef);\n\n          var _portal = new ComponentPortal(content, undefined, injector);\n\n          var contentRef = container.attachComponentPortal(_portal); // We can't pass this via the injector, because the injector is created earlier.\n\n          snackBarRef.instance = contentRef.instance;\n        } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n\n\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(function (state) {\n          var classList = overlayRef.overlayElement.classList;\n          state.matches ? classList.add(_this6.handsetCssClass) : classList.remove(_this6.handsetCssClass);\n        });\n\n        if (config.announcementMessage) {\n          // Wait until the snack bar contents have been announced then deliver this message.\n          container._onAnnounce.subscribe(function () {\n            _this6._live.announce(config.announcementMessage, config.politeness);\n          });\n        }\n\n        this._animateSnackBar(snackBarRef, config);\n\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n      }\n      /** Animates the old snack bar out and the new one in. */\n\n    }, {\n      key: \"_animateSnackBar\",\n      value: function _animateSnackBar(snackBarRef, config) {\n        var _this7 = this;\n\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(function () {\n          // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n          if (_this7._openedSnackBarRef == snackBarRef) {\n            _this7._openedSnackBarRef = null;\n          }\n\n          if (config.announcementMessage) {\n            _this7._live.clear();\n          }\n        });\n\n        if (this._openedSnackBarRef) {\n          // If a snack bar is already in view, dismiss it and enter the\n          // new snack bar after exit animation is complete.\n          this._openedSnackBarRef.afterDismissed().subscribe(function () {\n            snackBarRef.containerInstance.enter();\n          });\n\n          this._openedSnackBarRef.dismiss();\n        } else {\n          // If no snack bar is in view, enter the new snack bar.\n          snackBarRef.containerInstance.enter();\n        } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n        if (config.duration && config.duration > 0) {\n          snackBarRef.afterOpened().subscribe(function () {\n            return snackBarRef._dismissAfter(config.duration);\n          });\n        }\n      }\n      /**\n       * Creates a new overlay and places it in the correct location.\n       * @param config The user-specified snack bar config.\n       */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay(config) {\n        var overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n\n        var positionStrategy = this._overlay.position().global(); // Set horizontal position.\n\n\n        var isRtl = config.direction === 'rtl';\n        var isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n        var isRight = !isLeft && config.horizontalPosition !== 'center';\n\n        if (isLeft) {\n          positionStrategy.left('0');\n        } else if (isRight) {\n          positionStrategy.right('0');\n        } else {\n          positionStrategy.centerHorizontally();\n        } // Set horizontal position.\n\n\n        if (config.verticalPosition === 'top') {\n          positionStrategy.top('0');\n        } else {\n          positionStrategy.bottom('0');\n        }\n\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n      }\n      /**\n       * Creates an injector to be used inside of a snack bar component.\n       * @param config Config that was used to create the snack bar.\n       * @param snackBarRef Reference to the snack bar.\n       */\n\n    }, {\n      key: \"_createInjector\",\n      value: function _createInjector(config, snackBarRef) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n          parent: userInjector || this._injector,\n          providers: [{\n            provide: MatSnackBarRef,\n            useValue: snackBarRef\n          }, {\n            provide: MAT_SNACK_BAR_DATA,\n            useValue: config.data\n          }]\n        });\n      }\n    }]);\n\n    return MatSnackBar;\n  }();\n\n  MatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n    return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  };\n\n  MatSnackBar.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function MatSnackBar_Factory() {\n      return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n    },\n    token: MatSnackBar,\n    providedIn: MatSnackBarModule\n  });\n  return MatSnackBar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };","map":{"version":3,"names":["i1","OverlayModule","OverlayConfig","Overlay","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","CommonModule","i0","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","NgZone","ElementRef","ChangeDetectorRef","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","MatCommonModule","MatButtonModule","Subject","Platform","take","takeUntil","trigger","state","style","transition","animate","i2","LiveAnnouncer","i3","Breakpoints","BreakpointObserver","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","SimpleSnackBar_div_2_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","SimpleSnackBar_div_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","action","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵtextInterpolate","data","MatSnackBarContainer_ng_template_1_Template","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","next","complete","dismissWithAction","setTimeout","min","dispose","dismissedByAction","_onEnter","SimpleSnackBar","snackBarRef","ɵfac","SimpleSnackBar_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵproperty","hasAction","directives","NgIf","MatButton","styles","encapsulation","changeDetection","ngDevMode","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","event","fromState","toState","_completeExit","onEnter","run","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","MatSnackBarContainer_HostBindings","ɵɵsyntheticHostListener","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","onAnimationEnd","ɵɵsyntheticHostProperty","features","ɵɵInheritDefinitionFeature","MatSnackBarContainer_Template","ɵɵelement","ɵɵattribute","animation","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","parent","_openedSnackBarRef","value","component","config","_attach","_config","Object","assign","undefined","openFromComponent","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","matches","remove","announce","_animateSnackBar","afterDismissed","clear","enter","afterOpened","_dismissAfter","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","MatSnackBar_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","INJECTOR","token"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js"],"sourcesContent":["import * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) { }\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    } }, directives: [ɵngcc4.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Platform },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                selector: 'snack-bar-container',\n                template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc3.Platform }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\nMatSnackBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n            const classList = overlayRef.overlayElement.classList;\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\n            ]\n        });\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc5.Overlay }, { type: ɵngcc6.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc7.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}