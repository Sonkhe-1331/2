{"ast":null,"code":"import _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\n\nvar _MatTreeNodeBase = /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n\n\nvar MatTreeNode = /*#__PURE__*/(function () {\n  var MatTreeNode = /*#__PURE__*/function (_MatTreeNodeBase2) {\n    _inherits(MatTreeNode, _MatTreeNodeBase2);\n\n    var _super = _createSuper(MatTreeNode);\n\n    function MatTreeNode(elementRef, tree, tabIndex) {\n      var _this;\n\n      _classCallCheck(this, MatTreeNode);\n\n      _this = _super.call(this, elementRef, tree);\n      _this.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n      // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n      // it is not set by the time it's children nodes try to read the class from it.\n      // TODO: move to host after View Engine deprecation\n\n      elementRef.nativeElement.classList.add('mat-tree-node');\n      return _this;\n    } // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n    _createClass(MatTreeNode, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        _get(_getPrototypeOf(MatTreeNode.prototype), \"ngOnInit\", this).call(this);\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        _get(_getPrototypeOf(MatTreeNode.prototype), \"ngDoCheck\", this).call(this);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        _get(_getPrototypeOf(MatTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n      }\n    }]);\n\n    return MatTreeNode;\n  }(_MatTreeNodeBase);\n\n  MatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n    return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNode,\n    selectors: [[\"mat-tree-node\"]],\n    inputs: {\n      role: \"role\",\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matTreeNode\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: MatTreeNode\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nvar MatTreeNodeDef = /*#__PURE__*/(function () {\n  var MatTreeNodeDef = /*#__PURE__*/function (_CdkTreeNodeDef) {\n    _inherits(MatTreeNodeDef, _CdkTreeNodeDef);\n\n    var _super2 = _createSuper(MatTreeNodeDef);\n\n    function MatTreeNodeDef() {\n      _classCallCheck(this, MatTreeNodeDef);\n\n      return _super2.apply(this, arguments);\n    }\n\n    return _createClass(MatTreeNodeDef);\n  }(CdkTreeNodeDef);\n\n  MatTreeNodeDef.ɵfac = /*@__PURE__*/function () {\n    var ɵMatTreeNodeDef_BaseFactory;\n    return function MatTreeNodeDef_Factory(t) {\n      return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n    };\n  }();\n\n  MatTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodeDef,\n    selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"matTreeNodeDefWhen\", \"when\"],\n      data: [\"matTreeNode\", \"data\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeDef,\n      useExisting: MatTreeNodeDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodeDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n\n\nvar MatNestedTreeNode = /*#__PURE__*/(function () {\n  var MatNestedTreeNode = /*#__PURE__*/function (_CdkNestedTreeNode) {\n    _inherits(MatNestedTreeNode, _CdkNestedTreeNode);\n\n    var _super3 = _createSuper(MatNestedTreeNode);\n\n    function MatNestedTreeNode(elementRef, tree, differs, tabIndex) {\n      var _this2;\n\n      _classCallCheck(this, MatNestedTreeNode);\n\n      _this2 = _super3.call(this, elementRef, tree, differs);\n      _this2._disabled = false;\n      _this2.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n      // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n      // it is not set by the time it's children nodes try to read the class from it.\n      // TODO: move to host after View Engine deprecation\n\n      elementRef.nativeElement.classList.add('mat-nested-tree-node');\n      return _this2;\n    }\n    /** Whether the node is disabled. */\n\n\n    _createClass(MatNestedTreeNode, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n      }\n      /** Tabindex for the node. */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this.disabled ? -1 : this._tabIndex;\n      },\n      set: function set(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n      } // This is a workaround for https://github.com/angular/angular/issues/19145\n      // In aot mode, the lifecycle hooks from parent class are not called.\n      // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngOnInit\", this).call(this);\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngDoCheck\", this).call(this);\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngAfterContentInit\", this).call(this);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n      }\n    }]);\n\n    return MatNestedTreeNode;\n  }(CdkNestedTreeNode);\n\n  MatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n    return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatNestedTreeNode,\n    selectors: [[\"mat-nested-tree-node\"]],\n    inputs: {\n      role: \"role\",\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\",\n      node: [\"matNestedTreeNode\", \"node\"]\n    },\n    exportAs: [\"matNestedTreeNode\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkNestedTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CdkTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CDK_TREE_NODE_OUTLET_NODE,\n      useExisting: MatNestedTreeNode\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatNestedTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n\n\nvar MatTreeNodePadding = /*#__PURE__*/(function () {\n  var MatTreeNodePadding = /*#__PURE__*/function (_CdkTreeNodePadding) {\n    _inherits(MatTreeNodePadding, _CdkTreeNodePadding);\n\n    var _super4 = _createSuper(MatTreeNodePadding);\n\n    function MatTreeNodePadding() {\n      _classCallCheck(this, MatTreeNodePadding);\n\n      return _super4.apply(this, arguments);\n    }\n\n    _createClass(MatTreeNodePadding, [{\n      key: \"level\",\n      get:\n      /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n      function get() {\n        return this._level;\n      },\n      set: function set(value) {\n        this._setLevelInput(value);\n      }\n      /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n\n    }, {\n      key: \"indent\",\n      get: function get() {\n        return this._indent;\n      },\n      set: function set(indent) {\n        this._setIndentInput(indent);\n      }\n    }]);\n\n    return MatTreeNodePadding;\n  }(CdkTreeNodePadding);\n\n  MatTreeNodePadding.ɵfac = /*@__PURE__*/function () {\n    var ɵMatTreeNodePadding_BaseFactory;\n    return function MatTreeNodePadding_Factory(t) {\n      return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n    };\n  }();\n\n  MatTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodePadding,\n    selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"matTreeNodePadding\", \"level\"],\n      indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodePadding,\n      useExisting: MatTreeNodePadding\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodePadding;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\n\nvar MatTreeNodeOutlet = /*#__PURE__*/(function () {\n  var MatTreeNodeOutlet = /*#__PURE__*/_createClass(function MatTreeNodeOutlet(viewContainer, _node) {\n    _classCallCheck(this, MatTreeNodeOutlet);\n\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  });\n\n  MatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n    return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n  };\n\n  MatTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodeOutlet,\n    selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeOutlet,\n      useExisting: MatTreeNodeOutlet\n    }])]\n  });\n  return MatTreeNodeOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n\n\nvar MatTree = /*#__PURE__*/(function () {\n  var MatTree = /*#__PURE__*/function (_CdkTree) {\n    _inherits(MatTree, _CdkTree);\n\n    var _super5 = _createSuper(MatTree);\n\n    function MatTree() {\n      _classCallCheck(this, MatTree);\n\n      return _super5.apply(this, arguments);\n    }\n\n    return _createClass(MatTree);\n  }(CdkTree);\n\n  MatTree.ɵfac = /*@__PURE__*/function () {\n    var ɵMatTree_BaseFactory;\n    return function MatTree_Factory(t) {\n      return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n    };\n  }();\n\n  MatTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatTree,\n    selectors: [[\"mat-tree\"]],\n    viewQuery: function MatTree_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"],\n    exportAs: [\"matTree\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTree,\n      useExisting: MatTree\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"matTreeNodeOutlet\", \"\"]],\n    template: function MatTree_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [MatTreeNodeOutlet],\n    styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"],\n    encapsulation: 2\n  });\n  return MatTree;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n// tslint:disable-next-line: coercion-types\n\n\nvar MatTreeNodeToggle = /*#__PURE__*/(function () {\n  var MatTreeNodeToggle = /*#__PURE__*/function (_CdkTreeNodeToggle) {\n    _inherits(MatTreeNodeToggle, _CdkTreeNodeToggle);\n\n    var _super6 = _createSuper(MatTreeNodeToggle);\n\n    function MatTreeNodeToggle() {\n      _classCallCheck(this, MatTreeNodeToggle);\n\n      return _super6.apply(this, arguments);\n    }\n\n    _createClass(MatTreeNodeToggle, [{\n      key: \"recursive\",\n      get: function get() {\n        return this._recursive;\n      },\n      set: function set(value) {\n        // TODO: when we remove support for ViewEngine, change this setter to an input\n        // alias in the decorator metadata.\n        this._recursive = coerceBooleanProperty(value);\n      }\n    }]);\n\n    return MatTreeNodeToggle;\n  }(CdkTreeNodeToggle);\n\n  MatTreeNodeToggle.ɵfac = /*@__PURE__*/function () {\n    var ɵMatTreeNodeToggle_BaseFactory;\n    return function MatTreeNodeToggle_Factory(t) {\n      return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n    };\n  }();\n\n  MatTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodeToggle,\n    selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n    inputs: {\n      recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeToggle,\n      useExisting: MatTreeNodeToggle\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodeToggle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\nvar MatTreeModule = /*#__PURE__*/(function () {\n  var MatTreeModule = /*#__PURE__*/_createClass(function MatTreeModule() {\n    _classCallCheck(this, MatTreeModule);\n  });\n\n  MatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n    return new (t || MatTreeModule)();\n  };\n\n  MatTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatTreeModule\n  });\n  MatTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CdkTreeModule, MatCommonModule], MatCommonModule]\n  });\n  return MatTreeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, {\n    declarations: function declarations() {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    },\n    imports: function imports() {\n      return [CdkTreeModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\n\n\nvar MatTreeFlattener = /*#__PURE__*/function () {\n  function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n    _classCallCheck(this, MatTreeFlattener);\n\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  _createClass(MatTreeFlattener, [{\n    key: \"_flattenNode\",\n    value: function _flattenNode(node, level, resultNodes, parentMap) {\n      var _this3 = this;\n\n      var flatNode = this.transformFunction(node, level);\n      resultNodes.push(flatNode);\n\n      if (this.isExpandable(flatNode)) {\n        var childrenNodes = this.getChildren(node);\n\n        if (childrenNodes) {\n          if (Array.isArray(childrenNodes)) {\n            this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n          } else {\n            childrenNodes.pipe(take(1)).subscribe(function (children) {\n              _this3._flattenChildren(children, level, resultNodes, parentMap);\n            });\n          }\n        }\n      }\n\n      return resultNodes;\n    }\n  }, {\n    key: \"_flattenChildren\",\n    value: function _flattenChildren(children, level, resultNodes, parentMap) {\n      var _this4 = this;\n\n      children.forEach(function (child, index) {\n        var childParentMap = parentMap.slice();\n        childParentMap.push(index != children.length - 1);\n\n        _this4._flattenNode(child, level + 1, resultNodes, childParentMap);\n      });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n\n  }, {\n    key: \"flattenNodes\",\n    value: function flattenNodes(structuredData) {\n      var _this5 = this;\n\n      var resultNodes = [];\n      structuredData.forEach(function (node) {\n        return _this5._flattenNode(node, 0, resultNodes, []);\n      });\n      return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n\n  }, {\n    key: \"expandFlattenedNodes\",\n    value: function expandFlattenedNodes(nodes, treeControl) {\n      var _this6 = this;\n\n      var results = [];\n      var currentExpand = [];\n      currentExpand[0] = true;\n      nodes.forEach(function (node) {\n        var expand = true;\n\n        for (var i = 0; i <= _this6.getLevel(node); i++) {\n          expand = expand && currentExpand[i];\n        }\n\n        if (expand) {\n          results.push(node);\n        }\n\n        if (_this6.isExpandable(node)) {\n          currentExpand[_this6.getLevel(node) + 1] = treeControl.isExpanded(node);\n        }\n      });\n      return results;\n    }\n  }]);\n\n  return MatTreeFlattener;\n}();\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\n\n\nvar MatTreeFlatDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(MatTreeFlatDataSource, _DataSource);\n\n  var _super7 = _createSuper(MatTreeFlatDataSource);\n\n  function MatTreeFlatDataSource(_treeControl, _treeFlattener, initialData) {\n    var _this7;\n\n    _classCallCheck(this, MatTreeFlatDataSource);\n\n    _this7 = _super7.call(this);\n    _this7._treeControl = _treeControl;\n    _this7._treeFlattener = _treeFlattener;\n    _this7._flattenedData = new BehaviorSubject([]);\n    _this7._expandedData = new BehaviorSubject([]);\n    _this7._data = new BehaviorSubject([]);\n\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      _this7.data = initialData;\n    }\n\n    return _this7;\n  }\n\n  _createClass(MatTreeFlatDataSource, [{\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    },\n    set: function set(value) {\n      this._data.next(value);\n\n      this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n\n      this._treeControl.dataNodes = this._flattenedData.value;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this8 = this;\n\n      return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(function () {\n        _this8._expandedData.next(_this8._treeFlattener.expandFlattenedNodes(_this8._flattenedData.value, _this8._treeControl));\n\n        return _this8._expandedData.value;\n      }));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }]);\n\n  return MatTreeFlatDataSource;\n}(DataSource);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\n\n\nvar MatTreeNestedDataSource = /*#__PURE__*/function (_DataSource2) {\n  _inherits(MatTreeNestedDataSource, _DataSource2);\n\n  var _super8 = _createSuper(MatTreeNestedDataSource);\n\n  function MatTreeNestedDataSource() {\n    var _this9;\n\n    _classCallCheck(this, MatTreeNestedDataSource);\n\n    _this9 = _super8.apply(this, arguments);\n    _this9._data = new BehaviorSubject([]);\n    return _this9;\n  }\n  /**\n   * Data for the nested tree\n   */\n\n\n  _createClass(MatTreeNestedDataSource, [{\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    },\n    set: function set(value) {\n      this._data.next(value);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this10 = this;\n\n      return merge.apply(void 0, [collectionViewer.viewChange, this._data]).pipe(map(function () {\n        return _this10.data;\n      }));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }]);\n\n  return MatTreeNestedDataSource;\n}(DataSource);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"names":["CdkTreeNode","CdkTree","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTreeNodeToggle","CdkTreeModule","Directive","ElementRef","Attribute","Input","IterableDiffers","ViewContainerRef","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","mixinTabIndex","mixinDisabled","MatCommonModule","coerceBooleanProperty","DataSource","BehaviorSubject","merge","take","map","ɵngcc0","ɵngcc1","_MatTreeNodeBase","MatTreeNode","elementRef","tree","tabIndex","Number","nativeElement","classList","add","ɵfac","MatTreeNode_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵdir","ɵɵdefineDirective","type","selectors","inputs","role","disabled","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ngDevMode","MatTreeNodeDef","ɵMatTreeNodeDef_BaseFactory","MatTreeNodeDef_Factory","ɵɵgetInheritedFactory","when","data","MatNestedTreeNode","differs","_disabled","value","_tabIndex","MatNestedTreeNode_Factory","node","MatTreeNodePadding","_level","_setLevelInput","_indent","indent","_setIndentInput","ɵMatTreeNodePadding_BaseFactory","MatTreeNodePadding_Factory","level","MatTreeNodeOutlet","viewContainer","_node","MatTreeNodeOutlet_Factory","MatTree","ɵMatTree_BaseFactory","MatTree_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","_nodeOutlet","first","hostAttrs","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","directives","styles","encapsulation","MatTreeNodeToggle","_recursive","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_Factory","recursive","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","_flattenNode","structuredData","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","_data","next","flattenNodes","dataNodes","collectionViewer","viewChange","expansionModel","changed","expandFlattenedNodes","MatTreeNestedDataSource","arguments"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/tree.js"],"sourcesContent":["import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeBase {\n    constructor(elementRef, tree, tabIndex) {\n        super(elementRef, tree);\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('mat-tree-node');\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeDef_BaseFactory; return function MatTreeNodeDef_Factory(t) { return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef); }; }();\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    constructor(elementRef, tree, differs, tabIndex) {\n        super(elementRef, tree, differs);\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('mat-nested-tree-node');\n    }\n    /** Whether the node is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Tabindex for the node. */\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    disabled: [{ type: Input }],\n    tabIndex: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() { return this._level; }\n    set level(value) { this._setLevelInput(value); }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() { return this._indent; }\n    set indent(indent) { this._setIndentInput(indent); }\n}\nMatTreeNodePadding.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodePadding_BaseFactory; return function MatTreeNodePadding_Factory(t) { return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding); }; }();\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet\n            }])] });\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = /*@__PURE__*/ function () { let ɵMatTree_BaseFactory; return function MatTree_Factory(t) { return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree); }; }();\nMatTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], encapsulation: 2 });\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    // The 'cdk-tree' class needs to be included here because classes set in the host in the\n                    // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n                    // to be set in the host because:\n                    // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n                    // class from it.\n                    // the ElementRef is not available in the constructor so the class can't be applied directly\n                    // without a breaking constructor change.\n                    'class': 'mat-tree cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CdkTree, useExisting: MatTree }],\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n            }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n// tslint:disable-next-line: coercion-types\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    get recursive() { return this._recursive; }\n    set recursive(value) {\n        // TODO: when we remove support for ViewEngine, change this setter to an input\n        // alias in the decorator metadata.\n        this._recursive = coerceBooleanProperty(value);\n    }\n}\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeToggle_BaseFactory; return function MatTreeNodeToggle_Factory(t) { return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle); }; }();\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); };\nMatTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CdkTreeModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, MatCommonModule],\n                exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, MatCommonModule]; }, exports: function () { return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    get data() { return this._data.value; }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() { return this._data.value; }\n    set data(value) { this._data.next(value); }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}