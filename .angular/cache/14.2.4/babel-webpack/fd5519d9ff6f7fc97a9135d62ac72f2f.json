{"ast":null,"code":"import _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar PendingCopy = /*#__PURE__*/function () {\n  function PendingCopy(text, _document) {\n    _classCallCheck(this, PendingCopy);\n\n    this._document = _document;\n\n    var textarea = this._textarea = this._document.createElement('textarea');\n\n    var styles = textarea.style; // Hide the element for display and accessibility. Set a fixed position so the page layout\n    // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n    // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n\n    styles.position = 'fixed';\n    styles.top = styles.opacity = '0';\n    styles.left = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n\n    this._document.body.appendChild(textarea);\n  }\n  /** Finishes copying the text. */\n\n\n  _createClass(PendingCopy, [{\n    key: \"copy\",\n    value: function copy() {\n      var textarea = this._textarea;\n      var successful = false;\n\n      try {\n        // Older browsers could throw if copy is not supported.\n        if (textarea) {\n          var currentFocus = this._document.activeElement;\n          textarea.select();\n          textarea.setSelectionRange(0, textarea.value.length);\n          successful = this._document.execCommand('copy');\n\n          if (currentFocus) {\n            currentFocus.focus();\n          }\n        }\n      } catch (_a) {// Discard error.\n        // Initial setting of {@code successful} will represent failure here.\n      }\n\n      return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var textarea = this._textarea;\n\n      if (textarea) {\n        if (textarea.parentNode) {\n          textarea.parentNode.removeChild(textarea);\n        }\n\n        this._textarea = undefined;\n      }\n    }\n  }]);\n\n  return PendingCopy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A service for copying text to the clipboard.\n */\n\n\nvar Clipboard = /*#__PURE__*/(function () {\n  var Clipboard = /*#__PURE__*/function () {\n    function Clipboard(document) {\n      _classCallCheck(this, Clipboard);\n\n      this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n\n\n    _createClass(Clipboard, [{\n      key: \"copy\",\n      value: function copy(text) {\n        var pendingCopy = this.beginCopy(text);\n        var successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n      }\n      /**\n       * Prepares a string to be copied later. This is useful for large strings\n       * which take too long to successfully render and be copied in the same tick.\n       *\n       * The caller must call `destroy` on the returned `PendingCopy`.\n       *\n       * @param text The string to copy.\n       * @returns the pending copy operation.\n       */\n\n    }, {\n      key: \"beginCopy\",\n      value: function beginCopy(text) {\n        return new PendingCopy(text, this._document);\n      }\n    }]);\n\n    return Clipboard;\n  }();\n\n  Clipboard.ɵfac = function Clipboard_Factory(t) {\n    return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  Clipboard.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function Clipboard_Factory() {\n      return new Clipboard(i0.ɵɵinject(i1.DOCUMENT));\n    },\n    token: Clipboard,\n    providedIn: \"root\"\n  });\n  return Clipboard;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\n\n\nvar CDK_COPY_TO_CLIPBOARD_CONFIG = /*#__PURE__*/new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.\n * @breaking-change 13.0.0\n */\n\nvar CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\n\nvar CdkCopyToClipboard = /*#__PURE__*/(function () {\n  var CdkCopyToClipboard = /*#__PURE__*/function () {\n    function CdkCopyToClipboard(_clipboard, _ngZone, config) {\n      _classCallCheck(this, CdkCopyToClipboard);\n\n      this._clipboard = _clipboard;\n      this._ngZone = _ngZone;\n      /** Content to be copied. */\n\n      this.text = '';\n      /**\n       * How many times to attempt to copy the text. This may be necessary for longer text, because\n       * the browser needs time to fill an intermediate textarea element and copy the content.\n       */\n\n      this.attempts = 1;\n      /**\n       * Emits when some text is copied to the clipboard. The\n       * emitted value indicates whether copying was successful.\n       */\n\n      this.copied = new EventEmitter();\n      /** Copies that are currently being attempted. */\n\n      this._pending = new Set();\n\n      if (config && config.attempts != null) {\n        this.attempts = config.attempts;\n      }\n    }\n    /** Copies the current text to the clipboard. */\n\n\n    _createClass(CdkCopyToClipboard, [{\n      key: \"copy\",\n      value: function copy() {\n        var _this = this;\n\n        var attempts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.attempts;\n\n        if (attempts > 1) {\n          var remainingAttempts = attempts;\n\n          var pending = this._clipboard.beginCopy(this.text);\n\n          this._pending.add(pending);\n\n          var attempt = function attempt() {\n            var successful = pending.copy();\n\n            if (!successful && --remainingAttempts && !_this._destroyed) {\n              // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n              _this._currentTimeout = _this._ngZone.runOutsideAngular(function () {\n                return setTimeout(attempt, 1);\n              });\n            } else {\n              _this._currentTimeout = null;\n\n              _this._pending.delete(pending);\n\n              pending.destroy();\n\n              _this.copied.emit(successful);\n            }\n          };\n\n          attempt();\n        } else {\n          this.copied.emit(this._clipboard.copy(this.text));\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._currentTimeout) {\n          clearTimeout(this._currentTimeout);\n        }\n\n        this._pending.forEach(function (copy) {\n          return copy.destroy();\n        });\n\n        this._pending.clear();\n\n        this._destroyed = true;\n      }\n    }]);\n\n    return CdkCopyToClipboard;\n  }();\n\n  CdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) {\n    return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8));\n  };\n\n  CdkCopyToClipboard.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkCopyToClipboard,\n    selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]],\n    hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() {\n          return ctx.copy();\n        });\n      }\n    },\n    inputs: {\n      text: [\"cdkCopyToClipboard\", \"text\"],\n      attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"]\n    },\n    outputs: {\n      copied: \"cdkCopyToClipboardCopied\"\n    }\n  });\n  return CdkCopyToClipboard;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar ClipboardModule = /*#__PURE__*/(function () {\n  var ClipboardModule = /*#__PURE__*/_createClass(function ClipboardModule() {\n    _classCallCheck(this, ClipboardModule);\n  });\n\n  ClipboardModule.ɵfac = function ClipboardModule_Factory(t) {\n    return new (t || ClipboardModule)();\n  };\n\n  ClipboardModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClipboardModule\n  });\n  ClipboardModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return ClipboardModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, {\n    declarations: [CdkCopyToClipboard],\n    exports: [CdkCopyToClipboard]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };","map":{"version":3,"names":["i1","DOCUMENT","i0","Injectable","Inject","InjectionToken","EventEmitter","Directive","NgZone","Optional","Input","Output","NgModule","ɵngcc0","PendingCopy","text","_document","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","body","appendChild","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","_a","parentNode","removeChild","undefined","Clipboard","document","pendingCopy","beginCopy","copy","destroy","ɵfac","Clipboard_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode","CDK_COPY_TO_CLIPBOARD_CONFIG","CKD_COPY_TO_CLIPBOARD_CONFIG","CdkCopyToClipboard","_clipboard","_ngZone","config","attempts","copied","_pending","Set","remainingAttempts","pending","add","attempt","_destroyed","_currentTimeout","runOutsideAngular","setTimeout","delete","emit","clearTimeout","forEach","clear","CdkCopyToClipboard_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostBindings","CdkCopyToClipboard_HostBindings","rf","ctx","ɵɵlistener","CdkCopyToClipboard_click_HostBindingHandler","inputs","outputs","ClipboardModule","ClipboardModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/clipboard.js"],"sourcesContent":["import * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = this._textarea = this._document.createElement('textarea');\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try { // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch (_a) {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            if (textarea.parentNode) {\n                textarea.parentNode.removeChild(textarea);\n            }\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = function Clipboard_Factory(t) { return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nClipboard.ɵprov = i0.ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(i0.ɵɵinject(i1.DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\nClipboard.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.\n * @breaking-change 13.0.0\n */\nconst CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) { return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8)); };\nCdkCopyToClipboard.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCopyToClipboard, selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]], hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() { return ctx.copy(); });\n    } }, inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" } });\nCdkCopyToClipboard.ctorParameters = () => [\n    { type: Clipboard },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\n];\nCdkCopyToClipboard.propDecorators = {\n    text: [{ type: Input, args: ['cdkCopyToClipboard',] }],\n    attempts: [{ type: Input, args: ['cdkCopyToClipboardAttempts',] }],\n    copied: [{ type: Output, args: ['cdkCopyToClipboardCopied',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkCopyToClipboard]',\n                host: {\n                    '(click)': 'copy()'\n                }\n            }]\n    }], function () { return [{ type: Clipboard }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n            }] }]; }, { text: [{\n            type: Input,\n            args: ['cdkCopyToClipboard']\n        }], attempts: [{\n            type: Input,\n            args: ['cdkCopyToClipboardAttempts']\n        }], copied: [{\n            type: Output,\n            args: ['cdkCopyToClipboardCopied']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); };\nClipboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkCopyToClipboard],\n                exports: [CdkCopyToClipboard]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}