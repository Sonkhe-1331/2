{"ast":null,"code":"import _slicedToArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot as _getShadowRoot2 } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\n\nfunction extendStyles(dest, source, importantProperties) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      var value = source[key];\n\n      if (value) {\n        dest.setProperty(key, value, (importantProperties === null || importantProperties === void 0 ? void 0 : importantProperties.has(key)) ? 'important' : '');\n      } else {\n        dest.removeProperty(key);\n      }\n    }\n  }\n\n  return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\n\n\nfunction toggleNativeDragInteractions(element, enable) {\n  var userSelect = enable ? '' : 'none';\n  extendStyles(element.style, {\n    'touch-action': enable ? '' : 'none',\n    '-webkit-user-drag': enable ? '' : 'none',\n    '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n    'user-select': userSelect,\n    '-ms-user-select': userSelect,\n    '-webkit-user-select': userSelect,\n    '-moz-user-select': userSelect\n  });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\n\n\nfunction toggleVisibility(element, enable, importantProperties) {\n  extendStyles(element.style, {\n    position: enable ? '' : 'fixed',\n    top: enable ? '' : '0',\n    opacity: enable ? '' : '0',\n    left: enable ? '' : '-999em'\n  }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\n\n\nfunction combineTransforms(transform, initialTransform) {\n  return initialTransform ? transform + ' ' + initialTransform : transform;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\n\n\nfunction parseCssTimeUnitsToMs(value) {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\n\n\nfunction getTransformTransitionDurationInMs(element) {\n  var computedStyle = getComputedStyle(element);\n  var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  var property = transitionedProperties.find(function (prop) {\n    return prop === 'transform' || prop === 'all';\n  }); // If there's no transition for `all` or `transform`, we shouldn't do anything.\n\n  if (!property) {\n    return 0;\n  } // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n\n\n  var propertyIndex = transitionedProperties.indexOf(property);\n  var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\n\n\nfunction parseCssPropertyValue(computedStyle, name) {\n  var value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(function (part) {\n    return part.trim();\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\n\n\nfunction getMutableClientRect(element) {\n  var clientRect = element.getBoundingClientRect(); // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `ClientRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n\n  return {\n    top: clientRect.top,\n    right: clientRect.right,\n    bottom: clientRect.bottom,\n    left: clientRect.left,\n    width: clientRect.width,\n    height: clientRect.height\n  };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\n\n\nfunction isInsideClientRect(clientRect, x, y) {\n  var top = clientRect.top,\n      bottom = clientRect.bottom,\n      left = clientRect.left,\n      right = clientRect.right;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\n\n\nfunction adjustClientRect(clientRect, top, left) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\n\n\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n  var top = rect.top,\n      right = rect.right,\n      bottom = rect.bottom,\n      left = rect.left,\n      width = rect.width,\n      height = rect.height;\n  var xThreshold = width * threshold;\n  var yThreshold = height * threshold;\n  return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\n\n\nvar ParentPositionTracker = /*#__PURE__*/function () {\n  function ParentPositionTracker(_document, _viewportRuler) {\n    _classCallCheck(this, ParentPositionTracker);\n\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    /** Cached positions of the scrollable parent elements. */\n\n    this.positions = new Map();\n  }\n  /** Clears the cached positions. */\n\n\n  _createClass(ParentPositionTracker, [{\n    key: \"clear\",\n    value: function clear() {\n      this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n\n  }, {\n    key: \"cache\",\n    value: function cache(elements) {\n      var _this = this;\n\n      this.clear();\n      this.positions.set(this._document, {\n        scrollPosition: this._viewportRuler.getViewportScrollPosition()\n      });\n      elements.forEach(function (element) {\n        _this.positions.set(element, {\n          scrollPosition: {\n            top: element.scrollTop,\n            left: element.scrollLeft\n          },\n          clientRect: getMutableClientRect(element)\n        });\n      });\n    }\n    /** Handles scrolling while a drag is taking place. */\n\n  }, {\n    key: \"handleScroll\",\n    value: function handleScroll(event) {\n      var target = _getEventTarget(event);\n\n      var cachedPosition = this.positions.get(target);\n\n      if (!cachedPosition) {\n        return null;\n      } // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n      // parent is the `document`, we use the `documentElement`, because IE doesn't support\n      // `contains` on the `document`.\n\n\n      var scrolledParentNode = target === this._document ? target.documentElement : target;\n      var scrollPosition = cachedPosition.scrollPosition;\n      var newTop;\n      var newLeft;\n\n      if (target === this._document) {\n        var viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n        newTop = viewportScrollPosition.top;\n        newLeft = viewportScrollPosition.left;\n      } else {\n        newTop = target.scrollTop;\n        newLeft = target.scrollLeft;\n      }\n\n      var topDifference = scrollPosition.top - newTop;\n      var leftDifference = scrollPosition.left - newLeft; // Go through and update the cached positions of the scroll\n      // parents that are inside the element that was scrolled.\n\n      this.positions.forEach(function (position, node) {\n        if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n          adjustClientRect(position.clientRect, topDifference, leftDifference);\n        }\n      });\n      scrollPosition.top = newTop;\n      scrollPosition.left = newLeft;\n      return {\n        top: topDifference,\n        left: leftDifference\n      };\n    }\n  }]);\n\n  return ParentPositionTracker;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Creates a deep clone of an element. */\n\n\nfunction deepCloneNode(node) {\n  var clone = node.cloneNode(true);\n  var descendantsWithId = clone.querySelectorAll('[id]');\n  var nodeName = node.nodeName.toLowerCase(); // Remove the `id` to avoid having multiple elements with the same id on the page.\n\n  clone.removeAttribute('id');\n\n  for (var i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  if (nodeName === 'canvas') {\n    transferCanvasData(node, clone);\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n    transferInputData(node, clone);\n  }\n\n  transferData('canvas', node, clone, transferCanvasData);\n  transferData('input, textarea, select', node, clone, transferInputData);\n  return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\n\n\nfunction transferData(selector, node, clone, callback) {\n  var descendantElements = node.querySelectorAll(selector);\n\n  if (descendantElements.length) {\n    var cloneElements = clone.querySelectorAll(selector);\n\n    for (var i = 0; i < descendantElements.length; i++) {\n      callback(descendantElements[i], cloneElements[i]);\n    }\n  }\n} // Counter for unique cloned radio button names.\n\n\nvar cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\n\nfunction transferInputData(source, clone) {\n  // Browsers throw an error when assigning the value of a file input programmatically.\n  if (clone.type !== 'file') {\n    clone.value = source.value;\n  } // Radio button `name` attributes must be unique for radio button groups\n  // otherwise original radio buttons can lose their checked state\n  // once the clone is inserted in the DOM.\n\n\n  if (clone.type === 'radio' && clone.name) {\n    clone.name = \"mat-clone-\".concat(clone.name, \"-\").concat(cloneUniqueId++);\n  }\n}\n/** Transfers the data of one canvas element to another. */\n\n\nfunction transferCanvasData(source, clone) {\n  var context = clone.getContext('2d');\n\n  if (context) {\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n    // We can't do much about it so just ignore the error.\n    try {\n      context.drawImage(source, 0, 0);\n    } catch (_a) {}\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Options that can be used to bind a passive event listener. */\n\n\nvar passiveEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/** Options that can be used to bind an active event listener. */\n\nvar activeEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\n\nvar MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\n\nvar dragImportantProperties = /*#__PURE__*/new Set([// Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n'position']);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\n\nvar DragRef = /*#__PURE__*/function () {\n  function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    var _this2 = this;\n\n    _classCallCheck(this, DragRef);\n\n    this._config = _config;\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n\n    this._hasStartedDragging = false;\n    /** Emits when the item is being moved. */\n\n    this._moveEvents = new Subject();\n    /** Subscription to pointer movement events. */\n\n    this._pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n\n    this._pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n\n    this._scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Cached reference to the boundary element. */\n\n    this._boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n\n    this._nativeInteractionsEnabled = true;\n    /** Elements that can be used to drag the draggable item. */\n\n    this._handles = [];\n    /** Registered handles that are currently disabled. */\n\n    this._disabledHandles = new Set();\n    /** Layout direction of the item. */\n\n    this._direction = 'ltr';\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n\n    this.dragStartDelay = 0;\n    this._disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n\n    this.beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n\n    this.started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n\n    this.released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n\n    this.ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n\n    this.entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n\n    this.exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n\n    this.dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n\n    this.moved = this._moveEvents;\n    /** Handler for the `mousedown`/`touchstart` events. */\n\n    this._pointerDown = function (event) {\n      _this2.beforeStarted.next(); // Delegate the event based on whether it started from a handle or the element itself.\n\n\n      if (_this2._handles.length) {\n        var targetHandle = _this2._handles.find(function (handle) {\n          var target = _getEventTarget(event);\n\n          return !!target && (target === handle || handle.contains(target));\n        });\n\n        if (targetHandle && !_this2._disabledHandles.has(targetHandle) && !_this2.disabled) {\n          _this2._initializeDragSequence(targetHandle, event);\n        }\n      } else if (!_this2.disabled) {\n        _this2._initializeDragSequence(_this2._rootElement, event);\n      }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n\n\n    this._pointerMove = function (event) {\n      var pointerPosition = _this2._getPointerPositionOnPage(event);\n\n      if (!_this2._hasStartedDragging) {\n        var distanceX = Math.abs(pointerPosition.x - _this2._pickupPositionOnPage.x);\n        var distanceY = Math.abs(pointerPosition.y - _this2._pickupPositionOnPage.y);\n        var isOverThreshold = distanceX + distanceY >= _this2._config.dragStartThreshold; // Only start dragging after the user has moved more than the minimum distance in either\n        // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n        // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n        // per pixel of movement (e.g. if the user moves their pointer quickly).\n\n        if (isOverThreshold) {\n          var isDelayElapsed = Date.now() >= _this2._dragStartTime + _this2._getDragStartDelay(event);\n\n          var container = _this2._dropContainer;\n\n          if (!isDelayElapsed) {\n            _this2._endDragSequence(event);\n\n            return;\n          } // Prevent other drag sequences from starting while something in the container is still\n          // being dragged. This can happen while we're waiting for the drop animation to finish\n          // and can cause errors, because some elements might still be moving around.\n\n\n          if (!container || !container.isDragging() && !container.isReceiving()) {\n            // Prevent the default action as soon as the dragging sequence is considered as\n            // \"started\" since waiting for the next event can allow the device to begin scrolling.\n            event.preventDefault();\n            _this2._hasStartedDragging = true;\n\n            _this2._ngZone.run(function () {\n              return _this2._startDragSequence(event);\n            });\n          }\n        }\n\n        return;\n      } // We only need the preview dimensions if we have a boundary element.\n\n\n      if (_this2._boundaryElement) {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!_this2._previewRect || !_this2._previewRect.width && !_this2._previewRect.height) {\n          _this2._previewRect = (_this2._preview || _this2._rootElement).getBoundingClientRect();\n        }\n      } // We prevent the default action down here so that we know that dragging has started. This is\n      // important for touch devices where doing this too early can unnecessarily block scrolling,\n      // if there's a dragging delay.\n\n\n      event.preventDefault();\n\n      var constrainedPointerPosition = _this2._getConstrainedPointerPosition(pointerPosition);\n\n      _this2._hasMoved = true;\n      _this2._lastKnownPointerPosition = pointerPosition;\n\n      _this2._updatePointerDirectionDelta(constrainedPointerPosition);\n\n      if (_this2._dropContainer) {\n        _this2._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n      } else {\n        var activeTransform = _this2._activeTransform;\n        activeTransform.x = constrainedPointerPosition.x - _this2._pickupPositionOnPage.x + _this2._passiveTransform.x;\n        activeTransform.y = constrainedPointerPosition.y - _this2._pickupPositionOnPage.y + _this2._passiveTransform.y;\n\n        _this2._applyRootElementTransform(activeTransform.x, activeTransform.y); // Apply transform as attribute if dragging and svg element to work for IE\n\n\n        if (typeof SVGElement !== 'undefined' && _this2._rootElement instanceof SVGElement) {\n          var appliedTransform = \"translate(\".concat(activeTransform.x, \" \").concat(activeTransform.y, \")\");\n\n          _this2._rootElement.setAttribute('transform', appliedTransform);\n        }\n      } // Since this event gets fired for every pixel while dragging, we only\n      // want to fire it if the consumer opted into it. Also we have to\n      // re-enter the zone because we run all of the events on the outside.\n\n\n      if (_this2._moveEvents.observers.length) {\n        _this2._ngZone.run(function () {\n          _this2._moveEvents.next({\n            source: _this2,\n            pointerPosition: constrainedPointerPosition,\n            event: event,\n            distance: _this2._getDragDistance(constrainedPointerPosition),\n            delta: _this2._pointerDirectionDelta\n          });\n        });\n      }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n\n\n    this._pointerUp = function (event) {\n      _this2._endDragSequence(event);\n    };\n\n    this.withRootElement(element).withParent(_config.parentDragRef || null);\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n\n    _dragDropRegistry.registerDragItem(this);\n  }\n  /** Whether starting to drag this element is disabled. */\n\n\n  _createClass(DragRef, [{\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    },\n    set: function set(value) {\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._disabled) {\n        this._disabled = newValue;\n\n        this._toggleNativeDragInteractions();\n\n        this._handles.forEach(function (handle) {\n          return toggleNativeDragInteractions(handle, newValue);\n        });\n      }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n\n  }, {\n    key: \"getPlaceholderElement\",\n    value: function getPlaceholderElement() {\n      return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n\n  }, {\n    key: \"getRootElement\",\n    value: function getRootElement() {\n      return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n\n  }, {\n    key: \"getVisibleElement\",\n    value: function getVisibleElement() {\n      return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n\n  }, {\n    key: \"withHandles\",\n    value: function withHandles(handles) {\n      var _this3 = this;\n\n      this._handles = handles.map(function (handle) {\n        return coerceElement(handle);\n      });\n\n      this._handles.forEach(function (handle) {\n        return toggleNativeDragInteractions(handle, _this3.disabled);\n      });\n\n      this._toggleNativeDragInteractions(); // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n      // the set, rather than iterate over it and filter out the destroyed handles, because while\n      // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n      // use an array internally which may throw an error.\n\n\n      var disabledHandles = new Set();\n\n      this._disabledHandles.forEach(function (handle) {\n        if (_this3._handles.indexOf(handle) > -1) {\n          disabledHandles.add(handle);\n        }\n      });\n\n      this._disabledHandles = disabledHandles;\n      return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n\n  }, {\n    key: \"withPreviewTemplate\",\n    value: function withPreviewTemplate(template) {\n      this._previewTemplate = template;\n      return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n\n  }, {\n    key: \"withPlaceholderTemplate\",\n    value: function withPlaceholderTemplate(template) {\n      this._placeholderTemplate = template;\n      return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n\n  }, {\n    key: \"withRootElement\",\n    value: function withRootElement(rootElement) {\n      var _this4 = this;\n\n      var element = coerceElement(rootElement);\n\n      if (element !== this._rootElement) {\n        if (this._rootElement) {\n          this._removeRootElementListeners(this._rootElement);\n        }\n\n        this._ngZone.runOutsideAngular(function () {\n          element.addEventListener('mousedown', _this4._pointerDown, activeEventListenerOptions);\n          element.addEventListener('touchstart', _this4._pointerDown, passiveEventListenerOptions);\n        });\n\n        this._initialTransform = undefined;\n        this._rootElement = element;\n      }\n\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        this._ownerSVGElement = this._rootElement.ownerSVGElement;\n      }\n\n      return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n\n  }, {\n    key: \"withBoundaryElement\",\n    value: function withBoundaryElement(boundaryElement) {\n      var _this5 = this;\n\n      this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n\n      this._resizeSubscription.unsubscribe();\n\n      if (boundaryElement) {\n        this._resizeSubscription = this._viewportRuler.change(10).subscribe(function () {\n          return _this5._containInsideBoundaryOnResize();\n        });\n      }\n\n      return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n\n  }, {\n    key: \"withParent\",\n    value: function withParent(parent) {\n      this._parentDragRef = parent;\n      return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._removeRootElementListeners(this._rootElement); // Do this check before removing from the registry since it'll\n      // stop being considered as dragged once it is removed.\n\n\n      if (this.isDragging()) {\n        // Since we move out the element to the end of the body while it's being\n        // dragged, we have to make sure that it's removed if it gets destroyed.\n        removeNode(this._rootElement);\n      }\n\n      removeNode(this._anchor);\n\n      this._destroyPreview();\n\n      this._destroyPlaceholder();\n\n      this._dragDropRegistry.removeDragItem(this);\n\n      this._removeSubscriptions();\n\n      this.beforeStarted.complete();\n      this.started.complete();\n      this.released.complete();\n      this.ended.complete();\n      this.entered.complete();\n      this.exited.complete();\n      this.dropped.complete();\n\n      this._moveEvents.complete();\n\n      this._handles = [];\n\n      this._disabledHandles.clear();\n\n      this._dropContainer = undefined;\n\n      this._resizeSubscription.unsubscribe();\n\n      this._parentPositions.clear();\n\n      this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate = this._previewTemplate = this._anchor = this._parentDragRef = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._rootElement.style.transform = this._initialTransform || '';\n      this._activeTransform = {\n        x: 0,\n        y: 0\n      };\n      this._passiveTransform = {\n        x: 0,\n        y: 0\n      };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n\n  }, {\n    key: \"disableHandle\",\n    value: function disableHandle(handle) {\n      if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n        this._disabledHandles.add(handle);\n\n        toggleNativeDragInteractions(handle, true);\n      }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n\n  }, {\n    key: \"enableHandle\",\n    value: function enableHandle(handle) {\n      if (this._disabledHandles.has(handle)) {\n        this._disabledHandles.delete(handle);\n\n        toggleNativeDragInteractions(handle, this.disabled);\n      }\n    }\n    /** Sets the layout direction of the draggable item. */\n\n  }, {\n    key: \"withDirection\",\n    value: function withDirection(direction) {\n      this._direction = direction;\n      return this;\n    }\n    /** Sets the container that the item is part of. */\n\n  }, {\n    key: \"_withDropContainer\",\n    value: function _withDropContainer(container) {\n      this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n\n  }, {\n    key: \"getFreeDragPosition\",\n    value: function getFreeDragPosition() {\n      var position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n      return {\n        x: position.x,\n        y: position.y\n      };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n\n  }, {\n    key: \"setFreeDragPosition\",\n    value: function setFreeDragPosition(value) {\n      this._activeTransform = {\n        x: 0,\n        y: 0\n      };\n      this._passiveTransform.x = value.x;\n      this._passiveTransform.y = value.y;\n\n      if (!this._dropContainer) {\n        this._applyRootElementTransform(value.x, value.y);\n      }\n\n      return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n\n  }, {\n    key: \"withPreviewContainer\",\n    value: function withPreviewContainer(value) {\n      this._previewContainer = value;\n      return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n\n  }, {\n    key: \"_sortFromLastPointerPosition\",\n    value: function _sortFromLastPointerPosition() {\n      var position = this._lastKnownPointerPosition;\n\n      if (position && this._dropContainer) {\n        this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n      }\n    }\n    /** Unsubscribes from the global subscriptions. */\n\n  }, {\n    key: \"_removeSubscriptions\",\n    value: function _removeSubscriptions() {\n      this._pointerMoveSubscription.unsubscribe();\n\n      this._pointerUpSubscription.unsubscribe();\n\n      this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n\n  }, {\n    key: \"_destroyPreview\",\n    value: function _destroyPreview() {\n      if (this._preview) {\n        removeNode(this._preview);\n      }\n\n      if (this._previewRef) {\n        this._previewRef.destroy();\n      }\n\n      this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n\n  }, {\n    key: \"_destroyPlaceholder\",\n    value: function _destroyPlaceholder() {\n      if (this._placeholder) {\n        removeNode(this._placeholder);\n      }\n\n      if (this._placeholderRef) {\n        this._placeholderRef.destroy();\n      }\n\n      this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n\n  }, {\n    key: \"_endDragSequence\",\n    value: function _endDragSequence(event) {\n      var _this6 = this;\n\n      // Note that here we use `isDragging` from the service, rather than from `this`.\n      // The difference is that the one from the service reflects whether a dragging sequence\n      // has been initiated, whereas the one on `this` includes whether the user has passed\n      // the minimum dragging threshold.\n      if (!this._dragDropRegistry.isDragging(this)) {\n        return;\n      }\n\n      this._removeSubscriptions();\n\n      this._dragDropRegistry.stopDragging(this);\n\n      this._toggleNativeDragInteractions();\n\n      if (this._handles) {\n        this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n      }\n\n      if (!this._hasStartedDragging) {\n        return;\n      }\n\n      this.released.next({\n        source: this\n      });\n\n      if (this._dropContainer) {\n        // Stop scrolling immediately, instead of waiting for the animation to finish.\n        this._dropContainer._stopScrolling();\n\n        this._animatePreviewToPlaceholder().then(function () {\n          _this6._cleanupDragArtifacts(event);\n\n          _this6._cleanupCachedDimensions();\n\n          _this6._dragDropRegistry.stopDragging(_this6);\n        });\n      } else {\n        // Convert the active transform into a passive one. This means that next time\n        // the user starts dragging the item, its position will be calculated relatively\n        // to the new passive transform.\n        this._passiveTransform.x = this._activeTransform.x;\n\n        var pointerPosition = this._getPointerPositionOnPage(event);\n\n        this._passiveTransform.y = this._activeTransform.y;\n\n        this._ngZone.run(function () {\n          _this6.ended.next({\n            source: _this6,\n            distance: _this6._getDragDistance(pointerPosition),\n            dropPoint: pointerPosition\n          });\n        });\n\n        this._cleanupCachedDimensions();\n\n        this._dragDropRegistry.stopDragging(this);\n      }\n    }\n    /** Starts the dragging sequence. */\n\n  }, {\n    key: \"_startDragSequence\",\n    value: function _startDragSequence(event) {\n      if (isTouchEvent(event)) {\n        this._lastTouchEventTime = Date.now();\n      }\n\n      this._toggleNativeDragInteractions();\n\n      var dropContainer = this._dropContainer;\n\n      if (dropContainer) {\n        var element = this._rootElement;\n        var parent = element.parentNode;\n\n        var placeholder = this._placeholder = this._createPlaceholderElement();\n\n        var anchor = this._anchor = this._anchor || this._document.createComment(''); // Needs to happen before the root element is moved.\n\n\n        var shadowRoot = this._getShadowRoot(); // Insert an anchor node so that we can restore the element's position in the DOM.\n\n\n        parent.insertBefore(anchor, element); // There's no risk of transforms stacking when inside a drop container so\n        // we can keep the initial transform up to date any time dragging starts.\n\n        this._initialTransform = element.style.transform || ''; // Create the preview after the initial transform has\n        // been cached, because it can be affected by the transform.\n\n        this._preview = this._createPreviewElement(); // We move the element out at the end of the body and we make it hidden, because keeping it in\n        // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n        // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n\n        toggleVisibility(element, false, dragImportantProperties);\n\n        this._document.body.appendChild(parent.replaceChild(placeholder, element));\n\n        this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n\n        this.started.next({\n          source: this\n        }); // Emit before notifying the container.\n\n        dropContainer.start();\n        this._initialContainer = dropContainer;\n        this._initialIndex = dropContainer.getItemIndex(this);\n      } else {\n        this.started.next({\n          source: this\n        });\n        this._initialContainer = this._initialIndex = undefined;\n      } // Important to run after we've called `start` on the parent container\n      // so that it has had time to resolve its scrollable parents.\n\n\n      this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n\n  }, {\n    key: \"_initializeDragSequence\",\n    value: function _initializeDragSequence(referenceElement, event) {\n      var _this7 = this;\n\n      // Stop propagation if the item is inside another\n      // draggable so we don't start multiple drag sequences.\n      if (this._parentDragRef) {\n        event.stopPropagation();\n      }\n\n      var isDragging = this.isDragging();\n      var isTouchSequence = isTouchEvent(event);\n      var isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n      var rootElement = this._rootElement;\n\n      var target = _getEventTarget(event);\n\n      var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n      var isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) : isFakeMousedownFromScreenReader(event); // If the event started from an element with the native HTML drag&drop, it'll interfere\n      // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n      // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n      // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n      // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n      // events from firing on touch devices.\n\n      if (target && target.draggable && event.type === 'mousedown') {\n        event.preventDefault();\n      } // Abort if the user is already dragging or is using a mouse button other than the primary one.\n\n\n      if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n        return;\n      } // If we've got handles, we need to disable the tap highlight on the entire root element,\n      // otherwise iOS will still add it, even though all the drag interactions on the handle\n      // are disabled.\n\n\n      if (this._handles.length) {\n        this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n        rootElement.style.webkitTapHighlightColor = 'transparent';\n      }\n\n      this._hasStartedDragging = this._hasMoved = false; // Avoid multiple subscriptions and memory leaks when multi touch\n      // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n\n      this._removeSubscriptions();\n\n      this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n      this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n      this._scrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(function (scrollEvent) {\n        return _this7._updateOnScroll(scrollEvent);\n      });\n\n      if (this._boundaryElement) {\n        this._boundaryRect = getMutableClientRect(this._boundaryElement);\n      } // If we have a custom preview we can't know ahead of time how large it'll be so we position\n      // it next to the cursor. The exception is when the consumer has opted into making the preview\n      // the same size as the root element, in which case we do know the size.\n\n\n      var previewTemplate = this._previewTemplate;\n      this._pickupPositionInElement = previewTemplate && previewTemplate.template && !previewTemplate.matchSize ? {\n        x: 0,\n        y: 0\n      } : this._getPointerPositionInElement(referenceElement, event);\n\n      var pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition = this._getPointerPositionOnPage(event);\n\n      this._pointerDirectionDelta = {\n        x: 0,\n        y: 0\n      };\n      this._pointerPositionAtLastDirectionChange = {\n        x: pointerPosition.x,\n        y: pointerPosition.y\n      };\n      this._dragStartTime = Date.now();\n\n      this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n\n  }, {\n    key: \"_cleanupDragArtifacts\",\n    value: function _cleanupDragArtifacts(event) {\n      var _this8 = this;\n\n      // Restore the element's visibility and insert it at its old position in the DOM.\n      // It's important that we maintain the position, because moving the element around in the DOM\n      // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n      // while moving the existing elements in all other cases.\n      toggleVisibility(this._rootElement, true, dragImportantProperties);\n\n      this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n\n      this._destroyPreview();\n\n      this._destroyPlaceholder();\n\n      this._boundaryRect = this._previewRect = this._initialTransform = undefined; // Re-enter the NgZone since we bound `document` events on the outside.\n\n      this._ngZone.run(function () {\n        var container = _this8._dropContainer;\n        var currentIndex = container.getItemIndex(_this8);\n\n        var pointerPosition = _this8._getPointerPositionOnPage(event);\n\n        var distance = _this8._getDragDistance(pointerPosition);\n\n        var isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n\n        _this8.ended.next({\n          source: _this8,\n          distance: distance,\n          dropPoint: pointerPosition\n        });\n\n        _this8.dropped.next({\n          item: _this8,\n          currentIndex: currentIndex,\n          previousIndex: _this8._initialIndex,\n          container: container,\n          previousContainer: _this8._initialContainer,\n          isPointerOverContainer: isPointerOverContainer,\n          distance: distance,\n          dropPoint: pointerPosition\n        });\n\n        container.drop(_this8, currentIndex, _this8._initialIndex, _this8._initialContainer, isPointerOverContainer, distance, pointerPosition);\n        _this8._dropContainer = _this8._initialContainer;\n      });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n\n  }, {\n    key: \"_updateActiveDropContainer\",\n    value: function _updateActiveDropContainer(_ref, _ref2) {\n      var _this9 = this;\n\n      var x = _ref.x,\n          y = _ref.y;\n      var rawX = _ref2.x,\n          rawY = _ref2.y;\n\n      // Drop container that draggable has been moved into.\n      var newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y); // If we couldn't find a new container to move the item into, and the item has left its\n      // initial container, check whether the it's over the initial container. This handles the\n      // case where two containers are connected one way and the user tries to undo dragging an\n      // item into a new container.\n\n\n      if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x, y)) {\n        newContainer = this._initialContainer;\n      }\n\n      if (newContainer && newContainer !== this._dropContainer) {\n        this._ngZone.run(function () {\n          // Notify the old container that the item has left.\n          _this9.exited.next({\n            item: _this9,\n            container: _this9._dropContainer\n          });\n\n          _this9._dropContainer.exit(_this9); // Notify the new container that the item has entered.\n\n\n          _this9._dropContainer = newContainer;\n\n          _this9._dropContainer.enter(_this9, x, y, newContainer === _this9._initialContainer && // If we're re-entering the initial container and sorting is disabled,\n          // put item the into its starting index to begin with.\n          newContainer.sortingDisabled ? _this9._initialIndex : undefined);\n\n          _this9.entered.next({\n            item: _this9,\n            container: newContainer,\n            currentIndex: newContainer.getItemIndex(_this9)\n          });\n        });\n      } // Dragging may have been interrupted as a result of the events above.\n\n\n      if (this.isDragging()) {\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n\n        this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n      }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n\n  }, {\n    key: \"_createPreviewElement\",\n    value: function _createPreviewElement() {\n      var previewConfig = this._previewTemplate;\n      var previewClass = this.previewClass;\n      var previewTemplate = previewConfig ? previewConfig.template : null;\n      var preview;\n\n      if (previewTemplate && previewConfig) {\n        // Measure the element before we've inserted the preview\n        // since the insertion could throw off the measurement.\n        var rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n        var viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n        viewRef.detectChanges();\n        preview = getRootNode(viewRef, this._document);\n        this._previewRef = viewRef;\n\n        if (previewConfig.matchSize) {\n          matchElementSize(preview, rootRect);\n        } else {\n          preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n        }\n      } else {\n        var element = this._rootElement;\n        preview = deepCloneNode(element);\n        matchElementSize(preview, element.getBoundingClientRect());\n\n        if (this._initialTransform) {\n          preview.style.transform = this._initialTransform;\n        }\n      }\n\n      extendStyles(preview.style, {\n        // It's important that we disable the pointer events on the preview, because\n        // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n        'pointer-events': 'none',\n        // We have to reset the margin, because it can throw off positioning relative to the viewport.\n        'margin': '0',\n        'position': 'fixed',\n        'top': '0',\n        'left': '0',\n        'z-index': \"\".concat(this._config.zIndex || 1000)\n      }, dragImportantProperties);\n      toggleNativeDragInteractions(preview, false);\n      preview.classList.add('cdk-drag-preview');\n      preview.setAttribute('dir', this._direction);\n\n      if (previewClass) {\n        if (Array.isArray(previewClass)) {\n          previewClass.forEach(function (className) {\n            return preview.classList.add(className);\n          });\n        } else {\n          preview.classList.add(previewClass);\n        }\n      }\n\n      return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n\n  }, {\n    key: \"_animatePreviewToPlaceholder\",\n    value: function _animatePreviewToPlaceholder() {\n      var _this10 = this;\n\n      // If the user hasn't moved yet, the transitionend event won't fire.\n      if (!this._hasMoved) {\n        return Promise.resolve();\n      }\n\n      var placeholderRect = this._placeholder.getBoundingClientRect(); // Apply the class that adds a transition to the preview.\n\n\n      this._preview.classList.add('cdk-drag-animating'); // Move the preview to the placeholder position.\n\n\n      this._applyPreviewTransform(placeholderRect.left, placeholderRect.top); // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n      // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n      // apply its style, we take advantage of the available info to figure out whether we need to\n      // bind the event in the first place.\n\n\n      var duration = getTransformTransitionDurationInMs(this._preview);\n\n      if (duration === 0) {\n        return Promise.resolve();\n      }\n\n      return this._ngZone.runOutsideAngular(function () {\n        return new Promise(function (resolve) {\n          var handler = function handler(event) {\n            if (!event || _getEventTarget(event) === _this10._preview && event.propertyName === 'transform') {\n              _this10._preview.removeEventListener('transitionend', handler);\n\n              resolve();\n              clearTimeout(timeout);\n            }\n          }; // If a transition is short enough, the browser might not fire the `transitionend` event.\n          // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n          // fire if the transition hasn't completed when it was supposed to.\n\n\n          var timeout = setTimeout(handler, duration * 1.5);\n\n          _this10._preview.addEventListener('transitionend', handler);\n        });\n      });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n\n  }, {\n    key: \"_createPlaceholderElement\",\n    value: function _createPlaceholderElement() {\n      var placeholderConfig = this._placeholderTemplate;\n      var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n      var placeholder;\n\n      if (placeholderTemplate) {\n        this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n\n        this._placeholderRef.detectChanges();\n\n        placeholder = getRootNode(this._placeholderRef, this._document);\n      } else {\n        placeholder = deepCloneNode(this._rootElement);\n      }\n\n      placeholder.classList.add('cdk-drag-placeholder');\n      return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n\n  }, {\n    key: \"_getPointerPositionInElement\",\n    value: function _getPointerPositionInElement(referenceElement, event) {\n      var elementRect = this._rootElement.getBoundingClientRect();\n\n      var handleElement = referenceElement === this._rootElement ? null : referenceElement;\n      var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n      var point = isTouchEvent(event) ? event.targetTouches[0] : event;\n\n      var scrollPosition = this._getViewportScrollPosition();\n\n      var x = point.pageX - referenceRect.left - scrollPosition.left;\n      var y = point.pageY - referenceRect.top - scrollPosition.top;\n      return {\n        x: referenceRect.left - elementRect.left + x,\n        y: referenceRect.top - elementRect.top + y\n      };\n    }\n    /** Determines the point of the page that was touched by the user. */\n\n  }, {\n    key: \"_getPointerPositionOnPage\",\n    value: function _getPointerPositionOnPage(event) {\n      var scrollPosition = this._getViewportScrollPosition();\n\n      var point = isTouchEvent(event) ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n      // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n      // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n      // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n      // throwing an error. The value returned here will be incorrect, but since this only\n      // breaks inside a developer tool and the value is only used for secondary information,\n      // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n      event.touches[0] || event.changedTouches[0] || {\n        pageX: 0,\n        pageY: 0\n      } : event;\n      var x = point.pageX - scrollPosition.left;\n      var y = point.pageY - scrollPosition.top; // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n      // coordinate system\n\n      if (this._ownerSVGElement) {\n        var svgMatrix = this._ownerSVGElement.getScreenCTM();\n\n        if (svgMatrix) {\n          var svgPoint = this._ownerSVGElement.createSVGPoint();\n\n          svgPoint.x = x;\n          svgPoint.y = y;\n          return svgPoint.matrixTransform(svgMatrix.inverse());\n        }\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n\n  }, {\n    key: \"_getConstrainedPointerPosition\",\n    value: function _getConstrainedPointerPosition(point) {\n      var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n      var _ref3 = this.constrainPosition ? this.constrainPosition(point, this) : point,\n          x = _ref3.x,\n          y = _ref3.y;\n\n      if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n        y = this._pickupPositionOnPage.y;\n      } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n        x = this._pickupPositionOnPage.x;\n      }\n\n      if (this._boundaryRect) {\n        var _this$_pickupPosition = this._pickupPositionInElement,\n            pickupX = _this$_pickupPosition.x,\n            pickupY = _this$_pickupPosition.y;\n        var boundaryRect = this._boundaryRect;\n        var previewRect = this._previewRect;\n        var minY = boundaryRect.top + pickupY;\n        var maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n        var minX = boundaryRect.left + pickupX;\n        var maxX = boundaryRect.right - (previewRect.width - pickupX);\n        x = clamp$1(x, minX, maxX);\n        y = clamp$1(y, minY, maxY);\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n\n  }, {\n    key: \"_updatePointerDirectionDelta\",\n    value: function _updatePointerDirectionDelta(pointerPositionOnPage) {\n      var x = pointerPositionOnPage.x,\n          y = pointerPositionOnPage.y;\n      var delta = this._pointerDirectionDelta;\n      var positionSinceLastChange = this._pointerPositionAtLastDirectionChange; // Amount of pixels the user has dragged since the last time the direction changed.\n\n      var changeX = Math.abs(x - positionSinceLastChange.x);\n      var changeY = Math.abs(y - positionSinceLastChange.y); // Because we handle pointer events on a per-pixel basis, we don't want the delta\n      // to change for every pixel, otherwise anything that depends on it can look erratic.\n      // To make the delta more consistent, we track how much the user has moved since the last\n      // delta change and we only update it after it has reached a certain threshold.\n\n      if (changeX > this._config.pointerDirectionChangeThreshold) {\n        delta.x = x > positionSinceLastChange.x ? 1 : -1;\n        positionSinceLastChange.x = x;\n      }\n\n      if (changeY > this._config.pointerDirectionChangeThreshold) {\n        delta.y = y > positionSinceLastChange.y ? 1 : -1;\n        positionSinceLastChange.y = y;\n      }\n\n      return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n\n  }, {\n    key: \"_toggleNativeDragInteractions\",\n    value: function _toggleNativeDragInteractions() {\n      if (!this._rootElement || !this._handles) {\n        return;\n      }\n\n      var shouldEnable = this._handles.length > 0 || !this.isDragging();\n\n      if (shouldEnable !== this._nativeInteractionsEnabled) {\n        this._nativeInteractionsEnabled = shouldEnable;\n        toggleNativeDragInteractions(this._rootElement, shouldEnable);\n      }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n\n  }, {\n    key: \"_removeRootElementListeners\",\n    value: function _removeRootElementListeners(element) {\n      element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n\n  }, {\n    key: \"_applyRootElementTransform\",\n    value: function _applyRootElementTransform(x, y) {\n      var transform = getTransform(x, y); // Cache the previous transform amount only after the first drag sequence, because\n      // we don't want our own transforms to stack on top of each other.\n\n      if (this._initialTransform == null) {\n        this._initialTransform = this._rootElement.style.transform || '';\n      } // Preserve the previous `transform` value, if there was one. Note that we apply our own\n      // transform before the user's, because things like rotation can affect which direction\n      // the element will be translated towards.\n\n\n      this._rootElement.style.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n\n  }, {\n    key: \"_applyPreviewTransform\",\n    value: function _applyPreviewTransform(x, y) {\n      var _a; // Only apply the initial transform if the preview is a clone of the original element, otherwise\n      // it could be completely different and the transform might not make sense anymore.\n\n\n      var initialTransform = ((_a = this._previewTemplate) === null || _a === void 0 ? void 0 : _a.template) ? undefined : this._initialTransform;\n      var transform = getTransform(x, y);\n      this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n\n  }, {\n    key: \"_getDragDistance\",\n    value: function _getDragDistance(currentPosition) {\n      var pickupPosition = this._pickupPositionOnPage;\n\n      if (pickupPosition) {\n        return {\n          x: currentPosition.x - pickupPosition.x,\n          y: currentPosition.y - pickupPosition.y\n        };\n      }\n\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n\n  }, {\n    key: \"_cleanupCachedDimensions\",\n    value: function _cleanupCachedDimensions() {\n      this._boundaryRect = this._previewRect = undefined;\n\n      this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n\n  }, {\n    key: \"_containInsideBoundaryOnResize\",\n    value: function _containInsideBoundaryOnResize() {\n      var _this$_passiveTransfo = this._passiveTransform,\n          x = _this$_passiveTransfo.x,\n          y = _this$_passiveTransfo.y;\n\n      if (x === 0 && y === 0 || this.isDragging() || !this._boundaryElement) {\n        return;\n      }\n\n      var boundaryRect = this._boundaryElement.getBoundingClientRect();\n\n      var elementRect = this._rootElement.getBoundingClientRect(); // It's possible that the element got hidden away after dragging (e.g. by switching to a\n      // different tab). Don't do anything in this case so we don't clear the user's position.\n\n\n      if (boundaryRect.width === 0 && boundaryRect.height === 0 || elementRect.width === 0 && elementRect.height === 0) {\n        return;\n      }\n\n      var leftOverflow = boundaryRect.left - elementRect.left;\n      var rightOverflow = elementRect.right - boundaryRect.right;\n      var topOverflow = boundaryRect.top - elementRect.top;\n      var bottomOverflow = elementRect.bottom - boundaryRect.bottom; // If the element has become wider than the boundary, we can't\n      // do much to make it fit so we just anchor it to the left.\n\n      if (boundaryRect.width > elementRect.width) {\n        if (leftOverflow > 0) {\n          x += leftOverflow;\n        }\n\n        if (rightOverflow > 0) {\n          x -= rightOverflow;\n        }\n      } else {\n        x = 0;\n      } // If the element has become taller than the boundary, we can't\n      // do much to make it fit so we just anchor it to the top.\n\n\n      if (boundaryRect.height > elementRect.height) {\n        if (topOverflow > 0) {\n          y += topOverflow;\n        }\n\n        if (bottomOverflow > 0) {\n          y -= bottomOverflow;\n        }\n      } else {\n        y = 0;\n      }\n\n      if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n        this.setFreeDragPosition({\n          y: y,\n          x: x\n        });\n      }\n    }\n    /** Gets the drag start delay, based on the event type. */\n\n  }, {\n    key: \"_getDragStartDelay\",\n    value: function _getDragStartDelay(event) {\n      var value = this.dragStartDelay;\n\n      if (typeof value === 'number') {\n        return value;\n      } else if (isTouchEvent(event)) {\n        return value.touch;\n      }\n\n      return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n\n  }, {\n    key: \"_updateOnScroll\",\n    value: function _updateOnScroll(event) {\n      var scrollDifference = this._parentPositions.handleScroll(event);\n\n      if (scrollDifference) {\n        var target = _getEventTarget(event); // ClientRect dimensions are based on the scroll position of the page and its parent node so\n        // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n        // the `document` specifically since IE doesn't support `contains` on it.\n\n\n        if (this._boundaryRect && (target === this._document || target !== this._boundaryElement && target.contains(this._boundaryElement))) {\n          adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n        }\n\n        this._pickupPositionOnPage.x += scrollDifference.left;\n        this._pickupPositionOnPage.y += scrollDifference.top; // If we're in free drag mode, we have to update the active transform, because\n        // it isn't relative to the viewport like the preview inside a drop list.\n\n        if (!this._dropContainer) {\n          this._activeTransform.x -= scrollDifference.left;\n          this._activeTransform.y -= scrollDifference.top;\n\n          this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n        }\n      }\n    }\n    /** Gets the scroll position of the viewport. */\n\n  }, {\n    key: \"_getViewportScrollPosition\",\n    value: function _getViewportScrollPosition() {\n      var cachedPosition = this._parentPositions.positions.get(this._document);\n\n      return cachedPosition ? cachedPosition.scrollPosition : this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n\n  }, {\n    key: \"_getShadowRoot\",\n    value: function _getShadowRoot() {\n      if (this._cachedShadowRoot === undefined) {\n        this._cachedShadowRoot = _getShadowRoot2(this._rootElement);\n      }\n\n      return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n\n  }, {\n    key: \"_getPreviewInsertionPoint\",\n    value: function _getPreviewInsertionPoint(initialParent, shadowRoot) {\n      var previewContainer = this._previewContainer || 'global';\n\n      if (previewContainer === 'parent') {\n        return initialParent;\n      }\n\n      if (previewContainer === 'global') {\n        var documentRef = this._document; // We can't use the body if the user is in fullscreen mode,\n        // because the preview will render under the fullscreen element.\n        // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n\n        return shadowRoot || documentRef.fullscreenElement || documentRef.webkitFullscreenElement || documentRef.mozFullScreenElement || documentRef.msFullscreenElement || documentRef.body;\n      }\n\n      return coerceElement(previewContainer);\n    }\n  }]);\n\n  return DragRef;\n}();\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\n\n\nfunction getTransform(x, y) {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return \"translate3d(\".concat(Math.round(x), \"px, \").concat(Math.round(y), \"px, 0)\");\n}\n/** Clamps a value between a minimum and a maximum. */\n\n\nfunction clamp$1(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\n\n\nfunction removeNode(node) {\n  if (node && node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n}\n/** Determines whether an event is a touch event. */\n\n\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\n\n\nfunction getRootNode(viewRef, _document) {\n  var rootNodes = viewRef.rootNodes;\n\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n    return rootNodes[0];\n  }\n\n  var wrapper = _document.createElement('div');\n\n  rootNodes.forEach(function (node) {\n    return wrapper.appendChild(node);\n  });\n  return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\n\n\nfunction matchElementSize(target, sourceRect) {\n  target.style.width = \"\".concat(sourceRect.width, \"px\");\n  target.style.height = \"\".concat(sourceRect.height, \"px\");\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\n\n\nfunction moveItemInArray(array, fromIndex, toIndex) {\n  var from = clamp(fromIndex, array.length - 1);\n  var to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  var target = array[from];\n  var delta = to < from ? -1 : 1;\n\n  for (var i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\n\n\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  var from = clamp(currentIndex, currentArray.length - 1);\n  var to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\n\n\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  var to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n/** Clamps a number between zero and a maximum. */\n\n\nfunction clamp(value, max) {\n  return Math.max(0, Math.min(max, value));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\n\n\nvar DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\n\nvar SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\n\nvar DropListRef = /*#__PURE__*/function () {\n  function DropListRef(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n    var _this11 = this;\n\n    _classCallCheck(this, DropListRef);\n\n    this._dragDropRegistry = _dragDropRegistry;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    /** Whether starting a dragging sequence from this container is disabled. */\n\n    this.disabled = false;\n    /** Whether sorting items within the list is disabled. */\n\n    this.sortingDisabled = false;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n\n    this.autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n\n    this.autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n\n    this.enterPredicate = function () {\n      return true;\n    };\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n\n\n    this.sortPredicate = function () {\n      return true;\n    };\n    /** Emits right before dragging has started. */\n\n\n    this.beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n\n    this.entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n\n    this.exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n\n    this.dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n\n    this.sorted = new Subject();\n    /** Whether an item in the list is being dragged. */\n\n    this._isDragging = false;\n    /** Cache of the dimensions of all the items inside the container. */\n\n    this._itemPositions = [];\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occured and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n\n    this._previousSwap = {\n      drag: null,\n      delta: 0,\n      overlaps: false\n    };\n    /** Draggable items in the container. */\n\n    this._draggables = [];\n    /** Drop lists that are connected to the current one. */\n\n    this._siblings = [];\n    /** Direction in which the list is oriented. */\n\n    this._orientation = 'vertical';\n    /** Connected siblings that currently have a dragged item. */\n\n    this._activeSiblings = new Set();\n    /** Layout direction of the drop list. */\n\n    this._direction = 'ltr';\n    /** Subscription to the window being scrolled. */\n\n    this._viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n\n    this._verticalScrollDirection = 0\n    /* NONE */\n    ;\n    /** Horizontal direction in which the list is currently scrolling. */\n\n    this._horizontalScrollDirection = 0\n    /* NONE */\n    ;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n\n    this._stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n\n    this._cachedShadowRoot = null;\n    /** Starts the interval that'll auto-scroll the element. */\n\n    this._startScrollInterval = function () {\n      _this11._stopScrolling();\n\n      interval(0, animationFrameScheduler).pipe(takeUntil(_this11._stopScrollTimers)).subscribe(function () {\n        var node = _this11._scrollNode;\n        var scrollStep = _this11.autoScrollStep;\n\n        if (_this11._verticalScrollDirection === 1\n        /* UP */\n        ) {\n          incrementVerticalScroll(node, -scrollStep);\n        } else if (_this11._verticalScrollDirection === 2\n        /* DOWN */\n        ) {\n          incrementVerticalScroll(node, scrollStep);\n        }\n\n        if (_this11._horizontalScrollDirection === 1\n        /* LEFT */\n        ) {\n          incrementHorizontalScroll(node, -scrollStep);\n        } else if (_this11._horizontalScrollDirection === 2\n        /* RIGHT */\n        ) {\n          incrementHorizontalScroll(node, scrollStep);\n        }\n      });\n    };\n\n    this.element = coerceElement(element);\n    this._document = _document;\n    this.withScrollableParents([this.element]);\n\n    _dragDropRegistry.registerDropContainer(this);\n\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n  }\n  /** Removes the drop list functionality from the DOM element. */\n\n\n  _createClass(DropListRef, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._stopScrolling();\n\n      this._stopScrollTimers.complete();\n\n      this._viewportScrollSubscription.unsubscribe();\n\n      this.beforeStarted.complete();\n      this.entered.complete();\n      this.exited.complete();\n      this.dropped.complete();\n      this.sorted.complete();\n\n      this._activeSiblings.clear();\n\n      this._scrollNode = null;\n\n      this._parentPositions.clear();\n\n      this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._isDragging;\n    }\n    /** Starts dragging an item. */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this._draggingStarted();\n\n      this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n\n  }, {\n    key: \"enter\",\n    value: function enter(item, pointerX, pointerY, index) {\n      this._draggingStarted(); // If sorting is disabled, we want the item to return to its starting\n      // position if the user is returning it to its initial container.\n\n\n      var newIndex;\n\n      if (index == null) {\n        newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n\n        if (newIndex === -1) {\n          // We use the coordinates of where the item entered the drop\n          // zone to figure out at which index it should be inserted.\n          newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        }\n      } else {\n        newIndex = index;\n      }\n\n      var activeDraggables = this._activeDraggables;\n      var currentIndex = activeDraggables.indexOf(item);\n      var placeholder = item.getPlaceholderElement();\n      var newPositionReference = activeDraggables[newIndex]; // If the item at the new position is the same as the item that is being dragged,\n      // it means that we're trying to restore the item to its initial position. In this\n      // case we should use the next item from the list as the reference.\n\n      if (newPositionReference === item) {\n        newPositionReference = activeDraggables[newIndex + 1];\n      } // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n      // into another container and back again), we have to ensure that it isn't duplicated.\n\n\n      if (currentIndex > -1) {\n        activeDraggables.splice(currentIndex, 1);\n      } // Don't use items that are being dragged as a reference, because\n      // their element has been moved down to the bottom of the body.\n\n\n      if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n        var element = newPositionReference.getRootElement();\n        element.parentElement.insertBefore(placeholder, element);\n        activeDraggables.splice(newIndex, 0, item);\n      } else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n        var reference = activeDraggables[0].getRootElement();\n        reference.parentNode.insertBefore(placeholder, reference);\n        activeDraggables.unshift(item);\n      } else {\n        coerceElement(this.element).appendChild(placeholder);\n        activeDraggables.push(item);\n      } // The transform needs to be cleared so it doesn't throw off the measurements.\n\n\n      placeholder.style.transform = ''; // Note that the positions were already cached when we called `start` above,\n      // but we need to refresh them since the amount of items has changed and also parent rects.\n\n      this._cacheItemPositions();\n\n      this._cacheParentPositions(); // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n\n\n      this._notifyReceivingSiblings();\n\n      this.entered.next({\n        item: item,\n        container: this,\n        currentIndex: this.getItemIndex(item)\n      });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n\n  }, {\n    key: \"exit\",\n    value: function exit(item) {\n      this._reset();\n\n      this.exited.next({\n        item: item,\n        container: this\n      });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n\n  }, {\n    key: \"drop\",\n    value: function drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n      this._reset();\n\n      this.dropped.next({\n        item: item,\n        currentIndex: currentIndex,\n        previousIndex: previousIndex,\n        container: this,\n        previousContainer: previousContainer,\n        isPointerOverContainer: isPointerOverContainer,\n        distance: distance,\n        dropPoint: dropPoint\n      });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n\n  }, {\n    key: \"withItems\",\n    value: function withItems(items) {\n      var _this12 = this;\n\n      var previousItems = this._draggables;\n      this._draggables = items;\n      items.forEach(function (item) {\n        return item._withDropContainer(_this12);\n      });\n\n      if (this.isDragging()) {\n        var draggedItems = previousItems.filter(function (item) {\n          return item.isDragging();\n        }); // If all of the items being dragged were removed\n        // from the list, abort the current drag sequence.\n\n        if (draggedItems.every(function (item) {\n          return items.indexOf(item) === -1;\n        })) {\n          this._reset();\n        } else {\n          this._cacheItems();\n        }\n      }\n\n      return this;\n    }\n    /** Sets the layout direction of the drop list. */\n\n  }, {\n    key: \"withDirection\",\n    value: function withDirection(direction) {\n      this._direction = direction;\n      return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n\n  }, {\n    key: \"connectedTo\",\n    value: function connectedTo(_connectedTo) {\n      this._siblings = _connectedTo.slice();\n      return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n\n  }, {\n    key: \"withOrientation\",\n    value: function withOrientation(orientation) {\n      this._orientation = orientation;\n      return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n\n  }, {\n    key: \"withScrollableParents\",\n    value: function withScrollableParents(elements) {\n      var element = coerceElement(this.element); // We always allow the current element to be scrollable\n      // so we need to ensure that it's in the array.\n\n      this._scrollableElements = elements.indexOf(element) === -1 ? [element].concat(_toConsumableArray(elements)) : elements.slice();\n      return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n\n  }, {\n    key: \"getScrollableParents\",\n    value: function getScrollableParents() {\n      return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n\n  }, {\n    key: \"getItemIndex\",\n    value: function getItemIndex(item) {\n      if (!this._isDragging) {\n        return this._draggables.indexOf(item);\n      } // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n      // The rest of the logic still stands no matter what orientation we're in, however\n      // we need to invert the array when determining the index.\n\n\n      var items = this._orientation === 'horizontal' && this._direction === 'rtl' ? this._itemPositions.slice().reverse() : this._itemPositions;\n      return findIndex(items, function (currentItem) {\n        return currentItem.drag === item;\n      });\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n\n  }, {\n    key: \"isReceiving\",\n    value: function isReceiving() {\n      return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n\n  }, {\n    key: \"_sortItem\",\n    value: function _sortItem(item, pointerX, pointerY, pointerDelta) {\n      // Don't sort the item if sorting is disabled or it's out of range.\n      if (this.sortingDisabled || !this._clientRect || !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n        return;\n      }\n\n      var siblings = this._itemPositions;\n\n      var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n      if (newIndex === -1 && siblings.length > 0) {\n        return;\n      }\n\n      var isHorizontal = this._orientation === 'horizontal';\n      var currentIndex = findIndex(siblings, function (currentItem) {\n        return currentItem.drag === item;\n      });\n      var siblingAtNewPosition = siblings[newIndex];\n      var currentPosition = siblings[currentIndex].clientRect;\n      var newPosition = siblingAtNewPosition.clientRect;\n      var delta = currentIndex > newIndex ? 1 : -1; // How many pixels the item's placeholder should be offset.\n\n      var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta); // How many pixels all the other items should be offset.\n\n\n      var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta); // Save the previous order of the items before moving the item to its new index.\n      // We use this to check whether an item has been moved as a result of the sorting.\n\n\n      var oldOrder = siblings.slice(); // Shuffle the array in place.\n\n      moveItemInArray(siblings, currentIndex, newIndex);\n      this.sorted.next({\n        previousIndex: currentIndex,\n        currentIndex: newIndex,\n        container: this,\n        item: item\n      });\n      siblings.forEach(function (sibling, index) {\n        // Don't do anything if the position hasn't changed.\n        if (oldOrder[index] === sibling) {\n          return;\n        }\n\n        var isDraggedItem = sibling.drag === item;\n        var offset = isDraggedItem ? itemOffset : siblingOffset;\n        var elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement(); // Update the offset to reflect the new position.\n\n        sibling.offset += offset; // Since we're moving the items with a `transform`, we need to adjust their cached\n        // client rects to reflect their new position, as well as swap their positions in the cache.\n        // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n        // elements may be mid-animation which will give us a wrong result.\n\n        if (isHorizontal) {\n          // Round the transforms since some browsers will\n          // blur the elements, for sub-pixel transforms.\n          elementToOffset.style.transform = combineTransforms(\"translate3d(\".concat(Math.round(sibling.offset), \"px, 0, 0)\"), sibling.initialTransform);\n          adjustClientRect(sibling.clientRect, 0, offset);\n        } else {\n          elementToOffset.style.transform = combineTransforms(\"translate3d(0, \".concat(Math.round(sibling.offset), \"px, 0)\"), sibling.initialTransform);\n          adjustClientRect(sibling.clientRect, offset, 0);\n        }\n      }); // Note that it's important that we do this after the client rects have been adjusted.\n\n      this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n      this._previousSwap.drag = siblingAtNewPosition.drag;\n      this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n\n  }, {\n    key: \"_startScrollingIfNecessary\",\n    value: function _startScrollingIfNecessary(pointerX, pointerY) {\n      var _this13 = this;\n\n      if (this.autoScrollDisabled) {\n        return;\n      }\n\n      var scrollNode;\n      var verticalScrollDirection = 0\n      /* NONE */\n      ;\n      var horizontalScrollDirection = 0\n      /* NONE */\n      ; // Check whether we should start scrolling any of the parent containers.\n\n      this._parentPositions.positions.forEach(function (position, element) {\n        // We have special handling for the `document` below. Also this would be\n        // nicer with a  for...of loop, but it requires changing a compiler flag.\n        if (element === _this13._document || !position.clientRect || scrollNode) {\n          return;\n        }\n\n        if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n          var _getElementScrollDire = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n\n          var _getElementScrollDire2 = _slicedToArray(_getElementScrollDire, 2);\n\n          verticalScrollDirection = _getElementScrollDire2[0];\n          horizontalScrollDirection = _getElementScrollDire2[1];\n\n          if (verticalScrollDirection || horizontalScrollDirection) {\n            scrollNode = element;\n          }\n        }\n      }); // Otherwise check if we can start scrolling the viewport.\n\n\n      if (!verticalScrollDirection && !horizontalScrollDirection) {\n        var _this$_viewportRuler$ = this._viewportRuler.getViewportSize(),\n            width = _this$_viewportRuler$.width,\n            height = _this$_viewportRuler$.height;\n\n        var clientRect = {\n          width: width,\n          height: height,\n          top: 0,\n          right: width,\n          bottom: height,\n          left: 0\n        };\n        verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n        horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n        scrollNode = window;\n      }\n\n      if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection || horizontalScrollDirection !== this._horizontalScrollDirection || scrollNode !== this._scrollNode)) {\n        this._verticalScrollDirection = verticalScrollDirection;\n        this._horizontalScrollDirection = horizontalScrollDirection;\n        this._scrollNode = scrollNode;\n\n        if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n          this._ngZone.runOutsideAngular(this._startScrollInterval);\n        } else {\n          this._stopScrolling();\n        }\n      }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n\n  }, {\n    key: \"_stopScrolling\",\n    value: function _stopScrolling() {\n      this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n\n  }, {\n    key: \"_draggingStarted\",\n    value: function _draggingStarted() {\n      var styles = coerceElement(this.element).style;\n      this.beforeStarted.next();\n      this._isDragging = true; // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n      // scrolling. The browser seems to round the value based on the snapping points which means\n      // that we can't increment/decrement the scroll position.\n\n      this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n      styles.scrollSnapType = styles.msScrollSnapType = 'none';\n\n      this._cacheItems();\n\n      this._viewportScrollSubscription.unsubscribe();\n\n      this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n\n  }, {\n    key: \"_cacheParentPositions\",\n    value: function _cacheParentPositions() {\n      var element = coerceElement(this.element);\n\n      this._parentPositions.cache(this._scrollableElements); // The list element is always in the `scrollableElements`\n      // so we can take advantage of the cached `ClientRect`.\n\n\n      this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n\n  }, {\n    key: \"_cacheItemPositions\",\n    value: function _cacheItemPositions() {\n      var isHorizontal = this._orientation === 'horizontal';\n      this._itemPositions = this._activeDraggables.map(function (drag) {\n        var elementToMeasure = drag.getVisibleElement();\n        return {\n          drag: drag,\n          offset: 0,\n          initialTransform: elementToMeasure.style.transform || '',\n          clientRect: getMutableClientRect(elementToMeasure)\n        };\n      }).sort(function (a, b) {\n        return isHorizontal ? a.clientRect.left - b.clientRect.left : a.clientRect.top - b.clientRect.top;\n      });\n    }\n    /** Resets the container to its initial state. */\n\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      var _this14 = this;\n\n      this._isDragging = false;\n      var styles = coerceElement(this.element).style;\n      styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap; // TODO(crisbeto): may have to wait for the animations to finish.\n\n      this._activeDraggables.forEach(function (item) {\n        var _a;\n\n        var rootElement = item.getRootElement();\n\n        if (rootElement) {\n          var initialTransform = (_a = _this14._itemPositions.find(function (current) {\n            return current.drag === item;\n          })) === null || _a === void 0 ? void 0 : _a.initialTransform;\n          rootElement.style.transform = initialTransform || '';\n        }\n      });\n\n      this._siblings.forEach(function (sibling) {\n        return sibling._stopReceiving(_this14);\n      });\n\n      this._activeDraggables = [];\n      this._itemPositions = [];\n      this._previousSwap.drag = null;\n      this._previousSwap.delta = 0;\n      this._previousSwap.overlaps = false;\n\n      this._stopScrolling();\n\n      this._viewportScrollSubscription.unsubscribe();\n\n      this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n\n  }, {\n    key: \"_getSiblingOffsetPx\",\n    value: function _getSiblingOffsetPx(currentIndex, siblings, delta) {\n      var isHorizontal = this._orientation === 'horizontal';\n      var currentPosition = siblings[currentIndex].clientRect;\n      var immediateSibling = siblings[currentIndex + delta * -1];\n      var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n      if (immediateSibling) {\n        var start = isHorizontal ? 'left' : 'top';\n        var end = isHorizontal ? 'right' : 'bottom'; // Get the spacing between the start of the current item and the end of the one immediately\n        // after it in the direction in which the user is dragging, or vice versa. We add it to the\n        // offset in order to push the element to where it will be when it's inline and is influenced\n        // by the `margin` of its siblings.\n\n        if (delta === -1) {\n          siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n        } else {\n          siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n        }\n      }\n\n      return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n\n  }, {\n    key: \"_getItemOffsetPx\",\n    value: function _getItemOffsetPx(currentPosition, newPosition, delta) {\n      var isHorizontal = this._orientation === 'horizontal';\n      var itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top; // Account for differences in the item width/height.\n\n      if (delta === -1) {\n        itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;\n      }\n\n      return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n\n  }, {\n    key: \"_shouldEnterAsFirstChild\",\n    value: function _shouldEnterAsFirstChild(pointerX, pointerY) {\n      if (!this._activeDraggables.length) {\n        return false;\n      }\n\n      var itemPositions = this._itemPositions;\n      var isHorizontal = this._orientation === 'horizontal'; // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n      // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n\n      var reversed = itemPositions[0].drag !== this._activeDraggables[0];\n\n      if (reversed) {\n        var lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n        return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n      } else {\n        var firstItemRect = itemPositions[0].clientRect;\n        return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n      }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n\n  }, {\n    key: \"_getItemIndexFromPointerPosition\",\n    value: function _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n      var _this15 = this;\n\n      var isHorizontal = this._orientation === 'horizontal';\n      var index = findIndex(this._itemPositions, function (_ref4, _, array) {\n        var drag = _ref4.drag,\n            clientRect = _ref4.clientRect;\n\n        if (drag === item) {\n          // If there's only one item left in the container, it must be\n          // the dragged item itself so we use it as a reference.\n          return array.length < 2;\n        }\n\n        if (delta) {\n          var direction = isHorizontal ? delta.x : delta.y; // If the user is still hovering over the same item as last time, their cursor hasn't left\n          // the item after we made the swap, and they didn't change the direction in which they're\n          // dragging, we don't consider it a direction swap.\n\n          if (drag === _this15._previousSwap.drag && _this15._previousSwap.overlaps && direction === _this15._previousSwap.delta) {\n            return false;\n          }\n        }\n\n        return isHorizontal ? // Round these down since most browsers report client rects with\n        // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n        pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n      });\n      return index === -1 || !this.sortPredicate(index, item, this) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n\n  }, {\n    key: \"_cacheItems\",\n    value: function _cacheItems() {\n      this._activeDraggables = this._draggables.slice();\n\n      this._cacheItemPositions();\n\n      this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n\n  }, {\n    key: \"_isOverContainer\",\n    value: function _isOverContainer(x, y) {\n      return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n\n  }, {\n    key: \"_getSiblingContainerFromPosition\",\n    value: function _getSiblingContainerFromPosition(item, x, y) {\n      return this._siblings.find(function (sibling) {\n        return sibling._canReceive(item, x, y);\n      });\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n\n  }, {\n    key: \"_canReceive\",\n    value: function _canReceive(item, x, y) {\n      if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n        return false;\n      }\n\n      var elementFromPoint = this._getShadowRoot().elementFromPoint(x, y); // If there's no element at the pointer position, then\n      // the client rect is probably scrolled out of the view.\n\n\n      if (!elementFromPoint) {\n        return false;\n      }\n\n      var nativeElement = coerceElement(this.element); // The `ClientRect`, that we're using to find the container over which the user is\n      // hovering, doesn't give us any information on whether the element has been scrolled\n      // out of the view or whether it's overlapping with other containers. This means that\n      // we could end up transferring the item into a container that's invisible or is positioned\n      // below another one. We use the result from `elementFromPoint` to get the top-most element\n      // at the pointer position and to find whether it's one of the intersecting drop containers.\n\n      return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n\n  }, {\n    key: \"_startReceiving\",\n    value: function _startReceiving(sibling, items) {\n      var _this16 = this;\n\n      var activeSiblings = this._activeSiblings;\n\n      if (!activeSiblings.has(sibling) && items.every(function (item) {\n        // Note that we have to add an exception to the `enterPredicate` for items that started off\n        // in this drop list. The drag ref has logic that allows an item to return to its initial\n        // container, if it has left the initial container and none of the connected containers\n        // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n        return _this16.enterPredicate(item, _this16) || _this16._draggables.indexOf(item) > -1;\n      })) {\n        activeSiblings.add(sibling);\n\n        this._cacheParentPositions();\n\n        this._listenToScrollEvents();\n      }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n\n  }, {\n    key: \"_stopReceiving\",\n    value: function _stopReceiving(sibling) {\n      this._activeSiblings.delete(sibling);\n\n      this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n\n  }, {\n    key: \"_listenToScrollEvents\",\n    value: function _listenToScrollEvents() {\n      var _this17 = this;\n\n      this._viewportScrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(function (event) {\n        if (_this17.isDragging()) {\n          var scrollDifference = _this17._parentPositions.handleScroll(event);\n\n          if (scrollDifference) {\n            // Since we know the amount that the user has scrolled we can shift all of the\n            // client rectangles ourselves. This is cheaper than re-measuring everything and\n            // we can avoid inconsistent behavior where we might be measuring the element before\n            // its position has changed.\n            _this17._itemPositions.forEach(function (_ref5) {\n              var clientRect = _ref5.clientRect;\n              adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n            }); // We need two loops for this, because we want all of the cached\n            // positions to be up-to-date before we re-sort the item.\n\n\n            _this17._itemPositions.forEach(function (_ref6) {\n              var drag = _ref6.drag;\n\n              if (_this17._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n              }\n            });\n          }\n        } else if (_this17.isReceiving()) {\n          _this17._cacheParentPositions();\n        }\n      });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n\n  }, {\n    key: \"_getShadowRoot\",\n    value: function _getShadowRoot() {\n      if (!this._cachedShadowRoot) {\n        var shadowRoot = _getShadowRoot2(coerceElement(this.element));\n\n        this._cachedShadowRoot = shadowRoot || this._document;\n      }\n\n      return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n\n  }, {\n    key: \"_notifyReceivingSiblings\",\n    value: function _notifyReceivingSiblings() {\n      var _this18 = this;\n\n      var draggedItems = this._activeDraggables.filter(function (item) {\n        return item.isDragging();\n      });\n\n      this._siblings.forEach(function (sibling) {\n        return sibling._startReceiving(_this18, draggedItems);\n      });\n    }\n  }]);\n\n  return DropListRef;\n}();\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\n\n\nfunction findIndex(array, predicate) {\n  for (var i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\n\n\nfunction incrementVerticalScroll(node, amount) {\n  if (node === window) {\n    node.scrollBy(0, amount);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    node.scrollTop += amount;\n  }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\n\n\nfunction incrementHorizontalScroll(node, amount) {\n  if (node === window) {\n    node.scrollBy(amount, 0);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    node.scrollLeft += amount;\n  }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\n\n\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n  var top = clientRect.top,\n      bottom = clientRect.bottom,\n      height = clientRect.height;\n  var yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return 1\n    /* UP */\n    ;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return 2\n    /* DOWN */\n    ;\n  }\n\n  return 0\n  /* NONE */\n  ;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\n\n\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n  var left = clientRect.left,\n      right = clientRect.right,\n      width = clientRect.width;\n  var xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return 1\n    /* LEFT */\n    ;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return 2\n    /* RIGHT */\n    ;\n  }\n\n  return 0\n  /* NONE */\n  ;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\n\n\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n  var computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  var computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  var verticalScrollDirection = 0\n  /* NONE */\n  ;\n  var horizontalScrollDirection = 0\n  /* NONE */\n  ; // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n\n  if (computedVertical) {\n    var scrollTop = element.scrollTop;\n\n    if (computedVertical === 1\n    /* UP */\n    ) {\n      if (scrollTop > 0) {\n        verticalScrollDirection = 1\n        /* UP */\n        ;\n      }\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = 2\n      /* DOWN */\n      ;\n    }\n  }\n\n  if (computedHorizontal) {\n    var scrollLeft = element.scrollLeft;\n\n    if (computedHorizontal === 1\n    /* LEFT */\n    ) {\n      if (scrollLeft > 0) {\n        horizontalScrollDirection = 1\n        /* LEFT */\n        ;\n      }\n    } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n      horizontalScrollDirection = 2\n      /* RIGHT */\n      ;\n    }\n  }\n\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Event options that can be used to bind an active, capturing event. */\n\n\nvar activeCapturingEventOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n\nvar DragDropRegistry = /*#__PURE__*/(function () {\n  var DragDropRegistry = /*#__PURE__*/function () {\n    function DragDropRegistry(_ngZone, _document) {\n      var _this19 = this;\n\n      _classCallCheck(this, DragDropRegistry);\n\n      this._ngZone = _ngZone;\n      /** Registered drop container instances. */\n\n      this._dropInstances = new Set();\n      /** Registered drag item instances. */\n\n      this._dragInstances = new Set();\n      /** Drag item instances that are currently being dragged. */\n\n      this._activeDragInstances = [];\n      /** Keeps track of the event listeners that we've bound to the `document`. */\n\n      this._globalListeners = new Map();\n      /**\n       * Predicate function to check if an item is being dragged.  Moved out into a property,\n       * because it'll be called a lot and we don't want to create a new function every time.\n       */\n\n      this._draggingPredicate = function (item) {\n        return item.isDragging();\n      };\n      /**\n       * Emits the `touchmove` or `mousemove` events that are dispatched\n       * while the user is dragging a drag item instance.\n       */\n\n\n      this.pointerMove = new Subject();\n      /**\n       * Emits the `touchend` or `mouseup` events that are dispatched\n       * while the user is dragging a drag item instance.\n       */\n\n      this.pointerUp = new Subject();\n      /**\n       * Emits when the viewport has been scrolled while the user is dragging an item.\n       * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n       * @breaking-change 13.0.0\n       */\n\n      this.scroll = new Subject();\n      /**\n       * Event listener that will prevent the default browser action while the user is dragging.\n       * @param event Event whose default action should be prevented.\n       */\n\n      this._preventDefaultWhileDragging = function (event) {\n        if (_this19._activeDragInstances.length > 0) {\n          event.preventDefault();\n        }\n      };\n      /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n\n\n      this._persistentTouchmoveListener = function (event) {\n        if (_this19._activeDragInstances.length > 0) {\n          // Note that we only want to prevent the default action after dragging has actually started.\n          // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n          // but it could be pushed back if the user has set up a drag delay or threshold.\n          if (_this19._activeDragInstances.some(_this19._draggingPredicate)) {\n            event.preventDefault();\n          }\n\n          _this19.pointerMove.next(event);\n        }\n      };\n\n      this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n\n\n    _createClass(DragDropRegistry, [{\n      key: \"registerDropContainer\",\n      value: function registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n          this._dropInstances.add(drop);\n        }\n      }\n      /** Adds a drag item instance to the registry. */\n\n    }, {\n      key: \"registerDragItem\",\n      value: function registerDragItem(drag) {\n        var _this20 = this;\n\n        this._dragInstances.add(drag); // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n\n\n        if (this._dragInstances.size === 1) {\n          this._ngZone.runOutsideAngular(function () {\n            // The event handler has to be explicitly active,\n            // because newer browsers make it passive by default.\n            _this20._document.addEventListener('touchmove', _this20._persistentTouchmoveListener, activeCapturingEventOptions);\n          });\n        }\n      }\n      /** Removes a drop container from the registry. */\n\n    }, {\n      key: \"removeDropContainer\",\n      value: function removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n      }\n      /** Removes a drag item instance from the registry. */\n\n    }, {\n      key: \"removeDragItem\",\n      value: function removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n\n        this.stopDragging(drag);\n\n        if (this._dragInstances.size === 0) {\n          this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n      }\n      /**\n       * Starts the dragging sequence for a drag instance.\n       * @param drag Drag instance which is being dragged.\n       * @param event Event that initiated the dragging.\n       */\n\n    }, {\n      key: \"startDragging\",\n      value: function startDragging(drag, event) {\n        var _this21 = this;\n\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n          return;\n        }\n\n        this._activeDragInstances.push(drag);\n\n        if (this._activeDragInstances.length === 1) {\n          var _isTouchEvent = event.type.startsWith('touch'); // We explicitly bind __active__ listeners here, because newer browsers will default to\n          // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n          // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n\n\n          this._globalListeners.set(_isTouchEvent ? 'touchend' : 'mouseup', {\n            handler: function handler(e) {\n              return _this21.pointerUp.next(e);\n            },\n            options: true\n          }).set('scroll', {\n            handler: function handler(e) {\n              return _this21.scroll.next(e);\n            },\n            // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n            // the document. See https://github.com/angular/components/issues/17144.\n            options: true\n          }) // Preventing the default action on `mousemove` isn't enough to disable text selection\n          // on Safari so we need to prevent the selection event as well. Alternatively this can\n          // be done by setting `user-select: none` on the `body`, however it has causes a style\n          // recalculation which can be expensive on pages with a lot of elements.\n          .set('selectstart', {\n            handler: this._preventDefaultWhileDragging,\n            options: activeCapturingEventOptions\n          }); // We don't have to bind a move event for touch drag sequences, because\n          // we already have a persistent global one bound from `registerDragItem`.\n\n\n          if (!_isTouchEvent) {\n            this._globalListeners.set('mousemove', {\n              handler: function handler(e) {\n                return _this21.pointerMove.next(e);\n              },\n              options: activeCapturingEventOptions\n            });\n          }\n\n          this._ngZone.runOutsideAngular(function () {\n            _this21._globalListeners.forEach(function (config, name) {\n              _this21._document.addEventListener(name, config.handler, config.options);\n            });\n          });\n        }\n      }\n      /** Stops dragging a drag item instance. */\n\n    }, {\n      key: \"stopDragging\",\n      value: function stopDragging(drag) {\n        var index = this._activeDragInstances.indexOf(drag);\n\n        if (index > -1) {\n          this._activeDragInstances.splice(index, 1);\n\n          if (this._activeDragInstances.length === 0) {\n            this._clearGlobalListeners();\n          }\n        }\n      }\n      /** Gets whether a drag item instance is currently being dragged. */\n\n    }, {\n      key: \"isDragging\",\n      value: function isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n      }\n      /**\n       * Gets a stream that will emit when any element on the page is scrolled while an item is being\n       * dragged.\n       * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n       *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n       *   be used to include an additional top-level listener at the shadow root level.\n       */\n\n    }, {\n      key: \"scrolled\",\n      value: function scrolled(shadowRoot) {\n        var _this22 = this;\n\n        var streams = [this.scroll];\n\n        if (shadowRoot && shadowRoot !== this._document) {\n          // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\n          // because we want to guarantee that the event is bound outside of the `NgZone`. With\n          // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n          streams.push(new Observable(function (observer) {\n            return _this22._ngZone.runOutsideAngular(function () {\n              var eventOptions = true;\n\n              var callback = function callback(event) {\n                if (_this22._activeDragInstances.length) {\n                  observer.next(event);\n                }\n              };\n\n              shadowRoot.addEventListener('scroll', callback, eventOptions);\n              return function () {\n                shadowRoot.removeEventListener('scroll', callback, eventOptions);\n              };\n            });\n          }));\n        }\n\n        return merge.apply(void 0, streams);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this23 = this;\n\n        this._dragInstances.forEach(function (instance) {\n          return _this23.removeDragItem(instance);\n        });\n\n        this._dropInstances.forEach(function (instance) {\n          return _this23.removeDropContainer(instance);\n        });\n\n        this._clearGlobalListeners();\n\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n      }\n      /** Clears out the global event listeners from the `document`. */\n\n    }, {\n      key: \"_clearGlobalListeners\",\n      value: function _clearGlobalListeners() {\n        var _this24 = this;\n\n        this._globalListeners.forEach(function (config, name) {\n          _this24._document.removeEventListener(name, config.handler, config.options);\n        });\n\n        this._globalListeners.clear();\n      }\n    }]);\n\n    return DragDropRegistry;\n  }();\n\n  DragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) {\n    return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  DragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function DragDropRegistry_Factory() {\n      return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT));\n    },\n    token: DragDropRegistry,\n    providedIn: \"root\"\n  });\n  return DragDropRegistry;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Default configuration to be used when creating a `DragRef`. */\n\n\nvar DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n\nvar DragDrop = /*#__PURE__*/(function () {\n  var DragDrop = /*#__PURE__*/function () {\n    function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n      _classCallCheck(this, DragDrop);\n\n      this._document = _document;\n      this._ngZone = _ngZone;\n      this._viewportRuler = _viewportRuler;\n      this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n\n\n    _createClass(DragDrop, [{\n      key: \"createDrag\",\n      value: function createDrag(element) {\n        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_CONFIG;\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n      }\n      /**\n       * Turns an element into a drop list.\n       * @param element Element to which to attach the drop list functionality.\n       */\n\n    }, {\n      key: \"createDropList\",\n      value: function createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n      }\n    }]);\n\n    return DragDrop;\n  }();\n\n  DragDrop.ɵfac = function DragDrop_Factory(t) {\n    return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry));\n  };\n\n  DragDrop.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function DragDrop_Factory() {\n      return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry));\n    },\n    token: DragDrop,\n    providedIn: \"root\"\n  });\n  return DragDrop;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\n\n\nvar CDK_DRAG_PARENT = /*#__PURE__*/new InjectionToken('CDK_DRAG_PARENT');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar CDK_DROP_LIST_GROUP = /*#__PURE__*/new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n\nvar CdkDropListGroup = /*#__PURE__*/(function () {\n  var CdkDropListGroup = /*#__PURE__*/function () {\n    function CdkDropListGroup() {\n      _classCallCheck(this, CdkDropListGroup);\n\n      /** Drop lists registered inside the group. */\n      this._items = new Set();\n      this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n\n\n    _createClass(CdkDropListGroup, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._items.clear();\n      }\n    }]);\n\n    return CdkDropListGroup;\n  }();\n\n  CdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) {\n    return new (t || CdkDropListGroup)();\n  };\n\n  CdkDropListGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDropListGroup,\n    selectors: [[\"\", \"cdkDropListGroup\", \"\"]],\n    inputs: {\n      disabled: [\"cdkDropListGroupDisabled\", \"disabled\"]\n    },\n    exportAs: [\"cdkDropListGroup\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DROP_LIST_GROUP,\n      useExisting: CdkDropListGroup\n    }])]\n  });\n  return CdkDropListGroup;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\n\n\nvar CDK_DRAG_CONFIG = /*#__PURE__*/new InjectionToken('CDK_DRAG_CONFIG');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\n\nfunction assertElementNode(node, name) {\n  if (node.nodeType !== 1) {\n    throw Error(\"\".concat(name, \" must be attached to an element node. \") + \"Currently attached to \\\"\".concat(node.nodeName, \"\\\".\"));\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique ids for drop zones. */\n\n\nvar _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar CDK_DROP_LIST = /*#__PURE__*/new InjectionToken('CdkDropList');\nvar ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\n\nvar CdkDropList = /*#__PURE__*/(function () {\n  var CdkDropList = /*#__PURE__*/function () {\n    function CdkDropList(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n      var _this25 = this;\n\n      _classCallCheck(this, CdkDropList);\n\n      this.element = element;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._scrollDispatcher = _scrollDispatcher;\n      this._dir = _dir;\n      this._group = _group;\n      /** Emits when the list has been destroyed. */\n\n      this._destroyed = new Subject();\n      /**\n       * Other draggable containers that this container is connected to and into which the\n       * container's items can be transferred. Can either be references to other drop containers,\n       * or their unique IDs.\n       */\n\n      this.connectedTo = [];\n      /**\n       * Unique ID for the drop zone. Can be used as a reference\n       * in the `connectedTo` of another `CdkDropList`.\n       */\n\n      this.id = \"cdk-drop-list-\".concat(_uniqueIdCounter++);\n      /**\n       * Function that is used to determine whether an item\n       * is allowed to be moved into a drop container.\n       */\n\n      this.enterPredicate = function () {\n        return true;\n      };\n      /** Functions that is used to determine whether an item can be sorted into a particular index. */\n\n\n      this.sortPredicate = function () {\n        return true;\n      };\n      /** Emits when the user drops an item inside the container. */\n\n\n      this.dropped = new EventEmitter();\n      /**\n       * Emits when the user has moved a new drag item into this container.\n       */\n\n      this.entered = new EventEmitter();\n      /**\n       * Emits when the user removes an item from the container\n       * by dragging it into another container.\n       */\n\n      this.exited = new EventEmitter();\n      /** Emits as the user is swapping items while actively dragging. */\n\n      this.sorted = new EventEmitter();\n      /**\n       * Keeps track of the items that are registered with this container. Historically we used to\n       * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n       * well which means that we can't handle cases like dragging the headers of a `mat-table`\n       * correctly. What we do instead is to have the items register themselves with the container\n       * and then we sort them based on their position in the DOM.\n       */\n\n      this._unsortedItems = new Set();\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        assertElementNode(element.nativeElement, 'cdkDropList');\n      }\n\n      this._dropListRef = dragDrop.createDropList(element);\n      this._dropListRef.data = this;\n\n      if (config) {\n        this._assignDefaults(config);\n      }\n\n      this._dropListRef.enterPredicate = function (drag, drop) {\n        return _this25.enterPredicate(drag.data, drop.data);\n      };\n\n      this._dropListRef.sortPredicate = function (index, drag, drop) {\n        return _this25.sortPredicate(index, drag.data, drop.data);\n      };\n\n      this._setupInputSyncSubscription(this._dropListRef);\n\n      this._handleEvents(this._dropListRef);\n\n      CdkDropList._dropLists.push(this);\n\n      if (_group) {\n        _group._items.add(this);\n      }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n\n\n    _createClass(CdkDropList, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled || !!this._group && this._group.disabled;\n      },\n      set: function set(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n      }\n      /** Registers an items with the drop list. */\n\n    }, {\n      key: \"addItem\",\n      value: function addItem(item) {\n        this._unsortedItems.add(item);\n\n        if (this._dropListRef.isDragging()) {\n          this._syncItemsWithRef();\n        }\n      }\n      /** Removes an item from the drop list. */\n\n    }, {\n      key: \"removeItem\",\n      value: function removeItem(item) {\n        this._unsortedItems.delete(item);\n\n        if (this._dropListRef.isDragging()) {\n          this._syncItemsWithRef();\n        }\n      }\n      /** Gets the registered items in the list, sorted by their position in the DOM. */\n\n    }, {\n      key: \"getSortedItems\",\n      value: function getSortedItems() {\n        return Array.from(this._unsortedItems).sort(function (a, b) {\n          var documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement()); // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n          // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n          // tslint:disable-next-line:no-bitwise\n\n\n          return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var index = CdkDropList._dropLists.indexOf(this);\n\n        if (index > -1) {\n          CdkDropList._dropLists.splice(index, 1);\n        }\n\n        if (this._group) {\n          this._group._items.delete(this);\n        }\n\n        this._unsortedItems.clear();\n\n        this._dropListRef.dispose();\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n\n    }, {\n      key: \"_setupInputSyncSubscription\",\n      value: function _setupInputSyncSubscription(ref) {\n        var _this26 = this;\n\n        if (this._dir) {\n          this._dir.change.pipe(startWith(this._dir.value), takeUntil(this._destroyed)).subscribe(function (value) {\n            return ref.withDirection(value);\n          });\n        }\n\n        ref.beforeStarted.subscribe(function () {\n          var siblings = coerceArray(_this26.connectedTo).map(function (drop) {\n            if (typeof drop === 'string') {\n              var correspondingDropList = CdkDropList._dropLists.find(function (list) {\n                return list.id === drop;\n              });\n\n              if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                console.warn(\"CdkDropList could not find connected drop list with id \\\"\".concat(drop, \"\\\"\"));\n              }\n\n              return correspondingDropList;\n            }\n\n            return drop;\n          });\n\n          if (_this26._group) {\n            _this26._group._items.forEach(function (drop) {\n              if (siblings.indexOf(drop) === -1) {\n                siblings.push(drop);\n              }\n            });\n          } // Note that we resolve the scrollable parents here so that we delay the resolution\n          // as long as possible, ensuring that the element is in its final place in the DOM.\n\n\n          if (!_this26._scrollableParentsResolved) {\n            var scrollableParents = _this26._scrollDispatcher.getAncestorScrollContainers(_this26.element).map(function (scrollable) {\n              return scrollable.getElementRef().nativeElement;\n            });\n\n            _this26._dropListRef.withScrollableParents(scrollableParents); // Only do this once since it involves traversing the DOM and the parents\n            // shouldn't be able to change without the drop list being destroyed.\n\n\n            _this26._scrollableParentsResolved = true;\n          }\n\n          ref.disabled = _this26.disabled;\n          ref.lockAxis = _this26.lockAxis;\n          ref.sortingDisabled = coerceBooleanProperty(_this26.sortingDisabled);\n          ref.autoScrollDisabled = coerceBooleanProperty(_this26.autoScrollDisabled);\n          ref.autoScrollStep = coerceNumberProperty(_this26.autoScrollStep, 2);\n          ref.connectedTo(siblings.filter(function (drop) {\n            return drop && drop !== _this26;\n          }).map(function (list) {\n            return list._dropListRef;\n          })).withOrientation(_this26.orientation);\n        });\n      }\n      /** Handles events from the underlying DropListRef. */\n\n    }, {\n      key: \"_handleEvents\",\n      value: function _handleEvents(ref) {\n        var _this27 = this;\n\n        ref.beforeStarted.subscribe(function () {\n          _this27._syncItemsWithRef();\n\n          _this27._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(function (event) {\n          _this27.entered.emit({\n            container: _this27,\n            item: event.item.data,\n            currentIndex: event.currentIndex\n          });\n        });\n        ref.exited.subscribe(function (event) {\n          _this27.exited.emit({\n            container: _this27,\n            item: event.item.data\n          });\n\n          _this27._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(function (event) {\n          _this27.sorted.emit({\n            previousIndex: event.previousIndex,\n            currentIndex: event.currentIndex,\n            container: _this27,\n            item: event.item.data\n          });\n        });\n        ref.dropped.subscribe(function (event) {\n          _this27.dropped.emit({\n            previousIndex: event.previousIndex,\n            currentIndex: event.currentIndex,\n            previousContainer: event.previousContainer.data,\n            container: event.container.data,\n            item: event.item.data,\n            isPointerOverContainer: event.isPointerOverContainer,\n            distance: event.distance,\n            dropPoint: event.dropPoint\n          }); // Mark for check since all of these events run outside of change\n          // detection and we're not guaranteed for something else to have triggered it.\n\n\n          _this27._changeDetectorRef.markForCheck();\n        });\n      }\n      /** Assigns the default input values based on a provided config object. */\n\n    }, {\n      key: \"_assignDefaults\",\n      value: function _assignDefaults(config) {\n        var lockAxis = config.lockAxis,\n            draggingDisabled = config.draggingDisabled,\n            sortingDisabled = config.sortingDisabled,\n            listAutoScrollDisabled = config.listAutoScrollDisabled,\n            listOrientation = config.listOrientation;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n\n        if (lockAxis) {\n          this.lockAxis = lockAxis;\n        }\n      }\n      /** Syncs up the registered drag items with underlying drop list ref. */\n\n    }, {\n      key: \"_syncItemsWithRef\",\n      value: function _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(function (item) {\n          return item._dragRef;\n        }));\n      }\n    }]);\n\n    return CdkDropList;\n  }();\n\n  CdkDropList.ɵfac = function CdkDropList_Factory(t) {\n    return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8));\n  };\n\n  CdkDropList.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDropList,\n    selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]],\n    hostAttrs: [1, \"cdk-drop-list\"],\n    hostVars: 7,\n    hostBindings: function CdkDropList_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n      }\n    },\n    inputs: {\n      connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"],\n      id: \"id\",\n      enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"],\n      sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"],\n      disabled: [\"cdkDropListDisabled\", \"disabled\"],\n      sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"],\n      autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"],\n      orientation: [\"cdkDropListOrientation\", \"orientation\"],\n      lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"],\n      data: [\"cdkDropListData\", \"data\"],\n      autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"]\n    },\n    outputs: {\n      dropped: \"cdkDropListDropped\",\n      entered: \"cdkDropListEntered\",\n      exited: \"cdkDropListExited\",\n      sorted: \"cdkDropListSorted\"\n    },\n    exportAs: [\"cdkDropList\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([// Prevent child drop lists from picking up the same group as their parent.\n    {\n      provide: CDK_DROP_LIST_GROUP,\n      useValue: ɵ0\n    }, {\n      provide: CDK_DROP_LIST,\n      useExisting: CdkDropList\n    }])]\n  });\n  /** Keeps track of the drop lists that are currently on the page. */\n\n  CdkDropList._dropLists = [];\n  return CdkDropList;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar CDK_DRAG_HANDLE = /*#__PURE__*/new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\n\nvar CdkDragHandle = /*#__PURE__*/(function () {\n  var CdkDragHandle = /*#__PURE__*/function () {\n    function CdkDragHandle(element, parentDrag) {\n      _classCallCheck(this, CdkDragHandle);\n\n      this.element = element;\n      /** Emits when the state of the handle has changed. */\n\n      this._stateChanges = new Subject();\n      this._disabled = false;\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        assertElementNode(element.nativeElement, 'cdkDragHandle');\n      }\n\n      this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n\n\n    _createClass(CdkDragHandle, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n\n        this._stateChanges.next(this);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._stateChanges.complete();\n      }\n    }]);\n\n    return CdkDragHandle;\n  }();\n\n  CdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) {\n    return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n  };\n\n  CdkDragHandle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDragHandle,\n    selectors: [[\"\", \"cdkDragHandle\", \"\"]],\n    hostAttrs: [1, \"cdk-drag-handle\"],\n    inputs: {\n      disabled: [\"cdkDragHandleDisabled\", \"disabled\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_HANDLE,\n      useExisting: CdkDragHandle\n    }])]\n  });\n  return CdkDragHandle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar CDK_DRAG_PLACEHOLDER = /*#__PURE__*/new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n\nvar CdkDragPlaceholder = /*#__PURE__*/(function () {\n  var CdkDragPlaceholder = /*#__PURE__*/_createClass(function CdkDragPlaceholder(templateRef) {\n    _classCallCheck(this, CdkDragPlaceholder);\n\n    this.templateRef = templateRef;\n  });\n\n  CdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) {\n    return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkDragPlaceholder.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDragPlaceholder,\n    selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]],\n    inputs: {\n      data: \"data\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_PLACEHOLDER,\n      useExisting: CdkDragPlaceholder\n    }])]\n  });\n  return CdkDragPlaceholder;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar CDK_DRAG_PREVIEW = /*#__PURE__*/new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n\nvar CdkDragPreview = /*#__PURE__*/(function () {\n  var CdkDragPreview = /*#__PURE__*/function () {\n    function CdkDragPreview(templateRef) {\n      _classCallCheck(this, CdkDragPreview);\n\n      this.templateRef = templateRef;\n      this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n\n\n    _createClass(CdkDragPreview, [{\n      key: \"matchSize\",\n      get: function get() {\n        return this._matchSize;\n      },\n      set: function set(value) {\n        this._matchSize = coerceBooleanProperty(value);\n      }\n    }]);\n\n    return CdkDragPreview;\n  }();\n\n  CdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) {\n    return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkDragPreview.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDragPreview,\n    selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]],\n    inputs: {\n      matchSize: \"matchSize\",\n      data: \"data\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_PREVIEW,\n      useExisting: CdkDragPreview\n    }])]\n  });\n  return CdkDragPreview;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\n\nvar CdkDrag = /*#__PURE__*/(function () {\n  var CdkDrag = /*#__PURE__*/function () {\n    function CdkDrag(\n    /** Element that the draggable is attached to. */\n    element,\n    /** Droppable container that the draggable is a part of. */\n    dropContainer,\n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n      var _this28 = this;\n\n      _classCallCheck(this, CdkDrag);\n\n      this.element = element;\n      this.dropContainer = dropContainer;\n      this._ngZone = _ngZone;\n      this._viewContainerRef = _viewContainerRef;\n      this._dir = _dir;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._selfHandle = _selfHandle;\n      this._parentDrag = _parentDrag;\n      this._destroyed = new Subject();\n      /** Emits when the user starts dragging the item. */\n\n      this.started = new EventEmitter();\n      /** Emits when the user has released a drag item, before any animations have started. */\n\n      this.released = new EventEmitter();\n      /** Emits when the user stops dragging an item in the container. */\n\n      this.ended = new EventEmitter();\n      /** Emits when the user has moved the item into a new container. */\n\n      this.entered = new EventEmitter();\n      /** Emits when the user removes the item its container by dragging it into another container. */\n\n      this.exited = new EventEmitter();\n      /** Emits when the user drops the item inside a container. */\n\n      this.dropped = new EventEmitter();\n      /**\n       * Emits as the user is dragging the item. Use with caution,\n       * because this event will fire for every pixel that the user has dragged.\n       */\n\n      this.moved = new Observable(function (observer) {\n        var subscription = _this28._dragRef.moved.pipe(map(function (movedEvent) {\n          return {\n            source: _this28,\n            pointerPosition: movedEvent.pointerPosition,\n            event: movedEvent.event,\n            delta: movedEvent.delta,\n            distance: movedEvent.distance\n          };\n        })).subscribe(observer);\n\n        return function () {\n          subscription.unsubscribe();\n        };\n      });\n      this._dragRef = dragDrop.createDrag(element, {\n        dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n        pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ? config.pointerDirectionChangeThreshold : 5,\n        zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n      });\n      this._dragRef.data = this; // We have to keep track of the drag instances in order to be able to match an element to\n      // a drag instance. We can't go through the global registry of `DragRef`, because the root\n      // element could be different.\n\n      CdkDrag._dragInstances.push(this);\n\n      if (config) {\n        this._assignDefaults(config);\n      } // Note that usually the container is assigned when the drop list is picks up the item, but in\n      // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n      // where there are no items on the first change detection pass, but the items get picked up as\n      // soon as the user triggers another pass by dragging. This is a problem, because the item would\n      // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n      // is too late since the two modes save different kinds of information. We work around it by\n      // assigning the drop container both from here and the list.\n\n\n      if (dropContainer) {\n        this._dragRef._withDropContainer(dropContainer._dropListRef);\n\n        dropContainer.addItem(this);\n      }\n\n      this._syncInputs(this._dragRef);\n\n      this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n\n\n    _createClass(CdkDrag, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled || this.dropContainer && this.dropContainer.disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n      }\n      /**\n       * Returns the element that is being used as a placeholder\n       * while the current element is being dragged.\n       */\n\n    }, {\n      key: \"getPlaceholderElement\",\n      value: function getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n      }\n      /** Returns the root draggable element. */\n\n    }, {\n      key: \"getRootElement\",\n      value: function getRootElement() {\n        return this._dragRef.getRootElement();\n      }\n      /** Resets a standalone drag item to its initial position. */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this._dragRef.reset();\n      }\n      /**\n       * Gets the pixel coordinates of the draggable outside of a drop container.\n       */\n\n    }, {\n      key: \"getFreeDragPosition\",\n      value: function getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this29 = this;\n\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n          _this29._updateRootElement(); // Listen for any newly-added handles.\n\n\n          _this29._handles.changes.pipe(startWith(_this29._handles), // Sync the new handles with the DragRef.\n          tap(function (handles) {\n            var childHandleElements = handles.filter(function (handle) {\n              return handle._parentDrag === _this29;\n            }).map(function (handle) {\n              return handle.element;\n            }); // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n\n            if (_this29._selfHandle && _this29.rootElementSelector) {\n              childHandleElements.push(_this29.element);\n            }\n\n            _this29._dragRef.withHandles(childHandleElements);\n          }), // Listen if the state of any of the handles changes.\n          switchMap(function (handles) {\n            return merge.apply(void 0, _toConsumableArray(handles.map(function (item) {\n              return item._stateChanges.pipe(startWith(item));\n            })));\n          }), takeUntil(_this29._destroyed)).subscribe(function (handleInstance) {\n            // Enabled/disable the handle that changed in the DragRef.\n            var dragRef = _this29._dragRef;\n            var handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n          });\n\n          if (_this29.freeDragPosition) {\n            _this29._dragRef.setFreeDragPosition(_this29.freeDragPosition);\n          }\n        });\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var rootSelectorChange = changes['rootElementSelector'];\n        var positionChange = changes['freeDragPosition']; // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n          this._updateRootElement();\n        } // Skip the first change since it's being handled in `ngAfterViewInit`.\n\n\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.dropContainer) {\n          this.dropContainer.removeItem(this);\n        }\n\n        var index = CdkDrag._dragInstances.indexOf(this);\n\n        if (index > -1) {\n          CdkDrag._dragInstances.splice(index, 1);\n        }\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n\n        this._dragRef.dispose();\n      }\n      /** Syncs the root element with the `DragRef`. */\n\n    }, {\n      key: \"_updateRootElement\",\n      value: function _updateRootElement() {\n        var element = this.element.nativeElement;\n        var rootElement = this.rootElementSelector ? getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          assertElementNode(rootElement, 'cdkDrag');\n        }\n\n        this._dragRef.withRootElement(rootElement || element);\n      }\n      /** Gets the boundary element, based on the `boundaryElement` value. */\n\n    }, {\n      key: \"_getBoundaryElement\",\n      value: function _getBoundaryElement() {\n        var boundary = this.boundaryElement;\n\n        if (!boundary) {\n          return null;\n        }\n\n        if (typeof boundary === 'string') {\n          return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n\n        var element = coerceElement(boundary);\n\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !element.contains(this.element.nativeElement)) {\n          throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n\n        return element;\n      }\n      /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n\n    }, {\n      key: \"_syncInputs\",\n      value: function _syncInputs(ref) {\n        var _this30 = this;\n\n        ref.beforeStarted.subscribe(function () {\n          if (!ref.isDragging()) {\n            var dir = _this30._dir;\n            var dragStartDelay = _this30.dragStartDelay;\n            var placeholder = _this30._placeholderTemplate ? {\n              template: _this30._placeholderTemplate.templateRef,\n              context: _this30._placeholderTemplate.data,\n              viewContainer: _this30._viewContainerRef\n            } : null;\n            var preview = _this30._previewTemplate ? {\n              template: _this30._previewTemplate.templateRef,\n              context: _this30._previewTemplate.data,\n              matchSize: _this30._previewTemplate.matchSize,\n              viewContainer: _this30._viewContainerRef\n            } : null;\n            ref.disabled = _this30.disabled;\n            ref.lockAxis = _this30.lockAxis;\n            ref.dragStartDelay = typeof dragStartDelay === 'object' && dragStartDelay ? dragStartDelay : coerceNumberProperty(dragStartDelay);\n            ref.constrainPosition = _this30.constrainPosition;\n            ref.previewClass = _this30.previewClass;\n            ref.withBoundaryElement(_this30._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview).withPreviewContainer(_this30.previewContainer || 'global');\n\n            if (dir) {\n              ref.withDirection(dir.value);\n            }\n          }\n        }); // This only needs to be resolved once.\n\n        ref.beforeStarted.pipe(take(1)).subscribe(function () {\n          var _a, _b; // If we managed to resolve a parent through DI, use it.\n\n\n          if (_this30._parentDrag) {\n            ref.withParent(_this30._parentDrag._dragRef);\n            return;\n          } // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n          // the item was projected into another item by something like `ngTemplateOutlet`.\n\n\n          var parent = _this30.element.nativeElement.parentElement;\n\n          while (parent) {\n            // `classList` needs to be null checked, because IE doesn't have it on some elements.\n            if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n              ref.withParent(((_b = CdkDrag._dragInstances.find(function (drag) {\n                return drag.element.nativeElement === parent;\n              })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n              break;\n            }\n\n            parent = parent.parentElement;\n          }\n        });\n      }\n      /** Handles the events from the underlying `DragRef`. */\n\n    }, {\n      key: \"_handleEvents\",\n      value: function _handleEvents(ref) {\n        var _this31 = this;\n\n        ref.started.subscribe(function () {\n          _this31.started.emit({\n            source: _this31\n          }); // Since all of these events run outside of change detection,\n          // we need to ensure that everything is marked correctly.\n\n\n          _this31._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(function () {\n          _this31.released.emit({\n            source: _this31\n          });\n        });\n        ref.ended.subscribe(function (event) {\n          _this31.ended.emit({\n            source: _this31,\n            distance: event.distance,\n            dropPoint: event.dropPoint\n          }); // Since all of these events run outside of change detection,\n          // we need to ensure that everything is marked correctly.\n\n\n          _this31._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(function (event) {\n          _this31.entered.emit({\n            container: event.container.data,\n            item: _this31,\n            currentIndex: event.currentIndex\n          });\n        });\n        ref.exited.subscribe(function (event) {\n          _this31.exited.emit({\n            container: event.container.data,\n            item: _this31\n          });\n        });\n        ref.dropped.subscribe(function (event) {\n          _this31.dropped.emit({\n            previousIndex: event.previousIndex,\n            currentIndex: event.currentIndex,\n            previousContainer: event.previousContainer.data,\n            container: event.container.data,\n            isPointerOverContainer: event.isPointerOverContainer,\n            item: _this31,\n            distance: event.distance,\n            dropPoint: event.dropPoint\n          });\n        });\n      }\n      /** Assigns the default input values based on a provided config object. */\n\n    }, {\n      key: \"_assignDefaults\",\n      value: function _assignDefaults(config) {\n        var lockAxis = config.lockAxis,\n            dragStartDelay = config.dragStartDelay,\n            constrainPosition = config.constrainPosition,\n            previewClass = config.previewClass,\n            boundaryElement = config.boundaryElement,\n            draggingDisabled = config.draggingDisabled,\n            rootElementSelector = config.rootElementSelector,\n            previewContainer = config.previewContainer;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n\n        if (lockAxis) {\n          this.lockAxis = lockAxis;\n        }\n\n        if (constrainPosition) {\n          this.constrainPosition = constrainPosition;\n        }\n\n        if (previewClass) {\n          this.previewClass = previewClass;\n        }\n\n        if (boundaryElement) {\n          this.boundaryElement = boundaryElement;\n        }\n\n        if (rootElementSelector) {\n          this.rootElementSelector = rootElementSelector;\n        }\n\n        if (previewContainer) {\n          this.previewContainer = previewContainer;\n        }\n      }\n    }]);\n\n    return CdkDrag;\n  }();\n\n  CdkDrag.ɵfac = function CdkDrag_Factory(t) {\n    return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n  };\n\n  CdkDrag.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDrag,\n    selectors: [[\"\", \"cdkDrag\", \"\"]],\n    contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n      }\n    },\n    hostAttrs: [1, \"cdk-drag\"],\n    hostVars: 4,\n    hostBindings: function CdkDrag_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n      }\n    },\n    inputs: {\n      disabled: [\"cdkDragDisabled\", \"disabled\"],\n      dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"],\n      lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"],\n      constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"],\n      previewClass: [\"cdkDragPreviewClass\", \"previewClass\"],\n      boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"],\n      rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"],\n      previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"],\n      data: [\"cdkDragData\", \"data\"],\n      freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"]\n    },\n    outputs: {\n      started: \"cdkDragStarted\",\n      released: \"cdkDragReleased\",\n      ended: \"cdkDragEnded\",\n      entered: \"cdkDragEntered\",\n      exited: \"cdkDragExited\",\n      dropped: \"cdkDragDropped\",\n      moved: \"cdkDragMoved\"\n    },\n    exportAs: [\"cdkDrag\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_PARENT,\n      useExisting: CdkDrag\n    }]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  CdkDrag._dragInstances = [];\n  return CdkDrag;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Gets the closest ancestor of an element that matches a selector. */\n\n\nfunction getClosestMatchingAncestor(element, selector) {\n  var currentElement = element.parentElement;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) : currentElement.msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar DragDropModule = /*#__PURE__*/(function () {\n  var DragDropModule = /*#__PURE__*/_createClass(function DragDropModule() {\n    _classCallCheck(this, DragDropModule);\n  });\n\n  DragDropModule.ɵfac = function DragDropModule_Factory(t) {\n    return new (t || DragDropModule)();\n  };\n\n  DragDropModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DragDropModule\n  });\n  DragDropModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [DragDrop],\n    imports: [CdkScrollableModule]\n  });\n  return DragDropModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, {\n    declarations: function declarations() {\n      return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];\n    },\n    exports: function exports() {\n      return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };","map":{"version":3,"names":["i0","Injectable","NgZone","Inject","InjectionToken","Directive","Input","EventEmitter","ElementRef","ChangeDetectorRef","Optional","SkipSelf","Output","TemplateRef","ViewContainerRef","Self","ContentChildren","ContentChild","NgModule","i1","DOCUMENT","i2","ViewportRuler","ScrollDispatcher","CdkScrollableModule","_getEventTarget","normalizePassiveListenerOptions","_getShadowRoot","coerceBooleanProperty","coerceElement","coerceArray","coerceNumberProperty","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","Subject","Subscription","interval","animationFrameScheduler","Observable","merge","takeUntil","startWith","map","take","tap","switchMap","Directionality","ɵngcc0","ɵngcc1","ɵngcc2","extendStyles","dest","source","importantProperties","key","hasOwnProperty","value","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","_viewportRuler","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","event","target","cachedPosition","get","scrolledParentNode","documentElement","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","_a","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","Set","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","handle","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_dropContainer","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","_toggleNativeDragInteractions","_placeholder","getPlaceholderElement","getRootElement","handles","disabledHandles","add","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","_ownerSVGElement","ownerSVGElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","delete","direction","_previewContainer","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","removeChild","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_draggables","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","pipe","_scrollNode","scrollStep","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","index","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","_shouldEnterAsFirstChild","reference","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","draggedItems","filter","every","_cacheItems","connectedTo","slice","orientation","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","elementToMeasure","getVisibleElement","sort","a","b","current","_stopReceiving","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","nativeElement","activeSiblings","_sortFromLastPointerPosition","_startReceiving","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","instance","ɵfac","DragDropRegistry_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode","DEFAULT_CONFIG","DragDrop","DragDrop_Factory","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","ɵdir","ɵɵdefineDirective","selectors","inputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","CDK_DRAG_CONFIG","assertElementNode","Error","_uniqueIdCounter","CDK_DROP_LIST","ɵ0","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","_destroyed","id","_unsortedItems","_dropListRef","createDropList","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_syncItemsWithRef","documentPosition","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","dispose","ref","withDirection","correspondingDropList","list","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","CdkDropList_Factory","ɵɵdirectiveInject","hostAttrs","hostVars","hostBindings","CdkDropList_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","outputs","useValue","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CdkDragHandle_Factory","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CdkDragPreview_Factory","DRAG_HOST_CLASS","CdkDrag","_viewContainerRef","_selfHandle","subscription","movedEvent","createDrag","addItem","_syncInputs","reset","getFreeDragPosition","onStable","_updateRootElement","changes","childHandleElements","rootElementSelector","withHandles","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","getClosestMatchingAncestor","boundary","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withPreviewContainer","_b","CdkDrag_Factory","contentQueries","CdkDrag_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","CdkDrag_HostBindings","ɵɵNgOnChangesFeature","currentElement","matches","msMatchesSelector","DragDropModule","DragDropModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, (importantProperties === null || importantProperties === void 0 ? void 0 : importantProperties.has(key)) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em'\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform ? (transform + ' ' + initialTransform) : transform;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position'\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = _getEventTarget(event);\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = this._parentDragRef = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) :\n            isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = this._initialTransform = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (_getEventTarget(event) === this._preview &&\n                        event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        var _a;\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = ((_a = this._previewTemplate) === null || _a === void 0 ? void 0 : _a.template) ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body;\n        }\n        return coerceElement(previewContainer);\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -scrollStep);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, scrollStep);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            var _a;\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = (_a = this._itemPositions\n                    .find(current => current.drag === item)) === null || _a === void 0 ? void 0 : _a.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return (index === -1 || !this.sortPredicate(index, item, this)) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) && items.every(item => {\n            // Note that we have to add an exception to the `enterPredicate` for items that started off\n            // in this drop list. The drag ref has logic that allows an item to return to its initial\n            // container, if it has left the initial container and none of the connected containers\n            // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n            return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n        })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` +\n            `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate =\n            (index, drag, drop) => {\n                return this.sortPredicate(index, drag.data, drop.data);\n            };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: ScrollDispatcher },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    sortPredicate: [{ type: Input, args: ['cdkDropListSortPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    autoScrollStep: [{ type: Input, args: ['cdkDropListAutoScrollStep',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[attr.id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], sortPredicate: [{\n            type: Input,\n            args: ['cdkDropListSortPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], autoScrollStep: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollStep']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            var _a, _b;\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                // `classList` needs to be null checked, because IE doesn't have it on some elements.\n                if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({\n                source: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDrag.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag._dragInstances = [];\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] },\n    { type: CdkDrag, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [CDK_DRAG_PARENT,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    previewContainer: [{ type: Input, args: ['cdkDragPreviewContainer',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': DRAG_HOST_CLASS,\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }, { type: CdkDrag, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], previewContainer: [{\n            type: Input,\n            args: ['cdkDragPreviewContainer']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = function DragDropModule_Factory(t) { return new (t || DragDropModule)(); };\nDragDropModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}