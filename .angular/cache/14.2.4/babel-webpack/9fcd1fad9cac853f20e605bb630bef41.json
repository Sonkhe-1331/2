{"ast":null,"code":"import _toConsumableArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _get from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _createForOfIteratorHelper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/scrolling';\nvar _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nvar _c1 = [\"caption\", \"colgroup, col\"];\n\nfunction CdkTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\n\nfunction CdkTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var data_r2 = ctx.$implicit;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\n\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, ChangeDetectorRef, Attribute, SkipSelf, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\n\nfunction mixinHasStickyInput(base) {\n  return /*#__PURE__*/function (_base) {\n    _inherits(_class, _base);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this._sticky = false;\n      /** Whether the sticky input has changed since it was last checked. */\n\n      _this._hasStickyChanged = false;\n      return _this;\n    }\n    /** Whether sticky positioning should be applied. */\n\n\n    _createClass(_class, [{\n      key: \"sticky\",\n      get: function get() {\n        return this._sticky;\n      },\n      set: function set(v) {\n        var prevValue = this._sticky;\n        this._sticky = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._sticky;\n      }\n      /** Whether the sticky value has changed since this was last called. */\n\n    }, {\n      key: \"hasStickyChanged\",\n      value: function hasStickyChanged() {\n        var hasStickyChanged = this._hasStickyChanged;\n        this._hasStickyChanged = false;\n        return hasStickyChanged;\n      }\n      /** Resets the dirty check for cases where the sticky state has been used without checking. */\n\n    }, {\n      key: \"resetStickyChanged\",\n      value: function resetStickyChanged() {\n        this._hasStickyChanged = false;\n      }\n    }]);\n\n    return _class;\n  }(base);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\n\n\nvar CDK_TABLE = /*#__PURE__*/new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\n\nvar TEXT_COLUMN_OPTIONS = /*#__PURE__*/new InjectionToken('text-column-options');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\nvar CdkCellDef = /*#__PURE__*/(function () {\n  var CdkCellDef = /*#__PURE__*/_createClass(function CdkCellDef(\n  /** @docs-private */\n  template) {\n    _classCallCheck(this, CdkCellDef);\n\n    this.template = template;\n  });\n\n  CdkCellDef.ɵfac = function CdkCellDef_Factory(t) {\n    return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkCellDef,\n    selectors: [[\"\", \"cdkCellDef\", \"\"]]\n  });\n  return CdkCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nvar CdkHeaderCellDef = /*#__PURE__*/(function () {\n  var CdkHeaderCellDef = /*#__PURE__*/_createClass(function CdkHeaderCellDef(\n  /** @docs-private */\n  template) {\n    _classCallCheck(this, CdkHeaderCellDef);\n\n    this.template = template;\n  });\n\n  CdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {\n    return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkHeaderCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkHeaderCellDef,\n    selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]]\n  });\n  return CdkHeaderCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nvar CdkFooterCellDef = /*#__PURE__*/(function () {\n  var CdkFooterCellDef = /*#__PURE__*/_createClass(function CdkFooterCellDef(\n  /** @docs-private */\n  template) {\n    _classCallCheck(this, CdkFooterCellDef);\n\n    this.template = template;\n  });\n\n  CdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {\n    return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkFooterCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkFooterCellDef,\n    selectors: [[\"\", \"cdkFooterCellDef\", \"\"]]\n  });\n  return CdkFooterCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Boilerplate for applying mixins to CdkColumnDef.\n\n/** @docs-private */\n\n\nvar CdkColumnDefBase = /*#__PURE__*/_createClass(function CdkColumnDefBase() {\n  _classCallCheck(this, CdkColumnDefBase);\n});\n\nvar _CdkColumnDefBase = /*#__PURE__*/mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n\n\nvar CdkColumnDef = /*#__PURE__*/(function () {\n  var CdkColumnDef = /*#__PURE__*/function (_CdkColumnDefBase2) {\n    _inherits(CdkColumnDef, _CdkColumnDefBase2);\n\n    var _super2 = _createSuper(CdkColumnDef);\n\n    function CdkColumnDef(_table) {\n      var _this2;\n\n      _classCallCheck(this, CdkColumnDef);\n\n      _this2 = _super2.call(this);\n      _this2._table = _table;\n      _this2._stickyEnd = false;\n      return _this2;\n    }\n    /** Unique name for this column. */\n\n\n    _createClass(CdkColumnDef, [{\n      key: \"name\",\n      get: function get() {\n        return this._name;\n      },\n      set: function set(name) {\n        this._setNameInput(name);\n      }\n      /**\n       * Whether this column should be sticky positioned on the end of the row. Should make sure\n       * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n       * has been changed.\n       */\n\n    }, {\n      key: \"stickyEnd\",\n      get: function get() {\n        return this._stickyEnd;\n      },\n      set: function set(v) {\n        var prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n      }\n      /**\n       * Overridable method that sets the css classes that will be added to every cell in this\n       * column.\n       * In the future, columnCssClassName will change from type string[] to string and this\n       * will set a single string value.\n       * @docs-private\n       */\n\n    }, {\n      key: \"_updateColumnCssClassName\",\n      value: function _updateColumnCssClassName() {\n        this._columnCssClassName = [\"cdk-column-\".concat(this.cssClassFriendlyName)];\n      }\n      /**\n       * This has been extracted to a util because of TS 4 and VE.\n       * View Engine doesn't support property rename inheritance.\n       * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n       * @docs-private\n       */\n\n    }, {\n      key: \"_setNameInput\",\n      value: function _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n          this._name = value;\n          this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\n\n          this._updateColumnCssClassName();\n        }\n      }\n    }]);\n\n    return CdkColumnDef;\n  }(_CdkColumnDefBase);\n\n  CdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) {\n    return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n  };\n\n  CdkColumnDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkColumnDef,\n    selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n    contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n      }\n    },\n    inputs: {\n      sticky: \"sticky\",\n      name: [\"cdkColumnDef\", \"name\"],\n      stickyEnd: \"stickyEnd\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n      useExisting: CdkColumnDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkColumnDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\n\n\nvar BaseCdkCell = /*#__PURE__*/_createClass(function BaseCdkCell(columnDef, elementRef) {\n  _classCallCheck(this, BaseCdkCell);\n\n  // If IE 11 is dropped before we switch to setting a single class name, change to multi param\n  // with destructuring.\n  var classList = elementRef.nativeElement.classList;\n\n  var _iterator = _createForOfIteratorHelper(columnDef._columnCssClassName),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var className = _step.value;\n      classList.add(className);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n});\n/** Header cell template container that adds the right classes and role. */\n\n\nvar CdkHeaderCell = /*#__PURE__*/(function () {\n  var CdkHeaderCell = /*#__PURE__*/function (_BaseCdkCell) {\n    _inherits(CdkHeaderCell, _BaseCdkCell);\n\n    var _super3 = _createSuper(CdkHeaderCell);\n\n    function CdkHeaderCell(columnDef, elementRef) {\n      _classCallCheck(this, CdkHeaderCell);\n\n      return _super3.call(this, columnDef, elementRef);\n    }\n\n    return _createClass(CdkHeaderCell);\n  }(BaseCdkCell);\n\n  CdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {\n    return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CdkHeaderCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkHeaderCell,\n    selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n    hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkHeaderCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer cell template container that adds the right classes and role. */\n\n\nvar CdkFooterCell = /*#__PURE__*/(function () {\n  var CdkFooterCell = /*#__PURE__*/function (_BaseCdkCell2) {\n    _inherits(CdkFooterCell, _BaseCdkCell2);\n\n    var _super4 = _createSuper(CdkFooterCell);\n\n    function CdkFooterCell(columnDef, elementRef) {\n      var _this3;\n\n      _classCallCheck(this, CdkFooterCell);\n\n      var _a;\n\n      _this3 = _super4.call(this, columnDef, elementRef);\n\n      if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n        var tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n\n        var role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n        elementRef.nativeElement.setAttribute('role', role);\n      }\n\n      return _this3;\n    }\n\n    return _createClass(CdkFooterCell);\n  }(BaseCdkCell);\n\n  CdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {\n    return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CdkFooterCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkFooterCell,\n    selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n    hostAttrs: [1, \"cdk-footer-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkFooterCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Cell template container that adds the right classes and role. */\n\n\nvar CdkCell = /*#__PURE__*/(function () {\n  var CdkCell = /*#__PURE__*/function (_BaseCdkCell3) {\n    _inherits(CdkCell, _BaseCdkCell3);\n\n    var _super5 = _createSuper(CdkCell);\n\n    function CdkCell(columnDef, elementRef) {\n      var _this4;\n\n      _classCallCheck(this, CdkCell);\n\n      var _a;\n\n      _this4 = _super5.call(this, columnDef, elementRef);\n\n      if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n        var tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n\n        var role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n        elementRef.nativeElement.setAttribute('role', role);\n      }\n\n      return _this4;\n    }\n\n    return _createClass(CdkCell);\n  }(BaseCdkCell);\n\n  CdkCell.ɵfac = function CdkCell_Factory(t) {\n    return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CdkCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkCell,\n    selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n    hostAttrs: [1, \"cdk-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @docs-private\n */\n\n\nvar _Schedule = /*#__PURE__*/_createClass(function _Schedule() {\n  _classCallCheck(this, _Schedule);\n\n  this.tasks = [];\n  this.endTasks = [];\n});\n/** Injection token used to provide a coalesced style scheduler. */\n\n\nvar _COALESCED_STYLE_SCHEDULER = /*#__PURE__*/new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\n\n\nvar _CoalescedStyleScheduler = /*#__PURE__*/(function () {\n  var _CoalescedStyleScheduler = /*#__PURE__*/function () {\n    function _CoalescedStyleScheduler(_ngZone) {\n      _classCallCheck(this, _CoalescedStyleScheduler);\n\n      this._ngZone = _ngZone;\n      this._currentSchedule = null;\n      this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n\n\n    _createClass(_CoalescedStyleScheduler, [{\n      key: \"schedule\",\n      value: function schedule(task) {\n        this._createScheduleIfNeeded();\n\n        this._currentSchedule.tasks.push(task);\n      }\n      /**\n       * Schedules the specified task to run after other scheduled tasks at the end of the current\n       * VM turn.\n       */\n\n    }, {\n      key: \"scheduleEnd\",\n      value: function scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n\n        this._currentSchedule.endTasks.push(task);\n      }\n      /** Prevent any further tasks from running. */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n    }, {\n      key: \"_createScheduleIfNeeded\",\n      value: function _createScheduleIfNeeded() {\n        var _this5 = this;\n\n        if (this._currentSchedule) {\n          return;\n        }\n\n        this._currentSchedule = new _Schedule();\n\n        this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(function () {\n          while (_this5._currentSchedule.tasks.length || _this5._currentSchedule.endTasks.length) {\n            var schedule = _this5._currentSchedule; // Capture new tasks scheduled by the current set of tasks.\n\n            _this5._currentSchedule = new _Schedule();\n\n            var _iterator2 = _createForOfIteratorHelper(schedule.tasks),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var task = _step2.value;\n                task();\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            var _iterator3 = _createForOfIteratorHelper(schedule.endTasks),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _task = _step3.value;\n\n                _task();\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n\n          _this5._currentSchedule = null;\n        });\n      }\n    }, {\n      key: \"_getScheduleObservable\",\n      value: function _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable ? from(Promise.resolve(undefined)) : this._ngZone.onStable.pipe(take(1));\n      }\n    }]);\n\n    return _CoalescedStyleScheduler;\n  }();\n\n  _CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) {\n    return new (t || _CoalescedStyleScheduler)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  _CoalescedStyleScheduler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: _CoalescedStyleScheduler,\n    factory: _CoalescedStyleScheduler.ɵfac\n  });\n  return _CoalescedStyleScheduler;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\n\n\nvar CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\n\nvar BaseRowDef = /*#__PURE__*/(function () {\n  var BaseRowDef = /*#__PURE__*/function () {\n    function BaseRowDef(\n    /** @docs-private */\n    template, _differs) {\n      _classCallCheck(this, BaseRowDef);\n\n      this.template = template;\n      this._differs = _differs;\n    }\n\n    _createClass(BaseRowDef, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n          var columns = changes['columns'] && changes['columns'].currentValue || [];\n          this._columnsDiffer = this._differs.find(columns).create();\n\n          this._columnsDiffer.diff(columns);\n        }\n      }\n      /**\n       * Returns the difference between the current columns and the columns from the last diff, or null\n       * if there is no difference.\n       */\n\n    }, {\n      key: \"getColumnsDiff\",\n      value: function getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n      }\n      /** Gets this row def's relevant cell template from the provided column def. */\n\n    }, {\n      key: \"extractCellTemplate\",\n      value: function extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n          return column.headerCell.template;\n        }\n\n        if (this instanceof CdkFooterRowDef) {\n          return column.footerCell.template;\n        } else {\n          return column.cell.template;\n        }\n      }\n    }]);\n\n    return BaseRowDef;\n  }();\n\n  BaseRowDef.ɵfac = function BaseRowDef_Factory(t) {\n    return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n  };\n\n  BaseRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: BaseRowDef,\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return BaseRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Boilerplate for applying mixins to CdkHeaderRowDef.\n\n/** @docs-private */\n\n\nvar CdkHeaderRowDefBase = /*#__PURE__*/function (_BaseRowDef) {\n  _inherits(CdkHeaderRowDefBase, _BaseRowDef);\n\n  var _super6 = _createSuper(CdkHeaderRowDefBase);\n\n  function CdkHeaderRowDefBase() {\n    _classCallCheck(this, CdkHeaderRowDefBase);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return _createClass(CdkHeaderRowDefBase);\n}(BaseRowDef);\n\nvar _CdkHeaderRowDefBase = /*#__PURE__*/mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\n\nvar CdkHeaderRowDef = /*#__PURE__*/(function () {\n  var CdkHeaderRowDef = /*#__PURE__*/function (_CdkHeaderRowDefBase2) {\n    _inherits(CdkHeaderRowDef, _CdkHeaderRowDefBase2);\n\n    var _super7 = _createSuper(CdkHeaderRowDef);\n\n    function CdkHeaderRowDef(template, _differs, _table) {\n      var _this6;\n\n      _classCallCheck(this, CdkHeaderRowDef);\n\n      _this6 = _super7.call(this, template, _differs);\n      _this6._table = _table;\n      return _this6;\n    } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n\n\n    _createClass(CdkHeaderRowDef, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(CdkHeaderRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n      }\n    }]);\n\n    return CdkHeaderRowDef;\n  }(_CdkHeaderRowDefBase);\n\n  CdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {\n    return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n  };\n\n  CdkHeaderRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkHeaderRowDef,\n    selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n    inputs: {\n      columns: [\"cdkHeaderRowDef\", \"columns\"],\n      sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkHeaderRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Boilerplate for applying mixins to CdkFooterRowDef.\n\n/** @docs-private */\n\n\nvar CdkFooterRowDefBase = /*#__PURE__*/function (_BaseRowDef2) {\n  _inherits(CdkFooterRowDefBase, _BaseRowDef2);\n\n  var _super8 = _createSuper(CdkFooterRowDefBase);\n\n  function CdkFooterRowDefBase() {\n    _classCallCheck(this, CdkFooterRowDefBase);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return _createClass(CdkFooterRowDefBase);\n}(BaseRowDef);\n\nvar _CdkFooterRowDefBase = /*#__PURE__*/mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nvar CdkFooterRowDef = /*#__PURE__*/(function () {\n  var CdkFooterRowDef = /*#__PURE__*/function (_CdkFooterRowDefBase2) {\n    _inherits(CdkFooterRowDef, _CdkFooterRowDefBase2);\n\n    var _super9 = _createSuper(CdkFooterRowDef);\n\n    function CdkFooterRowDef(template, _differs, _table) {\n      var _this7;\n\n      _classCallCheck(this, CdkFooterRowDef);\n\n      _this7 = _super9.call(this, template, _differs);\n      _this7._table = _table;\n      return _this7;\n    } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n\n\n    _createClass(CdkFooterRowDef, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(CdkFooterRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n      }\n    }]);\n\n    return CdkFooterRowDef;\n  }(_CdkFooterRowDefBase);\n\n  CdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {\n    return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n  };\n\n  CdkFooterRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkFooterRowDef,\n    selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n    inputs: {\n      columns: [\"cdkFooterRowDef\", \"columns\"],\n      sticky: [\"cdkFooterRowDefSticky\", \"sticky\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkFooterRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n\n\nvar CdkRowDef = /*#__PURE__*/(function () {\n  var CdkRowDef = /*#__PURE__*/function (_BaseRowDef3) {\n    _inherits(CdkRowDef, _BaseRowDef3);\n\n    var _super10 = _createSuper(CdkRowDef);\n\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    function CdkRowDef(template, _differs, _table) {\n      var _this8;\n\n      _classCallCheck(this, CdkRowDef);\n\n      _this8 = _super10.call(this, template, _differs);\n      _this8._table = _table;\n      return _this8;\n    }\n\n    return _createClass(CdkRowDef);\n  }(BaseRowDef);\n\n  CdkRowDef.ɵfac = function CdkRowDef_Factory(t) {\n    return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n  };\n\n  CdkRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkRowDef,\n    selectors: [[\"\", \"cdkRowDef\", \"\"]],\n    inputs: {\n      columns: [\"cdkRowDefColumns\", \"columns\"],\n      when: [\"cdkRowDefWhen\", \"when\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\n\n\nvar CdkCellOutlet = /*#__PURE__*/(function () {\n  var CdkCellOutlet = /*#__PURE__*/function () {\n    function CdkCellOutlet(_viewContainer) {\n      _classCallCheck(this, CdkCellOutlet);\n\n      this._viewContainer = _viewContainer;\n      CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n\n    _createClass(CdkCellOutlet, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n          CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n      }\n    }]);\n\n    return CdkCellOutlet;\n  }();\n\n  CdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {\n    return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  CdkCellOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkCellOutlet,\n    selectors: [[\"\", \"cdkCellOutlet\", \"\"]]\n  });\n  /**\n   * Static property containing the latest constructed instance of this class.\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n   * createEmbeddedView. After one of these components are created, this property will provide\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n   * construct the cells with the provided context.\n   */\n\n  CdkCellOutlet.mostRecentCellOutlet = null;\n  return CdkCellOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkHeaderRow = /*#__PURE__*/(function () {\n  var CdkHeaderRow = /*#__PURE__*/_createClass(function CdkHeaderRow() {\n    _classCallCheck(this, CdkHeaderRow);\n  });\n\n  CdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {\n    return new (t || CdkHeaderRow)();\n  };\n\n  CdkHeaderRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CdkHeaderRow,\n    selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function CdkHeaderRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [CdkCellOutlet],\n    encapsulation: 2\n  });\n  return CdkHeaderRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkFooterRow = /*#__PURE__*/(function () {\n  var CdkFooterRow = /*#__PURE__*/_createClass(function CdkFooterRow() {\n    _classCallCheck(this, CdkFooterRow);\n  });\n\n  CdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {\n    return new (t || CdkFooterRow)();\n  };\n\n  CdkFooterRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CdkFooterRow,\n    selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function CdkFooterRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [CdkCellOutlet],\n    encapsulation: 2\n  });\n  return CdkFooterRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkRow = /*#__PURE__*/(function () {\n  var CdkRow = /*#__PURE__*/_createClass(function CdkRow() {\n    _classCallCheck(this, CdkRow);\n  });\n\n  CdkRow.ɵfac = function CdkRow_Factory(t) {\n    return new (t || CdkRow)();\n  };\n\n  CdkRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CdkRow,\n    selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function CdkRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [CdkCellOutlet],\n    encapsulation: 2\n  });\n  return CdkRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\n\n\nvar CdkNoDataRow = /*#__PURE__*/(function () {\n  var CdkNoDataRow = /*#__PURE__*/_createClass(function CdkNoDataRow(templateRef) {\n    _classCallCheck(this, CdkNoDataRow);\n\n    this.templateRef = templateRef;\n  });\n\n  CdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) {\n    return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkNoDataRow.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkNoDataRow,\n    selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]]\n  });\n  return CdkNoDataRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\n\n\nvar STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\n\nvar StickyStyler = /*#__PURE__*/function () {\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\n   *     and their dimensions.\n   */\n  function StickyStyler(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler) {\n    var _isBrowser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n    var _needsPositionStickyOnElement = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n\n    var _positionListener = arguments.length > 6 ? arguments[6] : undefined;\n\n    _classCallCheck(this, StickyStyler);\n\n    this._isNativeHtmlTable = _isNativeHtmlTable;\n    this._stickCellCss = _stickCellCss;\n    this.direction = direction;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._isBrowser = _isBrowser;\n    this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n    this._positionListener = _positionListener;\n    this._cachedCellWidths = [];\n    this._borderCellCss = {\n      'top': \"\".concat(_stickCellCss, \"-border-elem-top\"),\n      'bottom': \"\".concat(_stickCellCss, \"-border-elem-bottom\"),\n      'left': \"\".concat(_stickCellCss, \"-border-elem-left\"),\n      'right': \"\".concat(_stickCellCss, \"-border-elem-right\")\n    };\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n\n\n  _createClass(StickyStyler, [{\n    key: \"clearStickyPositioning\",\n    value: function clearStickyPositioning(rows, stickyDirections) {\n      var _this9 = this;\n\n      var elementsToClear = [];\n\n      var _iterator4 = _createForOfIteratorHelper(rows),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var row = _step4.value;\n\n          // If the row isn't an element (e.g. if it's an `ng-container`),\n          // it won't have inline styles or `children` so we skip it.\n          if (row.nodeType !== row.ELEMENT_NODE) {\n            continue;\n          }\n\n          elementsToClear.push(row);\n\n          for (var i = 0; i < row.children.length; i++) {\n            elementsToClear.push(row.children[i]);\n          }\n        } // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      this._coalescedStyleScheduler.schedule(function () {\n        var _iterator5 = _createForOfIteratorHelper(elementsToClear),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var element = _step5.value;\n\n            _this9._removeStickyStyle(element, stickyDirections);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n\n  }, {\n    key: \"updateStickyColumns\",\n    value: function updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n      var _this10 = this;\n\n      var recalculateCellWidths = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n      if (!rows.length || !this._isBrowser || !(stickyStartStates.some(function (state) {\n        return state;\n      }) || stickyEndStates.some(function (state) {\n        return state;\n      }))) {\n        if (this._positionListener) {\n          this._positionListener.stickyColumnsUpdated({\n            sizes: []\n          });\n\n          this._positionListener.stickyEndColumnsUpdated({\n            sizes: []\n          });\n        }\n\n        return;\n      }\n\n      var firstRow = rows[0];\n      var numCells = firstRow.children.length;\n\n      var cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n\n      var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n\n      var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n\n      var lastStickyStart = stickyStartStates.lastIndexOf(true);\n      var firstStickyEnd = stickyEndStates.indexOf(true); // Coalesce with sticky row updates (and potentially other changes like column resize).\n\n      this._coalescedStyleScheduler.schedule(function () {\n        var isRtl = _this10.direction === 'rtl';\n        var start = isRtl ? 'right' : 'left';\n        var end = isRtl ? 'left' : 'right';\n\n        var _iterator6 = _createForOfIteratorHelper(rows),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var row = _step6.value;\n\n            for (var i = 0; i < numCells; i++) {\n              var cell = row.children[i];\n\n              if (stickyStartStates[i]) {\n                _this10._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n              }\n\n              if (stickyEndStates[i]) {\n                _this10._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        if (_this10._positionListener) {\n          _this10._positionListener.stickyColumnsUpdated({\n            sizes: lastStickyStart === -1 ? [] : cellWidths.slice(0, lastStickyStart + 1).map(function (width, index) {\n              return stickyStartStates[index] ? width : null;\n            })\n          });\n\n          _this10._positionListener.stickyEndColumnsUpdated({\n            sizes: firstStickyEnd === -1 ? [] : cellWidths.slice(firstStickyEnd).map(function (width, index) {\n              return stickyEndStates[index + firstStickyEnd] ? width : null;\n            }).reverse()\n          });\n        }\n      });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n\n  }, {\n    key: \"stickRows\",\n    value: function stickRows(rowsToStick, stickyStates, position) {\n      var _this11 = this;\n\n      // Since we can't measure the rows on the server, we can't stick the rows properly.\n      if (!this._isBrowser) {\n        return;\n      } // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n      // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n      // sticky states need to be reversed as well.\n\n\n      var rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n      var states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates; // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n\n      var stickyOffsets = [];\n      var stickyCellHeights = [];\n      var elementsToStick = [];\n\n      for (var rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n        if (!states[rowIndex]) {\n          continue;\n        }\n\n        stickyOffsets[rowIndex] = stickyOffset;\n        var row = rows[rowIndex];\n        elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];\n        var height = row.getBoundingClientRect().height;\n        stickyOffset += height;\n        stickyCellHeights[rowIndex] = height;\n      }\n\n      var borderedRowIndex = states.lastIndexOf(true); // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n      // (and potentially other changes like column resize).\n\n      this._coalescedStyleScheduler.schedule(function () {\n        var _a, _b;\n\n        for (var _rowIndex = 0; _rowIndex < rows.length; _rowIndex++) {\n          if (!states[_rowIndex]) {\n            continue;\n          }\n\n          var offset = stickyOffsets[_rowIndex];\n          var isBorderedRowIndex = _rowIndex === borderedRowIndex;\n\n          var _iterator7 = _createForOfIteratorHelper(elementsToStick[_rowIndex]),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var element = _step7.value;\n\n              _this11._addStickyStyle(element, position, offset, isBorderedRowIndex);\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n\n        if (position === 'top') {\n          (_a = _this11._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({\n            sizes: stickyCellHeights,\n            offsets: stickyOffsets,\n            elements: elementsToStick\n          });\n        } else {\n          (_b = _this11._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({\n            sizes: stickyCellHeights,\n            offsets: stickyOffsets,\n            elements: elementsToStick\n          });\n        }\n      });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n\n  }, {\n    key: \"updateStickyFooterContainer\",\n    value: function updateStickyFooterContainer(tableElement, stickyStates) {\n      var _this12 = this;\n\n      if (!this._isNativeHtmlTable) {\n        return;\n      }\n\n      var tfoot = tableElement.querySelector('tfoot'); // Coalesce with other sticky updates (and potentially other changes like column resize).\n\n      this._coalescedStyleScheduler.schedule(function () {\n        if (stickyStates.some(function (state) {\n          return !state;\n        })) {\n          _this12._removeStickyStyle(tfoot, ['bottom']);\n        } else {\n          _this12._addStickyStyle(tfoot, 'bottom', 0, false);\n        }\n      });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n\n  }, {\n    key: \"_removeStickyStyle\",\n    value: function _removeStickyStyle(element, stickyDirections) {\n      var _iterator8 = _createForOfIteratorHelper(stickyDirections),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var dir = _step8.value;\n          element.style[dir] = '';\n          element.classList.remove(this._borderCellCss[dir]);\n        } // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      var hasDirection = STICKY_DIRECTIONS.some(function (dir) {\n        return stickyDirections.indexOf(dir) === -1 && element.style[dir];\n      });\n\n      if (hasDirection) {\n        element.style.zIndex = this._getCalculatedZIndex(element);\n      } else {\n        // When not hasDirection, _getCalculatedZIndex will always return ''.\n        element.style.zIndex = '';\n\n        if (this._needsPositionStickyOnElement) {\n          element.style.position = '';\n        }\n\n        element.classList.remove(this._stickCellCss);\n      }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n\n  }, {\n    key: \"_addStickyStyle\",\n    value: function _addStickyStyle(element, dir, dirValue, isBorderElement) {\n      element.classList.add(this._stickCellCss);\n\n      if (isBorderElement) {\n        element.classList.add(this._borderCellCss[dir]);\n      }\n\n      element.style[dir] = \"\".concat(dirValue, \"px\");\n      element.style.zIndex = this._getCalculatedZIndex(element);\n\n      if (this._needsPositionStickyOnElement) {\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n      }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n\n  }, {\n    key: \"_getCalculatedZIndex\",\n    value: function _getCalculatedZIndex(element) {\n      var zIndexIncrements = {\n        top: 100,\n        bottom: 10,\n        left: 1,\n        right: 1\n      };\n      var zIndex = 0; // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n\n      var _iterator9 = _createForOfIteratorHelper(STICKY_DIRECTIONS),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var dir = _step9.value;\n\n          if (element.style[dir]) {\n            zIndex += zIndexIncrements[dir];\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return zIndex ? \"\".concat(zIndex) : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n\n  }, {\n    key: \"_getCellWidths\",\n    value: function _getCellWidths(row) {\n      var recalculateCellWidths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!recalculateCellWidths && this._cachedCellWidths.length) {\n        return this._cachedCellWidths;\n      }\n\n      var cellWidths = [];\n      var firstRowCells = row.children;\n\n      for (var i = 0; i < firstRowCells.length; i++) {\n        var cell = firstRowCells[i];\n        cellWidths.push(cell.getBoundingClientRect().width);\n      }\n\n      this._cachedCellWidths = cellWidths;\n      return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n\n  }, {\n    key: \"_getStickyStartColumnPositions\",\n    value: function _getStickyStartColumnPositions(widths, stickyStates) {\n      var positions = [];\n      var nextPosition = 0;\n\n      for (var i = 0; i < widths.length; i++) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n\n  }, {\n    key: \"_getStickyEndColumnPositions\",\n    value: function _getStickyEndColumnPositions(widths, stickyStates) {\n      var positions = [];\n      var nextPosition = 0;\n\n      for (var i = widths.length; i > 0; i--) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n  }]);\n\n  return StickyStyler;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\n\n\nfunction getTableUnknownColumnError(id) {\n  return Error(\"Could not find column with id \\\"\".concat(id, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\n\n\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(\"Duplicate column definition name provided: \\\"\".concat(name, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\n\n\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\n\n\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(\"Could not find a matching row definition for the\" + \"provided row data: \".concat(JSON.stringify(data)));\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\n\n\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\n\n\nfunction getTableUnknownDataSourceError() {\n  return Error(\"Provided data source did not match an array, Observable, or DataSource\");\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\n\n\nfunction getTableTextColumnMissingParentTableError() {\n  return Error(\"Text column could not find a parent table for registration.\");\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\n\n\nfunction getTableTextColumnMissingNameError() {\n  return Error(\"Table text column must have a name.\");\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the StickyPositioningListener. */\n\n\nvar STICKY_POSITIONING_LISTENER = /*#__PURE__*/new InjectionToken('CDK_SPL');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\n\nvar CdkRecycleRows = /*#__PURE__*/(function () {\n  var CdkRecycleRows = /*#__PURE__*/_createClass(function CdkRecycleRows() {\n    _classCallCheck(this, CdkRecycleRows);\n  });\n\n  CdkRecycleRows.ɵfac = function CdkRecycleRows_Factory(t) {\n    return new (t || CdkRecycleRows)();\n  };\n\n  CdkRecycleRows.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkRecycleRows,\n    selectors: [[\"cdk-table\", \"recycleRows\", \"\"], [\"table\", \"cdk-table\", \"\", \"recycleRows\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _RecycleViewRepeaterStrategy\n    }])]\n  });\n  return CdkRecycleRows;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\n\n\nvar DataRowOutlet = /*#__PURE__*/(function () {\n  var DataRowOutlet = /*#__PURE__*/_createClass(function DataRowOutlet(viewContainer, elementRef) {\n    _classCallCheck(this, DataRowOutlet);\n\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  });\n\n  DataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {\n    return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  DataRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DataRowOutlet,\n    selectors: [[\"\", \"rowOutlet\", \"\"]]\n  });\n  return DataRowOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\n\n\nvar HeaderRowOutlet = /*#__PURE__*/(function () {\n  var HeaderRowOutlet = /*#__PURE__*/_createClass(function HeaderRowOutlet(viewContainer, elementRef) {\n    _classCallCheck(this, HeaderRowOutlet);\n\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  });\n\n  HeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {\n    return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  HeaderRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: HeaderRowOutlet,\n    selectors: [[\"\", \"headerRowOutlet\", \"\"]]\n  });\n  return HeaderRowOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\n\n\nvar FooterRowOutlet = /*#__PURE__*/(function () {\n  var FooterRowOutlet = /*#__PURE__*/_createClass(function FooterRowOutlet(viewContainer, elementRef) {\n    _classCallCheck(this, FooterRowOutlet);\n\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  });\n\n  FooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {\n    return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  FooterRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FooterRowOutlet,\n    selectors: [[\"\", \"footerRowOutlet\", \"\"]]\n  });\n  return FooterRowOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\n\n\nvar NoDataRowOutlet = /*#__PURE__*/(function () {\n  var NoDataRowOutlet = /*#__PURE__*/_createClass(function NoDataRowOutlet(viewContainer, elementRef) {\n    _classCallCheck(this, NoDataRowOutlet);\n\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  });\n\n  NoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) {\n    return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NoDataRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NoDataRowOutlet,\n    selectors: [[\"\", \"noDataRowOutlet\", \"\"]]\n  });\n  return NoDataRowOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\n\n\nvar CDK_TABLE_TEMPLATE = // Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n\"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\";\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\n\nvar RowViewRef = /*#__PURE__*/function (_EmbeddedViewRef) {\n  _inherits(RowViewRef, _EmbeddedViewRef);\n\n  var _super11 = _createSuper(RowViewRef);\n\n  function RowViewRef() {\n    _classCallCheck(this, RowViewRef);\n\n    return _super11.apply(this, arguments);\n  }\n\n  return _createClass(RowViewRef);\n}(EmbeddedViewRef);\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\n\n\nvar CdkTable = /*#__PURE__*/(function () {\n  var CdkTable = /*#__PURE__*/function () {\n    function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler,\n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener) {\n      _classCallCheck(this, CdkTable);\n\n      this._differs = _differs;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      this._dir = _dir;\n      this._platform = _platform;\n      this._viewRepeater = _viewRepeater;\n      this._coalescedStyleScheduler = _coalescedStyleScheduler;\n      this._viewportRuler = _viewportRuler;\n      this._stickyPositioningListener = _stickyPositioningListener;\n      /** Subject that emits when the component has been destroyed. */\n\n      this._onDestroy = new Subject();\n      /**\n       * Map of all the user's defined columns (header, data, and footer cell template) identified by\n       * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n       * any custom column definitions added to `_customColumnDefs`.\n       */\n\n      this._columnDefsByName = new Map();\n      /**\n       * Column definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * column definitions as *its* content child.\n       */\n\n      this._customColumnDefs = new Set();\n      /**\n       * Data row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * built-in data rows as *its* content child.\n       */\n\n      this._customRowDefs = new Set();\n      /**\n       * Header row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * built-in header rows as *its* content child.\n       */\n\n      this._customHeaderRowDefs = new Set();\n      /**\n       * Footer row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n       * built-in footer row as *its* content child.\n       */\n\n      this._customFooterRowDefs = new Set();\n      /**\n       * Whether the header row definition has been changed. Triggers an update to the header row after\n       * content is checked. Initialized as true so that the table renders the initial set of rows.\n       */\n\n      this._headerRowDefChanged = true;\n      /**\n       * Whether the footer row definition has been changed. Triggers an update to the footer row after\n       * content is checked. Initialized as true so that the table renders the initial set of rows.\n       */\n\n      this._footerRowDefChanged = true;\n      /**\n       * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n       * change.\n       */\n\n      this._stickyColumnStylesNeedReset = true;\n      /**\n       * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n       * `false`, cached values will be used instead. This is only applicable to tables with\n       * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n       */\n\n      this._forceRecalculateCellWidths = true;\n      /**\n       * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n       * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n       * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n       * and row template matches, which allows the `IterableDiffer` to check rows by reference\n       * and understand which rows are added/moved/removed.\n       *\n       * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n       * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n       * contains an array of created pairs. The array is necessary to handle cases where the data\n       * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n       * stored.\n       */\n\n      this._cachedRenderRowsMap = new Map();\n      /**\n       * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n       * table subclasses.\n       */\n\n      this.stickyCssClass = 'cdk-table-sticky';\n      /**\n       * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n       * the position is set in a selector associated with the value of stickyCssClass. May be\n       * overridden by table subclasses\n       */\n\n      this.needsPositionStickyOnElement = true;\n      /** Whether the no data row is currently showing anything. */\n\n      this._isShowingNoDataRow = false;\n      this._multiTemplateDataRows = false;\n      this._fixedLayout = false; // TODO(andrewseguin): Remove max value as the end index\n      //   and instead calculate the view on init and scroll.\n\n      /**\n       * Stream containing the latest information on what rows are being displayed on screen.\n       * Can be used by the data source to as a heuristic of what data should be provided.\n       *\n       * @docs-private\n       */\n\n      this.viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE\n      });\n\n      if (!role) {\n        this._elementRef.nativeElement.setAttribute('role', 'table');\n      }\n\n      this._document = _document;\n      this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n\n\n    _createClass(CdkTable, [{\n      key: \"trackBy\",\n      get: function get() {\n        return this._trackByFn;\n      },\n      set: function set(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n          console.warn(\"trackBy must be a function, but received \".concat(JSON.stringify(fn), \".\"));\n        }\n\n        this._trackByFn = fn;\n      }\n      /**\n       * The table's source of data, which can be provided in three ways (in order of complexity):\n       *   - Simple data array (each object represents one table row)\n       *   - Stream that emits a data array each time the array changes\n       *   - `DataSource` object that implements the connect/disconnect interface.\n       *\n       * If a data array is provided, the table must be notified when the array's objects are\n       * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n       * render the diff since the last table render. If the data array reference is changed, the table\n       * will automatically trigger an update to the rows.\n       *\n       * When providing an Observable stream, the table will trigger an update automatically when the\n       * stream emits a new array of data.\n       *\n       * Finally, when providing a `DataSource` object, the table will use the Observable stream\n       * provided by the connect function and trigger updates when that stream emits new data array\n       * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n       * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n       * subscriptions registered during the connect process).\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._dataSource;\n      },\n      set: function set(dataSource) {\n        if (this._dataSource !== dataSource) {\n          this._switchDataSource(dataSource);\n        }\n      }\n      /**\n       * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n       * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n       * dataobject will render the first row that evaluates its when predicate to true, in the order\n       * defined in the table, or otherwise the default row which does not have a when predicate.\n       */\n\n    }, {\n      key: \"multiTemplateDataRows\",\n      get: function get() {\n        return this._multiTemplateDataRows;\n      },\n      set: function set(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v); // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n          this._forceRenderDataRows();\n\n          this.updateStickyColumnStyles();\n        }\n      }\n      /**\n       * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n       * and optimize rendering sticky styles for native tables. No-op for flex tables.\n       */\n\n    }, {\n      key: \"fixedLayout\",\n      get: function get() {\n        return this._fixedLayout;\n      },\n      set: function set(v) {\n        this._fixedLayout = coerceBooleanProperty(v); // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this13 = this;\n\n        this._setupStickyStyler();\n\n        if (this._isNativeHtmlTable) {\n          this._applyNativeTableSections();\n        } // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n\n\n        this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {\n          return _this13.trackBy ? _this13.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n\n        this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(function () {\n          _this13._forceRecalculateCellWidths = true;\n        });\n      }\n    }, {\n      key: \"ngAfterContentChecked\",\n      value: function ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n\n        this._cacheColumnDefs(); // Make sure that the user has at least added header, footer, or data row def.\n\n\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableMissingRowDefsError();\n        } // Render updates if the list of columns have been changed for the header, row, or footer defs.\n\n\n        var columnsChanged = this._renderUpdatedColumns();\n\n        var rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged; // Ensure sticky column styles are reset if set to `true` elsewhere.\n\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged; // If the header row definition has been changed, trigger a render to the header row.\n\n        if (this._headerRowDefChanged) {\n          this._forceRenderHeaderRows();\n\n          this._headerRowDefChanged = false;\n        } // If the footer row definition has been changed, trigger a render to the footer row.\n\n\n        if (this._footerRowDefChanged) {\n          this._forceRenderFooterRows();\n\n          this._footerRowDefChanged = false;\n        } // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n\n\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n          this._observeRenderChanges();\n        } else if (this._stickyColumnStylesNeedReset) {\n          // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n          // called when it row data arrives. Otherwise, we need to call it proactively.\n          this.updateStickyColumnStyles();\n        }\n\n        this._checkStickyStates();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n\n        this._noDataRowOutlet.viewContainer.clear();\n\n        this._headerRowOutlet.viewContainer.clear();\n\n        this._footerRowOutlet.viewContainer.clear();\n\n        this._cachedRenderRowsMap.clear();\n\n        this._onDestroy.next();\n\n        this._onDestroy.complete();\n\n        if (isDataSource(this.dataSource)) {\n          this.dataSource.disconnect(this);\n        }\n      }\n      /**\n       * Renders rows based on the table's latest set of data, which was either provided directly as an\n       * input or retrieved through an Observable stream (directly or from a DataSource).\n       * Checks for differences in the data since the last diff to perform only the necessary\n       * changes (add/remove/move rows).\n       *\n       * If the table's data source is a DataSource or Observable, this will be invoked automatically\n       * each time the provided Observable stream emits a new data array. Otherwise if your data is\n       * an array, this function will need to be called to render any changes.\n       */\n\n    }, {\n      key: \"renderRows\",\n      value: function renderRows() {\n        var _this14 = this;\n\n        this._renderRows = this._getAllRenderRows();\n\n        var changes = this._dataDiffer.diff(this._renderRows);\n\n        if (!changes) {\n          this._updateNoDataRow();\n\n          return;\n        }\n\n        var viewContainer = this._rowOutlet.viewContainer;\n\n        this._viewRepeater.applyChanges(changes, viewContainer, function (record, _adjustedPreviousIndex, currentIndex) {\n          return _this14._getEmbeddedViewArgs(record.item, currentIndex);\n        }, function (record) {\n          return record.item.data;\n        }, function (change) {\n          if (change.operation === 1\n          /* INSERTED */\n          && change.context) {\n            _this14._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n          }\n        }); // Update the meta context of a row's context data (index, count, first, last, ...)\n\n\n        this._updateRowIndexContext(); // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n\n\n        changes.forEachIdentityChange(function (record) {\n          var rowView = viewContainer.get(record.currentIndex);\n          rowView.context.$implicit = record.item.data;\n        });\n\n        this._updateNoDataRow();\n\n        this.updateStickyColumnStyles();\n      }\n      /** Adds a column definition that was not included as part of the content children. */\n\n    }, {\n      key: \"addColumnDef\",\n      value: function addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n      }\n      /** Removes a column definition that was not included as part of the content children. */\n\n    }, {\n      key: \"removeColumnDef\",\n      value: function removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n      }\n      /** Adds a row definition that was not included as part of the content children. */\n\n    }, {\n      key: \"addRowDef\",\n      value: function addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n      }\n      /** Removes a row definition that was not included as part of the content children. */\n\n    }, {\n      key: \"removeRowDef\",\n      value: function removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n      }\n      /** Adds a header row definition that was not included as part of the content children. */\n\n    }, {\n      key: \"addHeaderRowDef\",\n      value: function addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n\n        this._headerRowDefChanged = true;\n      }\n      /** Removes a header row definition that was not included as part of the content children. */\n\n    }, {\n      key: \"removeHeaderRowDef\",\n      value: function removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n\n        this._headerRowDefChanged = true;\n      }\n      /** Adds a footer row definition that was not included as part of the content children. */\n\n    }, {\n      key: \"addFooterRowDef\",\n      value: function addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n\n        this._footerRowDefChanged = true;\n      }\n      /** Removes a footer row definition that was not included as part of the content children. */\n\n    }, {\n      key: \"removeFooterRowDef\",\n      value: function removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n\n        this._footerRowDefChanged = true;\n      }\n      /** Sets a no data row definition that was not included as a part of the content children. */\n\n    }, {\n      key: \"setNoDataRow\",\n      value: function setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n      }\n      /**\n       * Updates the header sticky styles. First resets all applied styles with respect to the cells\n       * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n       * automatically called when the header row changes its displayed set of columns, or if its\n       * sticky input changes. May be called manually for cases where the cell content changes outside\n       * of these events.\n       */\n\n    }, {\n      key: \"updateStickyHeaderRowStyles\",\n      value: function updateStickyHeaderRowStyles() {\n        var headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n        var tableElement = this._elementRef.nativeElement; // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n\n        var thead = tableElement.querySelector('thead');\n\n        if (thead) {\n          thead.style.display = headerRows.length ? '' : 'none';\n        }\n\n        var stickyStates = this._headerRowDefs.map(function (def) {\n          return def.sticky;\n        });\n\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top'); // Reset the dirty state of the sticky input change since it has been used.\n\n\n        this._headerRowDefs.forEach(function (def) {\n          return def.resetStickyChanged();\n        });\n      }\n      /**\n       * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n       * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n       * automatically called when the footer row changes its displayed set of columns, or if its\n       * sticky input changes. May be called manually for cases where the cell content changes outside\n       * of these events.\n       */\n\n    }, {\n      key: \"updateStickyFooterRowStyles\",\n      value: function updateStickyFooterRowStyles() {\n        var footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n        var tableElement = this._elementRef.nativeElement; // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n\n        var tfoot = tableElement.querySelector('tfoot');\n\n        if (tfoot) {\n          tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n\n        var stickyStates = this._footerRowDefs.map(function (def) {\n          return def.sticky;\n        });\n\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates); // Reset the dirty state of the sticky input change since it has been used.\n\n\n        this._footerRowDefs.forEach(function (def) {\n          return def.resetStickyChanged();\n        });\n      }\n      /**\n       * Updates the column sticky styles. First resets all applied styles with respect to the cells\n       * sticking to the left and right. Then sticky styles are added for the left and right according\n       * to the column definitions for each cell in each row. This is automatically called when\n       * the data source provides a new set of data or when a column definition changes its sticky\n       * input. May be called manually for cases where the cell content changes outside of these events.\n       */\n\n    }, {\n      key: \"updateStickyColumnStyles\",\n      value: function updateStickyColumnStyles() {\n        var _this15 = this;\n\n        var headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n        var dataRows = this._getRenderedRows(this._rowOutlet);\n\n        var footerRows = this._getRenderedRows(this._footerRowOutlet); // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n\n\n        if (this._isNativeHtmlTable && !this._fixedLayout || this._stickyColumnStylesNeedReset) {\n          // Clear the left and right positioning from all columns in the table across all rows since\n          // sticky columns span across all table sections (header, data, footer)\n          this._stickyStyler.clearStickyPositioning([].concat(_toConsumableArray(headerRows), _toConsumableArray(dataRows), _toConsumableArray(footerRows)), ['left', 'right']);\n\n          this._stickyColumnStylesNeedReset = false;\n        } // Update the sticky styles for each header row depending on the def's sticky state\n\n\n        headerRows.forEach(function (headerRow, i) {\n          _this15._addStickyColumnStyles([headerRow], _this15._headerRowDefs[i]);\n        }); // Update the sticky styles for each data row depending on its def's sticky state\n\n        this._rowDefs.forEach(function (rowDef) {\n          // Collect all the rows rendered with this row definition.\n          var rows = [];\n\n          for (var i = 0; i < dataRows.length; i++) {\n            if (_this15._renderRows[i].rowDef === rowDef) {\n              rows.push(dataRows[i]);\n            }\n          }\n\n          _this15._addStickyColumnStyles(rows, rowDef);\n        }); // Update the sticky styles for each footer row depending on the def's sticky state\n\n\n        footerRows.forEach(function (footerRow, i) {\n          _this15._addStickyColumnStyles([footerRow], _this15._footerRowDefs[i]);\n        }); // Reset the dirty state of the sticky input change since it has been used.\n\n        Array.from(this._columnDefsByName.values()).forEach(function (def) {\n          return def.resetStickyChanged();\n        });\n      }\n      /**\n       * Get the list of RenderRow objects to render according to the current list of data and defined\n       * row definitions. If the previous list already contained a particular pair, it should be reused\n       * so that the differ equates their references.\n       */\n\n    }, {\n      key: \"_getAllRenderRows\",\n      value: function _getAllRenderRows() {\n        var renderRows = []; // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n\n        var prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map(); // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n\n        for (var i = 0; i < this._data.length; i++) {\n          var data = this._data[i];\n\n          var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n          if (!this._cachedRenderRowsMap.has(data)) {\n            this._cachedRenderRowsMap.set(data, new WeakMap());\n          }\n\n          for (var j = 0; j < renderRowsForData.length; j++) {\n            var renderRow = renderRowsForData[j];\n\n            var cache = this._cachedRenderRowsMap.get(renderRow.data);\n\n            if (cache.has(renderRow.rowDef)) {\n              cache.get(renderRow.rowDef).push(renderRow);\n            } else {\n              cache.set(renderRow.rowDef, [renderRow]);\n            }\n\n            renderRows.push(renderRow);\n          }\n        }\n\n        return renderRows;\n      }\n      /**\n       * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n       * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n       * `(T, CdkRowDef)` pair.\n       */\n\n    }, {\n      key: \"_getRenderRowsForData\",\n      value: function _getRenderRowsForData(data, dataIndex, cache) {\n        var rowDefs = this._getRowDefs(data, dataIndex);\n\n        return rowDefs.map(function (rowDef) {\n          var cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n\n          if (cachedRenderRows.length) {\n            var dataRow = cachedRenderRows.shift();\n            dataRow.dataIndex = dataIndex;\n            return dataRow;\n          } else {\n            return {\n              data: data,\n              rowDef: rowDef,\n              dataIndex: dataIndex\n            };\n          }\n        });\n      }\n      /** Update the map containing the content's column definitions. */\n\n    }, {\n      key: \"_cacheColumnDefs\",\n      value: function _cacheColumnDefs() {\n        var _this16 = this;\n\n        this._columnDefsByName.clear();\n\n        var columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(function (columnDef) {\n          if (_this16._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableDuplicateColumnNameError(columnDef.name);\n          }\n\n          _this16._columnDefsByName.set(columnDef.name, columnDef);\n        });\n      }\n      /** Update the list of all available row definitions that can be used. */\n\n    }, {\n      key: \"_cacheRowDefs\",\n      value: function _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs); // After all row definitions are determined, find the row definition to be considered default.\n\n        var defaultRowDefs = this._rowDefs.filter(function (def) {\n          return !def.when;\n        });\n\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableMultipleDefaultRowDefsError();\n        }\n\n        this._defaultRowDef = defaultRowDefs[0];\n      }\n      /**\n       * Check if the header, data, or footer rows have changed what columns they want to display or\n       * whether the sticky states have changed for the header or footer. If there is a diff, then\n       * re-render that section.\n       */\n\n    }, {\n      key: \"_renderUpdatedColumns\",\n      value: function _renderUpdatedColumns() {\n        var columnsDiffReducer = function columnsDiffReducer(acc, def) {\n          return acc || !!def.getColumnsDiff();\n        }; // Force re-render data rows if the list of column definitions have changed.\n\n\n        var dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n\n        if (dataColumnsChanged) {\n          this._forceRenderDataRows();\n        } // Force re-render header/footer rows if the list of column definitions have changed.\n\n\n        var headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n\n        if (headerColumnsChanged) {\n          this._forceRenderHeaderRows();\n        }\n\n        var footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n\n        if (footerColumnsChanged) {\n          this._forceRenderFooterRows();\n        }\n\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n      }\n      /**\n       * Switch to the provided data source by resetting the data and unsubscribing from the current\n       * render change subscription if one exists. If the data source is null, interpret this by\n       * clearing the row outlet. Otherwise start listening for new data.\n       */\n\n    }, {\n      key: \"_switchDataSource\",\n      value: function _switchDataSource(dataSource) {\n        this._data = [];\n\n        if (isDataSource(this.dataSource)) {\n          this.dataSource.disconnect(this);\n        } // Stop listening for data from the previous data source.\n\n\n        if (this._renderChangeSubscription) {\n          this._renderChangeSubscription.unsubscribe();\n\n          this._renderChangeSubscription = null;\n        }\n\n        if (!dataSource) {\n          if (this._dataDiffer) {\n            this._dataDiffer.diff([]);\n          }\n\n          this._rowOutlet.viewContainer.clear();\n        }\n\n        this._dataSource = dataSource;\n      }\n      /** Set up a subscription for the data provided by the data source. */\n\n    }, {\n      key: \"_observeRenderChanges\",\n      value: function _observeRenderChanges() {\n        var _this17 = this;\n\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n          return;\n        }\n\n        var dataStream;\n\n        if (isDataSource(this.dataSource)) {\n          dataStream = this.dataSource.connect(this);\n        } else if (isObservable(this.dataSource)) {\n          dataStream = this.dataSource;\n        } else if (Array.isArray(this.dataSource)) {\n          dataStream = of(this.dataSource);\n        }\n\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableUnknownDataSourceError();\n        }\n\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(function (data) {\n          _this17._data = data || [];\n\n          _this17.renderRows();\n        });\n      }\n      /**\n       * Clears any existing content in the header row outlet and creates a new embedded view\n       * in the outlet using the header row definition.\n       */\n\n    }, {\n      key: \"_forceRenderHeaderRows\",\n      value: function _forceRenderHeaderRows() {\n        var _this18 = this;\n\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n          this._headerRowOutlet.viewContainer.clear();\n        }\n\n        this._headerRowDefs.forEach(function (def, i) {\n          return _this18._renderRow(_this18._headerRowOutlet, def, i);\n        });\n\n        this.updateStickyHeaderRowStyles();\n      }\n      /**\n       * Clears any existing content in the footer row outlet and creates a new embedded view\n       * in the outlet using the footer row definition.\n       */\n\n    }, {\n      key: \"_forceRenderFooterRows\",\n      value: function _forceRenderFooterRows() {\n        var _this19 = this;\n\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n          this._footerRowOutlet.viewContainer.clear();\n        }\n\n        this._footerRowDefs.forEach(function (def, i) {\n          return _this19._renderRow(_this19._footerRowOutlet, def, i);\n        });\n\n        this.updateStickyFooterRowStyles();\n      }\n      /** Adds the sticky column styles for the rows according to the columns' stick states. */\n\n    }, {\n      key: \"_addStickyColumnStyles\",\n      value: function _addStickyColumnStyles(rows, rowDef) {\n        var _this20 = this;\n\n        var columnDefs = Array.from(rowDef.columns || []).map(function (columnName) {\n          var columnDef = _this20._columnDefsByName.get(columnName);\n\n          if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownColumnError(columnName);\n          }\n\n          return columnDef;\n        });\n        var stickyStartStates = columnDefs.map(function (columnDef) {\n          return columnDef.sticky;\n        });\n        var stickyEndStates = columnDefs.map(function (columnDef) {\n          return columnDef.stickyEnd;\n        });\n\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n      }\n      /** Gets the list of rows that have been rendered in the row outlet. */\n\n    }, {\n      key: \"_getRenderedRows\",\n      value: function _getRenderedRows(rowOutlet) {\n        var renderedRows = [];\n\n        for (var i = 0; i < rowOutlet.viewContainer.length; i++) {\n          var viewRef = rowOutlet.viewContainer.get(i);\n          renderedRows.push(viewRef.rootNodes[0]);\n        }\n\n        return renderedRows;\n      }\n      /**\n       * Get the matching row definitions that should be used for this row data. If there is only\n       * one row definition, it is returned. Otherwise, find the row definitions that has a when\n       * predicate that returns true with the data. If none return true, return the default row\n       * definition.\n       */\n\n    }, {\n      key: \"_getRowDefs\",\n      value: function _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n          return [this._rowDefs[0]];\n        }\n\n        var rowDefs = [];\n\n        if (this.multiTemplateDataRows) {\n          rowDefs = this._rowDefs.filter(function (def) {\n            return !def.when || def.when(dataIndex, data);\n          });\n        } else {\n          var rowDef = this._rowDefs.find(function (def) {\n            return def.when && def.when(dataIndex, data);\n          }) || this._defaultRowDef;\n\n          if (rowDef) {\n            rowDefs.push(rowDef);\n          }\n        }\n\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableMissingMatchingRowDefError(data);\n        }\n\n        return rowDefs;\n      }\n    }, {\n      key: \"_getEmbeddedViewArgs\",\n      value: function _getEmbeddedViewArgs(renderRow, index) {\n        var rowDef = renderRow.rowDef;\n        var context = {\n          $implicit: renderRow.data\n        };\n        return {\n          templateRef: rowDef.template,\n          context: context,\n          index: index\n        };\n      }\n      /**\n       * Creates a new row template in the outlet and fills it with the set of cell templates.\n       * Optionally takes a context to provide to the row and cells, as well as an optional index\n       * of where to place the new row template in the outlet.\n       */\n\n    }, {\n      key: \"_renderRow\",\n      value: function _renderRow(outlet, rowDef, index) {\n        var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        var view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n        this._renderCellTemplateForItem(rowDef, context);\n\n        return view;\n      }\n    }, {\n      key: \"_renderCellTemplateForItem\",\n      value: function _renderCellTemplateForItem(rowDef, context) {\n        var _iterator10 = _createForOfIteratorHelper(this._getCellTemplates(rowDef)),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var cellTemplate = _step10.value;\n\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n              CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * Updates the index-related context for each row to reflect any changes in the index of the rows,\n       * e.g. first/last/even/odd.\n       */\n\n    }, {\n      key: \"_updateRowIndexContext\",\n      value: function _updateRowIndexContext() {\n        var viewContainer = this._rowOutlet.viewContainer;\n\n        for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n          var viewRef = viewContainer.get(renderIndex);\n          var context = viewRef.context;\n          context.count = count;\n          context.first = renderIndex === 0;\n          context.last = renderIndex === count - 1;\n          context.even = renderIndex % 2 === 0;\n          context.odd = !context.even;\n\n          if (this.multiTemplateDataRows) {\n            context.dataIndex = this._renderRows[renderIndex].dataIndex;\n            context.renderIndex = renderIndex;\n          } else {\n            context.index = this._renderRows[renderIndex].dataIndex;\n          }\n        }\n      }\n      /** Gets the column definitions for the provided row def. */\n\n    }, {\n      key: \"_getCellTemplates\",\n      value: function _getCellTemplates(rowDef) {\n        var _this21 = this;\n\n        if (!rowDef || !rowDef.columns) {\n          return [];\n        }\n\n        return Array.from(rowDef.columns, function (columnId) {\n          var column = _this21._columnDefsByName.get(columnId);\n\n          if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownColumnError(columnId);\n          }\n\n          return rowDef.extractCellTemplate(column);\n        });\n      }\n      /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n\n    }, {\n      key: \"_applyNativeTableSections\",\n      value: function _applyNativeTableSections() {\n        var documentFragment = this._document.createDocumentFragment();\n\n        var sections = [{\n          tag: 'thead',\n          outlets: [this._headerRowOutlet]\n        }, {\n          tag: 'tbody',\n          outlets: [this._rowOutlet, this._noDataRowOutlet]\n        }, {\n          tag: 'tfoot',\n          outlets: [this._footerRowOutlet]\n        }];\n\n        for (var _i2 = 0, _sections = sections; _i2 < _sections.length; _i2++) {\n          var section = _sections[_i2];\n\n          var element = this._document.createElement(section.tag);\n\n          element.setAttribute('role', 'rowgroup');\n\n          var _iterator11 = _createForOfIteratorHelper(section.outlets),\n              _step11;\n\n          try {\n            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n              var outlet = _step11.value;\n              element.appendChild(outlet.elementRef.nativeElement);\n            }\n          } catch (err) {\n            _iterator11.e(err);\n          } finally {\n            _iterator11.f();\n          }\n\n          documentFragment.appendChild(element);\n        } // Use a DocumentFragment so we don't hit the DOM on each iteration.\n\n\n        this._elementRef.nativeElement.appendChild(documentFragment);\n      }\n      /**\n       * Forces a re-render of the data rows. Should be called in cases where there has been an input\n       * change that affects the evaluation of which rows should be rendered, e.g. toggling\n       * `multiTemplateDataRows` or adding/removing row definitions.\n       */\n\n    }, {\n      key: \"_forceRenderDataRows\",\n      value: function _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n\n        this._rowOutlet.viewContainer.clear();\n\n        this.renderRows();\n      }\n      /**\n       * Checks if there has been a change in sticky states since last check and applies the correct\n       * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n       * during a change detection and after the inputs are settled (after content check).\n       */\n\n    }, {\n      key: \"_checkStickyStates\",\n      value: function _checkStickyStates() {\n        var stickyCheckReducer = function stickyCheckReducer(acc, d) {\n          return acc || d.hasStickyChanged();\n        }; // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n\n\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n          this.updateStickyHeaderRowStyles();\n        }\n\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n          this.updateStickyFooterRowStyles();\n        }\n\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n          this._stickyColumnStylesNeedReset = true;\n          this.updateStickyColumnStyles();\n        }\n      }\n      /**\n       * Creates the sticky styler that will be used for sticky rows and columns. Listens\n       * for directionality changes and provides the latest direction to the styler. Re-applies column\n       * stickiness when directionality changes.\n       */\n\n    }, {\n      key: \"_setupStickyStyler\",\n      value: function _setupStickyStyler() {\n        var _this22 = this;\n\n        var direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(function (value) {\n          _this22._stickyStyler.direction = value;\n\n          _this22.updateStickyColumnStyles();\n        });\n      }\n      /** Filters definitions that belong to this table from a QueryList. */\n\n    }, {\n      key: \"_getOwnDefs\",\n      value: function _getOwnDefs(items) {\n        var _this23 = this;\n\n        return items.filter(function (item) {\n          return !item._table || item._table === _this23;\n        });\n      }\n      /** Creates or removes the no data row, depending on whether any data is being shown. */\n\n    }, {\n      key: \"_updateNoDataRow\",\n      value: function _updateNoDataRow() {\n        var noDataRow = this._customNoDataRow || this._noDataRow;\n\n        if (noDataRow) {\n          var shouldShow = this._rowOutlet.viewContainer.length === 0;\n\n          if (shouldShow !== this._isShowingNoDataRow) {\n            var container = this._noDataRowOutlet.viewContainer;\n            shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\n            this._isShowingNoDataRow = shouldShow;\n          }\n        }\n      }\n    }]);\n\n    return CdkTable;\n  }();\n\n  CdkTable.ɵfac = function CdkTable_Factory(t) {\n    return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵngcc0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12));\n  };\n\n  CdkTable.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CdkTable,\n    selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n    contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n      }\n    },\n    viewQuery: function CdkTable_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DataRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(NoDataRowOutlet, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n      }\n    },\n    hostAttrs: [1, \"cdk-table\"],\n    hostVars: 2,\n    hostBindings: function CdkTable_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n      }\n    },\n    inputs: {\n      trackBy: \"trackBy\",\n      dataSource: \"dataSource\",\n      multiTemplateDataRows: \"multiTemplateDataRows\",\n      fixedLayout: \"fixedLayout\"\n    },\n    exportAs: [\"cdkTable\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_TABLE,\n      useExisting: CdkTable\n    }, {\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _DisposeViewRepeaterStrategy\n    }, {\n      provide: _COALESCED_STYLE_SCHEDULER,\n      useClass: _CoalescedStyleScheduler\n    }, // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {\n      provide: STICKY_POSITIONING_LISTENER,\n      useValue: null\n    }])],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 0,\n    consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n    template: function CdkTable_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 0)(3, 1)(4, 2)(5, 3);\n      }\n    },\n    directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n    styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"],\n    encapsulation: 2\n  });\n  return CdkTable;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\n\n\nfunction mergeArrayAndSet(array, set) {\n  return array.concat(Array.from(set));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n\n\nvar CdkTextColumn = /*#__PURE__*/(function () {\n  var CdkTextColumn = /*#__PURE__*/function () {\n    function CdkTextColumn( // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n      _classCallCheck(this, CdkTextColumn);\n\n      this._table = _table;\n      this._options = _options;\n      /** Alignment of the cell values. */\n\n      this.justify = 'start';\n      this._options = _options || {};\n    }\n    /** Column name that should be used to reference this column. */\n\n\n    _createClass(CdkTextColumn, [{\n      key: \"name\",\n      get: function get() {\n        return this._name;\n      },\n      set: function set(name) {\n        this._name = name; // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n\n        this._syncColumnDefName();\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._syncColumnDefName();\n\n        if (this.headerText === undefined) {\n          this.headerText = this._createDefaultHeaderText();\n        }\n\n        if (!this.dataAccessor) {\n          this.dataAccessor = this._options.defaultDataAccessor || function (data, name) {\n            return data[name];\n          };\n        }\n\n        if (this._table) {\n          // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n          // since the columnDef will not pick up its content by the time the table finishes checking\n          // its content and initializing the rows.\n          this.columnDef.cell = this.cell;\n          this.columnDef.headerCell = this.headerCell;\n\n          this._table.addColumnDef(this.columnDef);\n        } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          throw getTableTextColumnMissingParentTableError();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._table) {\n          this._table.removeColumnDef(this.columnDef);\n        }\n      }\n      /**\n       * Creates a default header text. Use the options' header text transformation function if one\n       * has been provided. Otherwise simply capitalize the column name.\n       */\n\n    }, {\n      key: \"_createDefaultHeaderText\",\n      value: function _createDefaultHeaderText() {\n        var name = this.name;\n\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableTextColumnMissingNameError();\n        }\n\n        if (this._options && this._options.defaultHeaderTextTransform) {\n          return this._options.defaultHeaderTextTransform(name);\n        }\n\n        return name[0].toUpperCase() + name.slice(1);\n      }\n      /** Synchronizes the column definition name with the text column name. */\n\n    }, {\n      key: \"_syncColumnDefName\",\n      value: function _syncColumnDefName() {\n        if (this.columnDef) {\n          this.columnDef.name = this.name;\n        }\n      }\n    }]);\n\n    return CdkTextColumn;\n  }();\n\n  CdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) {\n    return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8));\n  };\n\n  CdkTextColumn.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CdkTextColumn,\n    selectors: [[\"cdk-text-column\"]],\n    viewQuery: function CdkTextColumn_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkColumnDef, 7);\n        ɵngcc0.ɵɵviewQuery(CdkCellDef, 7);\n        ɵngcc0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n      }\n    },\n    inputs: {\n      justify: \"justify\",\n      name: \"name\",\n      headerText: \"headerText\",\n      dataAccessor: \"dataAccessor\"\n    },\n    decls: 3,\n    vars: 0,\n    consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]],\n    template: function CdkTextColumn_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n      }\n    },\n    directives: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n    encapsulation: 2\n  });\n  return CdkTextColumn;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\nvar CdkTableModule = /*#__PURE__*/(function () {\n  var CdkTableModule = /*#__PURE__*/_createClass(function CdkTableModule() {\n    _classCallCheck(this, CdkTableModule);\n  });\n\n  CdkTableModule.ɵfac = function CdkTableModule_Factory(t) {\n    return new (t || CdkTableModule)();\n  };\n\n  CdkTableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CdkTableModule\n  });\n  CdkTableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[ScrollingModule]]\n  });\n  return CdkTableModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, {\n    declarations: function declarations() {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\n    },\n    imports: function imports() {\n      return [ScrollingModule];\n    },\n    exports: function exports() {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };","map":{"version":3,"names":["Directionality","coerceBooleanProperty","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","isDataSource","_DisposeViewRepeaterStrategy","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","CdkTextColumn_th_1_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵstyleProp","justify","ɵɵadvance","ɵɵtextInterpolate1","headerText","CdkTextColumn_td_2_Template","data_r2","$implicit","ctx_r1","dataAccessor","name","DataSource","Platform","ViewportRuler","ScrollingModule","DOCUMENT","InjectionToken","Directive","TemplateRef","Inject","Optional","Input","ContentChild","ElementRef","Injectable","NgZone","IterableDiffers","ViewContainerRef","Component","ChangeDetectionStrategy","ViewEncapsulation","EmbeddedViewRef","ChangeDetectorRef","Attribute","SkipSelf","ViewChild","ContentChildren","NgModule","Subject","from","BehaviorSubject","isObservable","of","takeUntil","take","mixinHasStickyInput","base","args","_sticky","_hasStickyChanged","v","prevValue","hasStickyChanged","CDK_TABLE","TEXT_COLUMN_OPTIONS","CdkCellDef","template","ɵfac","CdkCellDef_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","CdkHeaderCellDef","CdkHeaderCellDef_Factory","CdkFooterCellDef","CdkFooterCellDef_Factory","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","_table","_stickyEnd","_name","_setNameInput","_columnCssClassName","cssClassFriendlyName","value","replace","_updateColumnCssClassName","CdkColumnDef_Factory","contentQueries","CdkColumnDef_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","cell","first","headerCell","footerCell","inputs","sticky","stickyEnd","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","BaseCdkCell","columnDef","elementRef","classList","nativeElement","className","add","CdkHeaderCell","CdkHeaderCell_Factory","hostAttrs","CdkFooterCell","_a","_elementRef","nodeType","tableRole","getAttribute","role","setAttribute","CdkFooterCell_Factory","CdkCell","CdkCell_Factory","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_ngZone","_currentSchedule","_destroyed","task","_createScheduleIfNeeded","push","next","complete","_getScheduleObservable","pipe","subscribe","length","schedule","isStable","Promise","resolve","undefined","onStable","_CoalescedStyleScheduler_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","CDK_ROW_TEMPLATE","BaseRowDef","_differs","changes","_columnsDiffer","columns","currentValue","find","create","diff","column","CdkHeaderRowDef","CdkFooterRowDef","BaseRowDef_Factory","ɵɵNgOnChangesFeature","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","CdkHeaderRowDef_Factory","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkFooterRowDef_Factory","CdkRowDef","CdkRowDef_Factory","when","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","CdkCellOutlet_Factory","CdkHeaderRow","CdkHeaderRow_Factory","ɵcmp","ɵɵdefineComponent","decls","vars","consts","CdkHeaderRow_Template","ɵɵelementContainer","directives","encapsulation","CdkFooterRow","CdkFooterRow_Factory","CdkFooterRow_Template","CdkRow","CdkRow_Factory","CdkRow_Template","CdkNoDataRow","templateRef","CdkNoDataRow_Factory","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","rows","stickyDirections","elementsToClear","row","ELEMENT_NODE","i","children","element","_removeStickyStyle","stickyStartStates","stickyEndStates","recalculateCellWidths","some","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","isRtl","start","end","_addStickyStyle","slice","map","width","index","reverse","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","height","getBoundingClientRect","borderedRowIndex","_b","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","tableElement","tfoot","querySelector","dir","style","remove","hasDirection","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","top","bottom","left","right","firstRowCells","widths","positions","nextPosition","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","STICKY_POSITIONING_LISTENER","CdkRecycleRows","CdkRecycleRows_Factory","useClass","DataRowOutlet","viewContainer","DataRowOutlet_Factory","HeaderRowOutlet","HeaderRowOutlet_Factory","FooterRowOutlet","FooterRowOutlet_Factory","NoDataRowOutlet","NoDataRowOutlet_Factory","CDK_TABLE_TEMPLATE","RowViewRef","CdkTable","_changeDetectorRef","_dir","_document","_platform","_viewRepeater","_viewportRuler","_stickyPositioningListener","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_multiTemplateDataRows","_fixedLayout","viewChange","Number","MAX_VALUE","nodeName","_trackByFn","fn","console","warn","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","trackBy","dataIndex","change","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","columnsChanged","_renderUpdatedColumns","rowDefsChanged","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_noDataRowOutlet","_headerRowOutlet","_footerRowOutlet","disconnect","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","context","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","rowView","get","delete","headerRowDef","footerRowDef","noDataRow","_customNoDataRow","headerRows","_getRenderedRows","thead","display","def","_stickyStyler","clearStickyPositioning","stickRows","forEach","resetStickyChanged","footerRows","updateStickyFooterContainer","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","renderRows","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","multiTemplateDataRows","_defaultRowDef","columnsDiffReducer","acc","getColumnsDiff","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isArray","_renderRow","updateStickyHeaderRowStyles","updateStickyFooterRowStyles","columnName","updateStickyColumns","rowOutlet","renderedRows","viewRef","rootNodes","outlet","view","createEmbeddedView","_getCellTemplates","cellTemplate","markForCheck","renderIndex","count","last","even","odd","columnId","extractCellTemplate","documentFragment","createDocumentFragment","sections","tag","outlets","section","createElement","appendChild","stickyCheckReducer","d","isBrowser","items","_noDataRow","shouldShow","container","CdkTable_Factory","ɵɵinjectAttribute","CdkTable_ContentQueries","viewQuery","CdkTable_Query","ɵɵviewQuery","hostVars","hostBindings","CdkTable_HostBindings","ɵɵclassProp","fixedLayout","exportAs","useValue","ngContentSelectors","CdkTable_Template","ɵɵprojectionDef","ɵɵprojection","styles","array","concat","CdkTextColumn","_options","_syncColumnDefName","_createDefaultHeaderText","defaultDataAccessor","addColumnDef","removeColumnDef","defaultHeaderTextTransform","toUpperCase","CdkTextColumn_Factory","CdkTextColumn_Query","CdkTextColumn_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","EXPORTED_DECLARATIONS","CdkTableModule","CdkTableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/table.js"],"sourcesContent":["import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/scrolling';\n\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction CdkTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n} }\nfunction CdkTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n} }\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, ChangeDetectorRef, Attribute, SkipSelf, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n        /** Whether sticky positioning should be applied. */\n        get sticky() { return this._sticky; }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkHeaderCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkFooterCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /** Unique name for this column. */\n    get name() { return this._name; }\n    set name(name) { this._setNameInput(name); }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(v) {\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n}\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) { return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkColumnDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkColumnDef.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['cdkColumnDef']\n        }], stickyEnd: [{\n            type: Input,\n            args: ['stickyEnd']\n        }], cell: [{\n            type: ContentChild,\n            args: [CdkCellDef]\n        }], headerCell: [{\n            type: ContentChild,\n            args: [CdkHeaderCellDef]\n        }], footerCell: [{\n            type: ContentChild,\n            args: [CdkFooterCellDef]\n        }] }); })();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        // If IE 11 is dropped before we switch to setting a single class name, change to multi param\n        // with destructuring.\n        const classList = elementRef.nativeElement.classList;\n        for (const className of columnDef._columnCssClassName) {\n            classList.add(className);\n        }\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkHeaderCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement\n                .getAttribute('role');\n            const role = (tableRole === 'grid' || tableRole === 'treegrid') ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkFooterCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement\n                .getAttribute('role');\n            const role = (tableRole === 'grid' || tableRole === 'treegrid') ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        });\n    }\n    _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable ?\n            from(Promise.resolve(undefined)) :\n            this._ngZone.onStable.pipe(take(1));\n    }\n}\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) { return new (t || _CoalescedStyleScheduler)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n_CoalescedStyleScheduler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: _CoalescedStyleScheduler, factory: _CoalescedStyleScheduler.ɵfac });\n_CoalescedStyleScheduler.ctorParameters = () => [\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nBaseRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nBaseRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRowDef, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkCellOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\nCdkFooterRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n}\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\nCdkRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) { return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkNoDataRow.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNoDataRow, selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]] });\nCdkNoDataRow.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNoDataRow, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkNoDataRow]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) ||\n            stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1 ?\n                        [] :\n                        cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => stickyStartStates[index] ? width : null)\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1 ?\n                        [] :\n                        cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null)\n                            .reverse()\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n            if (!states[rowIndex]) {\n                continue;\n            }\n            stickyOffsets[rowIndex] = stickyOffset;\n            const row = rows[rowIndex];\n            elementsToStick[rowIndex] = this._isNativeHtmlTable ?\n                Array.from(row.children) : [row];\n            const height = row.getBoundingClientRect().height;\n            stickyOffset += height;\n            stickyCellHeights[rowIndex] = height;\n        }\n        const borderedRowIndex = states.lastIndexOf(true);\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            var _a, _b;\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({ sizes: stickyCellHeights, offsets: stickyOffsets, elements: elementsToStick });\n            }\n            else {\n                (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({ sizes: stickyCellHeights, offsets: stickyOffsets, elements: elementsToStick });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            if (stickyStates.some(state => !state)) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n}\nCdkRecycleRows.ɵfac = function CdkRecycleRows_Factory(t) { return new (t || CdkRecycleRows)(); };\nCdkRecycleRows.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkRecycleRows, selectors: [[\"cdk-table\", \"recycleRows\", \"\"], [\"table\", \"cdk-table\", \"\", \"recycleRows\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n        ])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRecycleRows, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                providers: [\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[rowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[headerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nFooterRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[footerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) { return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nNoDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NoDataRowOutlet, selectors: [[\"\", \"noDataRowOutlet\", \"\"]] });\nNoDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoDataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[noDataRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(v) {\n        this._fixedLayout = coerceBooleanProperty(v);\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._noDataRowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), (record) => record.item.data, (change) => {\n            if (change.operation === 1 /* INSERTED */ && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        this.updateStickyColumnStyles();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout)\n            || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    _applyNativeTableSections() {\n        const documentFragment = this._document.createDocumentFragment();\n        const sections = [\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n        ];\n        for (const section of sections) {\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            for (const outlet of section.outlets) {\n                element.appendChild(outlet.elementRef.nativeElement);\n            }\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (noDataRow) {\n            const shouldShow = this._rowOutlet.viewContainer.length === 0;\n            if (shouldShow !== this._isShowingNoDataRow) {\n                const container = this._noDataRowOutlet.viewContainer;\n                shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\n                this._isShowingNoDataRow = shouldShow;\n            }\n        }\n    }\n}\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵngcc0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12)); };\nCdkTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DataRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(NoDataRowOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n    } }, hostAttrs: [1, \"cdk-table\"], hostVars: 2, hostBindings: function CdkTable_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n    } }, inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\", fixedLayout: \"fixedLayout\" }, exportAs: [\"cdkTable\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ])], ngContentSelectors: _c1, decls: 6, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 0)(3, 1)(4, 2)(5, 3);\n    } }, directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], encapsulation: 2 });\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [_VIEW_REPEATER_STRATEGY,] }] },\n    { type: _CoalescedStyleScheduler, decorators: [{ type: Inject, args: [_COALESCED_STYLE_SCHEDULER,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [STICKY_POSITIONING_LISTENER,] }] }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    fixedLayout: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _noDataRowOutlet: [{ type: ViewChild, args: [NoDataRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\n                    descendants: true\n                },] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\n                    descendants: true\n                },] }],\n    _noDataRow: [{ type: ContentChild, args: [CdkNoDataRow,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table',\n                    '[class.cdk-table-fixed-layout]': 'fixedLayout'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [\n                    { provide: CDK_TABLE, useExisting: CdkTable },\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                    { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                    // Prevent nested tables from seeing this table's StickyPositioningListener.\n                    { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                ],\n                styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [_VIEW_REPEATER_STRATEGY]\n            }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                type: Inject,\n                args: [_COALESCED_STYLE_SCHEDULER]\n            }] }, { type: ɵngcc3.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [STICKY_POSITIONING_LISTENER]\n            }] }]; }, { trackBy: [{\n            type: Input\n        }], dataSource: [{\n            type: Input\n        }], multiTemplateDataRows: [{\n            type: Input\n        }], fixedLayout: [{\n            type: Input\n        }], _rowOutlet: [{\n            type: ViewChild,\n            args: [DataRowOutlet, { static: true }]\n        }], _headerRowOutlet: [{\n            type: ViewChild,\n            args: [HeaderRowOutlet, { static: true }]\n        }], _footerRowOutlet: [{\n            type: ViewChild,\n            args: [FooterRowOutlet, { static: true }]\n        }], _noDataRowOutlet: [{\n            type: ViewChild,\n            args: [NoDataRowOutlet, { static: true }]\n        }], _contentColumnDefs: [{\n            type: ContentChildren,\n            args: [CdkColumnDef, { descendants: true }]\n        }], _contentRowDefs: [{\n            type: ContentChildren,\n            args: [CdkRowDef, { descendants: true }]\n        }], _contentHeaderRowDefs: [{\n            type: ContentChildren,\n            args: [CdkHeaderRowDef, {\n                    descendants: true\n                }]\n        }], _contentFooterRowDefs: [{\n            type: ContentChildren,\n            args: [CdkFooterRowDef, {\n                    descendants: true\n                }]\n        }], _noDataRow: [{\n            type: ContentChild,\n            args: [CdkNoDataRow]\n        }] }); })();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) { return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8)); };\nCdkTextColumn.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTextColumn, selectors: [[\"cdk-text-column\"]], viewQuery: function CdkTextColumn_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkColumnDef, 7);\n        ɵngcc0.ɵɵviewQuery(CdkCellDef, 7);\n        ɵngcc0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    } }, inputs: { justify: \"justify\", name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\" }, decls: 3, vars: 0, consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]], template: function CdkTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } }, directives: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell], encapsulation: 2 });\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: CdkTable, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [TEXT_COLUMN_OPTIONS]\n            }] }]; }, { justify: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], headerText: [{\n            type: Input\n        }], dataAccessor: [{\n            type: Input\n        }], columnDef: [{\n            type: ViewChild,\n            args: [CdkColumnDef, { static: true }]\n        }], cell: [{\n            type: ViewChild,\n            args: [CdkCellDef, { static: true }]\n        }], headerCell: [{\n            type: ViewChild,\n            args: [CdkHeaderCellDef, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); };\nCdkTableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\nCdkTableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[ScrollingModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                imports: [ScrollingModule]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet]; }, imports: function () { return [ScrollingModule]; }, exports: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}