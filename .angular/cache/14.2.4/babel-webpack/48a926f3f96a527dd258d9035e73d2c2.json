{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, HostBinding, NgModule } from '@angular/core';\nimport * as i9 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i11 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport * as i12 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i10 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i4 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i8 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n\nvar _c0 = [\"searchSelectInput\"];\nvar _c1 = [\"innerSelectSearch\"];\n\nfunction MatSelectSearchComponent_mat_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 9);\n    i0.ɵɵlistener(\"change\", function MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      var ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6._emitSelectAllBooleanToParent($event.checked);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r1.matFormField == null ? null : ctx_r1.matFormField.color)(\"checked\", ctx_r1.toggleAllCheckboxChecked)(\"indeterminate\", ctx_r1.toggleAllCheckboxIndeterminate)(\"matTooltip\", ctx_r1.toggleAllCheckboxTooltipMessage)(\"matTooltipPosition\", ctx_r1.toogleAllCheckboxTooltipPosition);\n  }\n}\n\nfunction MatSelectSearchComponent_mat_spinner_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 10);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 1, [\"*ngIf\", \"clearIcon; else defaultIcon\"]);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"svgIcon\", ctx_r10.closeSvgIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", !ctx_r10.closeSvgIcon ? ctx_r10.closeIcon : null, \" \");\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function MatSelectSearchComponent_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11._reset(true);\n    });\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_button_7_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_button_7_ng_template_2_Template, 2, 2, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var _r9 = i0.ɵɵreference(3);\n\n    var ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.clearIcon)(\"ngIfElse\", _r9);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2, [\"*ngIf\", \"noEntriesFound; else defaultNoEntriesFound\"]);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate(ctx_r15.noEntriesFoundLabel);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_div_9_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_div_9_ng_template_2_Template, 1, 1, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var _r14 = i0.ɵɵreference(3);\n\n    var ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.noEntriesFound)(\"ngIfElse\", _r14);\n  }\n}\n\nvar _c2 = [[[\"\", 8, \"mat-select-search-custom-header-content\"]], [[\"\", \"ngxMatSelectSearchClear\", \"\"]], [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]];\n\nvar _c3 = function _c3(a0, a1) {\n  return {\n    \"mat-select-search-inner-multiple\": a0,\n    \"mat-select-search-inner-toggle-all\": a1\n  };\n};\n\nvar _c4 = [\".mat-select-search-custom-header-content\", \"[ngxMatSelectSearchClear]\", \"[ngxMatSelectNoEntriesFound]\"];\nvar MatSelectSearchClearDirective = /*#__PURE__*/(function () {\n  var MatSelectSearchClearDirective = /*#__PURE__*/_createClass(function MatSelectSearchClearDirective() {\n    _classCallCheck(this, MatSelectSearchClearDirective);\n  });\n\n  MatSelectSearchClearDirective.ɵfac = function MatSelectSearchClearDirective_Factory(t) {\n    return new (t || MatSelectSearchClearDirective)();\n  };\n\n  MatSelectSearchClearDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatSelectSearchClearDirective,\n    selectors: [[\"\", \"ngxMatSelectSearchClear\", \"\"]]\n  });\n  return MatSelectSearchClearDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\n\n\nvar configurableDefaultOptions = ['ariaLabel', 'clearSearchInput', 'closeIcon', 'closeSvgIcon', 'disableInitialFocus', 'disableScrollToActiveOnOptionsChanged', 'enableClearOnEscapePressed', 'hideClearSearchButton', 'indexAndLengthScreenReaderText', 'noEntriesFoundLabel', 'placeholderLabel', 'preventHomeEndKeyPropagation', 'searching'];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\n\nvar MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n/** @deprecated */\n\nvar configurableGlobalOptions = configurableDefaultOptions;\n/** @deprecated */\n\nvar MATSELECTSEARCH_GLOBAL_OPTIONS = MAT_SELECTSEARCH_DEFAULT_OPTIONS;\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\n\nvar MatSelectNoEntriesFoundDirective = /*#__PURE__*/(function () {\n  var MatSelectNoEntriesFoundDirective = /*#__PURE__*/_createClass(function MatSelectNoEntriesFoundDirective() {\n    _classCallCheck(this, MatSelectNoEntriesFoundDirective);\n  });\n\n  MatSelectNoEntriesFoundDirective.ɵfac = function MatSelectNoEntriesFoundDirective_Factory(t) {\n    return new (t || MatSelectNoEntriesFoundDirective)();\n  };\n\n  MatSelectNoEntriesFoundDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatSelectNoEntriesFoundDirective,\n    selectors: [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]\n  });\n  return MatSelectNoEntriesFoundDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** The max height of the select's overlay panel. */\n\n\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/* tslint:disable:member-ordering component-selector */\n\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n\nvar MatSelectSearchComponent = /*#__PURE__*/(function () {\n  var MatSelectSearchComponent = /*#__PURE__*/function () {\n    function MatSelectSearchComponent(matSelect, changeDetectorRef, _viewportRuler) {\n      var _this = this;\n\n      var matOption = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var liveAnnouncer = arguments.length > 4 ? arguments[4] : undefined;\n      var matFormField = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n      var defaultOptions = arguments.length > 6 ? arguments[6] : undefined;\n\n      _classCallCheck(this, MatSelectSearchComponent);\n\n      this.matSelect = matSelect;\n      this.changeDetectorRef = changeDetectorRef;\n      this._viewportRuler = _viewportRuler;\n      this.matOption = matOption;\n      this.liveAnnouncer = liveAnnouncer;\n      this.matFormField = matFormField;\n      /** Label of the search placeholder */\n\n      this.placeholderLabel = 'Suche';\n      /** Type of the search input field */\n\n      this.type = 'text';\n      /** Font-based icon used for displaying Close-Icon */\n\n      this.closeIcon = 'close';\n      /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n\n      this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n      /**\n       *  Text that is appended to the currently active item label announced by screen readers,\n       *  informing the user of the current index, value and total options.\n       *  eg: Bank R (Germany) 1 of 6\n      */\n\n      this.indexAndLengthScreenReaderText = ' of ';\n      /**\n        * Whether or not the search field should be cleared after the dropdown menu is closed.\n        * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n        */\n\n      this.clearSearchInput = true;\n      /** Whether to show the search-in-progress indicator */\n\n      this.searching = false;\n      /** Disables initial focusing of the input field */\n\n      this.disableInitialFocus = false;\n      /** Enable clear input on escape pressed */\n\n      this.enableClearOnEscapePressed = false;\n      /**\n       * Prevents home / end key being propagated to mat-select,\n       * allowing to move the cursor within the search input instead of navigating the options\n       */\n\n      this.preventHomeEndKeyPropagation = false;\n      /** Disables scrolling to active options when option list changes. Useful for server-side search */\n\n      this.disableScrollToActiveOnOptionsChanged = false;\n      /** Adds 508 screen reader support for search box */\n\n      this.ariaLabel = 'dropdown search';\n      /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n\n      this.showToggleAllCheckbox = false;\n      /** select all checkbox checked state */\n\n      this.toggleAllCheckboxChecked = false;\n      /** select all checkbox indeterminate state */\n\n      this.toggleAllCheckboxIndeterminate = false;\n      /** Display a message in a tooltip on the toggle-all checkbox */\n\n      this.toggleAllCheckboxTooltipMessage = '';\n      /** Define the position of the tooltip on the toggle-all checkbox. */\n\n      this.toogleAllCheckboxTooltipPosition = 'below';\n      /** Show/Hide the search clear button of the search input */\n\n      this.hideClearSearchButton = false;\n      /**\n       * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n       * Defaults to false, so selected options are only restored while filtering is active.\n       */\n\n      this.alwaysRestoreSelectedOptionsMulti = false;\n      /** Output emitter to send to parent component with the toggle all boolean */\n\n      this.toggleAll = new EventEmitter();\n\n      this.onTouched = function (_) {};\n\n      this._options$ = new BehaviorSubject(null);\n      this.optionsList$ = this._options$.pipe(switchMap(function (_options) {\n        return _options ? _options.changes.pipe(map(function (options) {\n          return options.toArray();\n        }), startWith(_options.toArray())) : of(null);\n      }));\n      this.optionsLength$ = this.optionsList$.pipe(map(function (options) {\n        return options ? options.length : 0;\n      }));\n      this._formControl = new FormControl('');\n      /** whether to show the no entries found message */\n\n      this._showNoEntriesFound$ = combineLatest([this._formControl.valueChanges, this.optionsLength$]).pipe(map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            value = _ref2[0],\n            optionsLength = _ref2[1];\n\n        return _this.noEntriesFoundLabel && value && optionsLength === _this.getOptionsLengthOffset();\n      }));\n      /** Subject that emits when the component has been destroyed. */\n\n      this._onDestroy = new Subject();\n      this.applyDefaultOptions(defaultOptions);\n    }\n\n    _createClass(MatSelectSearchComponent, [{\n      key: \"isInsideMatOption\",\n      get: function get() {\n        return !!this.matOption;\n      }\n      /** Current search value */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._formControl.value;\n      }\n      /** Reference to the MatSelect options */\n\n    }, {\n      key: \"_options\",\n      get: function get() {\n        return this._options$.getValue();\n      },\n      set: function set(_options) {\n        this._options$.next(_options);\n      }\n    }, {\n      key: \"applyDefaultOptions\",\n      value: function applyDefaultOptions(defaultOptions) {\n        if (!defaultOptions) {\n          return;\n        }\n\n        var _iterator = _createForOfIteratorHelper(configurableDefaultOptions),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var key = _step.value;\n\n            if (defaultOptions.hasOwnProperty(key)) {\n              this[key] = defaultOptions[key];\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        // set custom panel class\n        var panelClass = 'mat-select-search-panel';\n\n        if (this.matSelect.panelClass) {\n          if (Array.isArray(this.matSelect.panelClass)) {\n            this.matSelect.panelClass.push(panelClass);\n          } else if (typeof this.matSelect.panelClass === 'string') {\n            this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n          } else if (typeof this.matSelect.panelClass === 'object') {\n            this.matSelect.panelClass[panelClass] = true;\n          }\n        } else {\n          this.matSelect.panelClass = panelClass;\n        } // set custom mat-option class if the component was placed inside a mat-option\n\n\n        if (this.matOption) {\n          this.matOption.disabled = true;\n\n          this.matOption._getHostElement().classList.add('contains-mat-select-search');\n        } else {\n          console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n        } // when the select dropdown panel is opened or closed\n\n\n        this.matSelect.openedChange.pipe(delay(1), takeUntil(this._onDestroy)).subscribe(function (opened) {\n          if (opened) {\n            _this2.updateInputWidth(); // focus the search field when opening\n\n\n            if (!_this2.disableInitialFocus) {\n              _this2._focus();\n            }\n          } else {\n            // clear it when closing\n            if (_this2.clearSearchInput) {\n              _this2._reset();\n            }\n          }\n        }); // set the first item active after the options changed\n\n        this.matSelect.openedChange.pipe(take(1)).pipe(takeUntil(this._onDestroy)).subscribe(function () {\n          if (_this2.matSelect._keyManager) {\n            _this2.matSelect._keyManager.change.pipe(takeUntil(_this2._onDestroy)).subscribe(function () {\n              return _this2.adjustScrollTopToFitActiveOptionIntoView();\n            });\n          } else {\n            console.log('_keyManager was not initialized.');\n          }\n\n          _this2._options = _this2.matSelect.options; // Closure variable for tracking the most recent first option.\n          // In order to avoid avoid causing the list to\n          // scroll to the top when options are added to the bottom of\n          // the list (eg: infinite scroll), we compare only\n          // the changes to the first options to determine if we\n          // should set the first item as active.\n          // This prevents unnecessary scrolling to the top of the list\n          // when options are appended, but allows the first item\n          // in the list to be set as active by default when there\n          // is no active selection\n\n          var previousFirstOption = _this2._options.toArray()[_this2.getOptionsLengthOffset()];\n\n          _this2._options.changes.pipe(takeUntil(_this2._onDestroy)).subscribe(function () {\n            // avoid \"expression has been changed\" error\n            setTimeout(function () {\n              // Convert the QueryList to an array\n              var options = _this2._options.toArray(); // The true first item is offset by 1\n\n\n              var currentFirstOption = options[_this2.getOptionsLengthOffset()];\n\n              var keyManager = _this2.matSelect._keyManager;\n\n              if (keyManager && _this2.matSelect.panelOpen) {\n                // set first item active and input width\n                // Check to see if the first option in these changes is different from the previous.\n                var firstOptionIsChanged = !_this2.matSelect.compareWith(previousFirstOption, currentFirstOption); // CASE: The first option is different now.\n                // Indiciates we should set it as active and scroll to the top.\n\n                if (firstOptionIsChanged || !keyManager.activeItem || !options.find(function (option) {\n                  return _this2.matSelect.compareWith(option, keyManager.activeItem);\n                })) {\n                  keyManager.setFirstItemActive();\n                } // wait for panel width changes\n\n\n                setTimeout(function () {\n                  _this2.updateInputWidth();\n                });\n\n                if (!_this2.disableScrollToActiveOnOptionsChanged) {\n                  _this2.adjustScrollTopToFitActiveOptionIntoView();\n                }\n              } // Update our reference\n\n\n              previousFirstOption = currentFirstOption;\n            });\n          });\n        }); // add or remove css class depending on whether to show the no entries found message\n        // note: this is hacky\n\n        this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(function (showNoEntriesFound) {\n          // set no entries found class on mat option\n          if (_this2.matOption) {\n            if (showNoEntriesFound) {\n              _this2.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n            } else {\n              _this2.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n            }\n          }\n        }); // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n\n\n        this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(function () {\n          if (_this2.matSelect.panelOpen) {\n            _this2.updateInputWidth();\n          }\n        });\n\n        this.initMultipleHandling();\n        this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(function () {\n          // update view when available options change\n          _this2.changeDetectorRef.markForCheck();\n        });\n      }\n    }, {\n      key: \"_emitSelectAllBooleanToParent\",\n      value: function _emitSelectAllBooleanToParent(state) {\n        this.toggleAll.emit(state);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._onDestroy.next();\n\n        this._onDestroy.complete();\n      }\n    }, {\n      key: \"_isToggleAllCheckboxVisible\",\n      value: function _isToggleAllCheckboxVisible() {\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\n      }\n      /**\n       * Handles the key down event with MatSelect.\n       * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n       * @param event\n       */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        var _this3 = this;\n\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n        if (event.key && event.key.length === 1 || event.keyCode >= A && event.keyCode <= Z || event.keyCode >= ZERO && event.keyCode <= NINE || event.keyCode === SPACE || this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END)) {\n          event.stopPropagation();\n        }\n\n        if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n          // Regain focus after multiselect, so we can further type\n          setTimeout(function () {\n            return _this3._focus();\n          });\n        } // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n\n\n        if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n          this._reset(true);\n\n          event.stopPropagation();\n        }\n      }\n      /**\n       * Handles the key up event with MatSelect.\n       * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n       */\n\n    }, {\n      key: \"_handleKeyup\",\n      value: function _handleKeyup(event) {\n        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n          var ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n\n          var index = this._options.toArray().findIndex(function (item) {\n            return item.id === ariaActiveDescendantId;\n          });\n\n          if (index !== -1) {\n            var activeDescendant = this._options.toArray()[index];\n\n            this.liveAnnouncer.announce(activeDescendant.viewValue + ' ' + this.getAriaIndex(index) + this.indexAndLengthScreenReaderText + this.getAriaLength());\n          }\n        }\n      }\n      /**\n       * Calculate the index of the current option, taking the offset to length into account.\n       * examples:\n       *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n       *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n       */\n\n    }, {\n      key: \"getAriaIndex\",\n      value: function getAriaIndex(optionIndex) {\n        if (this.getOptionsLengthOffset() === 0) {\n          return optionIndex + 1;\n        }\n\n        return optionIndex;\n      }\n      /**\n       * Calculate the length of the options, taking the offset to length into account.\n       * examples:\n       *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n       *    Case 2 [1, 2, 3] will have length of options.length.\n       */\n\n    }, {\n      key: \"getAriaLength\",\n      value: function getAriaLength() {\n        return this._options.toArray().length - this.getOptionsLengthOffset();\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this._lastExternalInputValue = value;\n\n        this._formControl.setValue(value);\n\n        this.changeDetectorRef.markForCheck();\n      }\n    }, {\n      key: \"onBlur\",\n      value: function onBlur() {\n        this.onTouched();\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        var _this4 = this;\n\n        this._formControl.valueChanges.pipe(filter(function (value) {\n          return value !== _this4._lastExternalInputValue;\n        }), tap(function () {\n          return _this4._lastExternalInputValue = undefined;\n        }), takeUntil(this._onDestroy)).subscribe(fn);\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * Focuses the search input field\n       */\n\n    }, {\n      key: \"_focus\",\n      value: function _focus() {\n        if (!this.searchSelectInput || !this.matSelect.panel) {\n          return;\n        } // save and restore scrollTop of panel, since it will be reset by focus()\n        // note: this is hacky\n\n\n        var panel = this.matSelect.panel.nativeElement;\n        var scrollTop = panel.scrollTop; // focus\n\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n      }\n      /**\n       * Resets the current search value\n       * @param focus whether to focus after resetting\n       */\n\n    }, {\n      key: \"_reset\",\n      value: function _reset(focus) {\n        this._formControl.setValue('');\n\n        if (focus) {\n          this._focus();\n        }\n      }\n      /**\n       * Initializes handling <mat-select [multiple]=\"true\">\n       * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n       */\n\n    }, {\n      key: \"initMultipleHandling\",\n      value: function initMultipleHandling() {\n        var _this5 = this;\n\n        if (!this.matSelect.ngControl) {\n          if (this.matSelect.multiple) {\n            // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n            // is necessary to properly work in multi-selection mode.\n            console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n          }\n\n          return;\n        } // if <mat-select [multiple]=\"true\">\n        // store previously selected values and restore them when they are deselected\n        // because the option is not available while we are currently filtering\n\n\n        this.previousSelectedValues = this.matSelect.ngControl.value;\n        this.matSelect.ngControl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(function (values) {\n          var restoreSelectedValues = false;\n\n          if (_this5.matSelect.multiple) {\n            if ((_this5.alwaysRestoreSelectedOptionsMulti || _this5._formControl.value && _this5._formControl.value.length) && _this5.previousSelectedValues && Array.isArray(_this5.previousSelectedValues)) {\n              if (!values || !Array.isArray(values)) {\n                values = [];\n              }\n\n              var optionValues = _this5.matSelect.options.map(function (option) {\n                return option.value;\n              });\n\n              _this5.previousSelectedValues.forEach(function (previousValue) {\n                if (!values.some(function (v) {\n                  return _this5.matSelect.compareWith(v, previousValue);\n                }) && !optionValues.some(function (v) {\n                  return _this5.matSelect.compareWith(v, previousValue);\n                })) {\n                  // if a value that was selected before is deselected and not found in the options, it was deselected\n                  // due to the filtering, so we restore it.\n                  values.push(previousValue);\n                  restoreSelectedValues = true;\n                }\n              });\n            }\n          }\n\n          _this5.previousSelectedValues = values;\n\n          if (restoreSelectedValues) {\n            _this5.matSelect._onChange(values);\n          }\n        });\n      }\n      /**\n       * Scrolls the currently active option into the view if it is not yet visible.\n       */\n\n    }, {\n      key: \"adjustScrollTopToFitActiveOptionIntoView\",\n      value: function adjustScrollTopToFitActiveOptionIntoView() {\n        if (this.matSelect.panel && this.matSelect.options.length > 0) {\n          var matOptionHeight = this.getMatOptionHeight();\n          var activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n\n          var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups); // If the component is in a MatOption, the activeItemIndex will be offset by one.\n\n\n          var indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n          var currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n          var searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n          var amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n          var indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n\n          if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n            this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n          } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n            this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n          }\n        }\n      }\n      /**\n       *  Set the width of the innerSelectSearch to fit even custom scrollbars\n       *  And support all Operation Systems\n       */\n\n    }, {\n      key: \"updateInputWidth\",\n      value: function updateInputWidth() {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n          return;\n        }\n\n        var element = this.innerSelectSearch.nativeElement;\n        var panelElement;\n\n        while (element = element.parentElement) {\n          if (element.classList.contains('mat-select-panel')) {\n            panelElement = element;\n            break;\n          }\n        }\n\n        if (panelElement) {\n          this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n      }\n    }, {\n      key: \"getMatOptionHeight\",\n      value: function getMatOptionHeight() {\n        if (this.matSelect.options.length > 0) {\n          return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n        }\n\n        return 0;\n      }\n      /**\n       * Determine the offset to length that can be caused by the optional matOption used as a search input.\n       */\n\n    }, {\n      key: \"getOptionsLengthOffset\",\n      value: function getOptionsLengthOffset() {\n        if (this.matOption) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    }]);\n\n    return MatSelectSearchComponent;\n  }();\n\n  MatSelectSearchComponent.ɵfac = function MatSelectSearchComponent_Factory(t) {\n    return new (t || MatSelectSearchComponent)(i0.ɵɵdirectiveInject(MatSelect), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(MatOption, 8), i0.ɵɵdirectiveInject(i2.LiveAnnouncer), i0.ɵɵdirectiveInject(MatFormField, 8), i0.ɵɵdirectiveInject(MAT_SELECTSEARCH_DEFAULT_OPTIONS, 8));\n  };\n\n  MatSelectSearchComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatSelectSearchComponent,\n    selectors: [[\"ngx-mat-select-search\"]],\n    contentQueries: function MatSelectSearchComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatSelectSearchClearDirective, 5);\n        i0.ɵɵcontentQuery(dirIndex, MatSelectNoEntriesFoundDirective, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clearIcon = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.noEntriesFound = _t.first);\n      }\n    },\n    viewQuery: function MatSelectSearchComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7, ElementRef);\n        i0.ɵɵviewQuery(_c1, 7, ElementRef);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchSelectInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.innerSelectSearch = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function MatSelectSearchComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-select-search-inside-mat-option\", ctx.isInsideMatOption);\n      }\n    },\n    inputs: {\n      placeholderLabel: \"placeholderLabel\",\n      type: \"type\",\n      closeIcon: \"closeIcon\",\n      closeSvgIcon: \"closeSvgIcon\",\n      noEntriesFoundLabel: \"noEntriesFoundLabel\",\n      indexAndLengthScreenReaderText: \"indexAndLengthScreenReaderText\",\n      clearSearchInput: \"clearSearchInput\",\n      searching: \"searching\",\n      disableInitialFocus: \"disableInitialFocus\",\n      enableClearOnEscapePressed: \"enableClearOnEscapePressed\",\n      preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\",\n      disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\",\n      ariaLabel: \"ariaLabel\",\n      showToggleAllCheckbox: \"showToggleAllCheckbox\",\n      toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\",\n      toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\",\n      toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\",\n      toogleAllCheckboxTooltipPosition: \"toogleAllCheckboxTooltipPosition\",\n      hideClearSearchButton: \"hideClearSearchButton\",\n      alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\"\n    },\n    outputs: {\n      toggleAll: \"toggleAll\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return MatSelectSearchComponent;\n      }),\n      multi: true\n    }])],\n    ngContentSelectors: _c4,\n    decls: 11,\n    vars: 14,\n    consts: [[\"matInput\", \"\", 1, \"mat-select-search-input\", \"mat-select-search-hidden\"], [1, \"mat-select-search-inner\", \"mat-typography\", \"mat-datepicker-content\", \"mat-tab-header\", 3, \"ngClass\"], [\"innerSelectSearch\", \"\"], [\"class\", \"mat-select-search-toggle-all-checkbox\", \"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\", 4, \"ngIf\"], [\"autocomplete\", \"off\", 1, \"mat-select-search-input\", \"mat-input-element\", 3, \"type\", \"formControl\", \"placeholder\", \"keydown\", \"keyup\", \"blur\"], [\"searchSelectInput\", \"\"], [\"class\", \"mat-select-search-spinner\", \"diameter\", \"16\", 4, \"ngIf\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"class\", \"mat-select-search-clear\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"mat-select-search-no-entries-found\", 4, \"ngIf\"], [\"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 1, \"mat-select-search-toggle-all-checkbox\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\"], [\"diameter\", \"16\", 1, \"mat-select-search-spinner\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 1, \"mat-select-search-clear\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultIcon\", \"\"], [3, \"svgIcon\"], [1, \"mat-select-search-no-entries-found\"], [\"defaultNoEntriesFound\", \"\"]],\n    template: function MatSelectSearchComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c2);\n        i0.ɵɵelement(0, \"input\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1, 2);\n        i0.ɵɵtemplate(3, MatSelectSearchComponent_mat_checkbox_3_Template, 1, 5, \"mat-checkbox\", 3);\n        i0.ɵɵelementStart(4, \"input\", 4, 5);\n        i0.ɵɵlistener(\"keydown\", function MatSelectSearchComponent_Template_input_keydown_4_listener($event) {\n          return ctx._handleKeydown($event);\n        })(\"keyup\", function MatSelectSearchComponent_Template_input_keyup_4_listener($event) {\n          return ctx._handleKeyup($event);\n        })(\"blur\", function MatSelectSearchComponent_Template_input_blur_4_listener() {\n          return ctx.onBlur();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, MatSelectSearchComponent_mat_spinner_6_Template, 1, 0, \"mat-spinner\", 6);\n        i0.ɵɵtemplate(7, MatSelectSearchComponent_button_7_Template, 4, 2, \"button\", 7);\n        i0.ɵɵprojection(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, MatSelectSearchComponent_div_9_Template, 4, 2, \"div\", 8);\n        i0.ɵɵpipe(10, \"async\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(11, _c3, ctx.matSelect.multiple, ctx._isToggleAllCheckboxVisible()));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx._isToggleAllCheckboxVisible());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"type\", ctx.type)(\"formControl\", ctx._formControl)(\"placeholder\", ctx.placeholderLabel);\n        i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.searching);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hideClearSearchButton && ctx.value && !ctx.searching);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 9, ctx._showNoEntriesFound$));\n      }\n    },\n    directives: [i3.MatCheckbox, i4.MatProgressSpinner, i5.MatButton, i6.MatIcon, i7.NgClass, i7.NgIf, i8.MatTooltip, i9.DefaultValueAccessor, i9.NgControlStatus, i9.FormControlDirective],\n    pipes: [i7.AsyncPipe],\n    styles: [\".mat-select-search-hidden[_ngcontent-%COMP%]{visibility:hidden}.mat-select-search-inner[_ngcontent-%COMP%]{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple[_ngcontent-%COMP%]{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]{display:flex;align-items:center}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]{flex-basis:auto}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]:-ms-input-placeholder{-ms-user-select:text}  .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input[_ngcontent-%COMP%]{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}[dir=rtl][_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found[_ngcontent-%COMP%]{padding:16px}.mat-select-search-clear[_ngcontent-%COMP%]{position:absolute;right:4px;top:5px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{right:auto;left:4px}.mat-select-search-spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%]{right:auto;left:16px}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-top:0;padding-bottom:0;height:3em;line-height:3em}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{top:3px}  .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}  .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:16px;padding-bottom:2px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:0;padding-right:16px}\"],\n    changeDetection: 0\n  });\n  return MatSelectSearchComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSelectSearchVersion = '4.2.1';\nvar NgxMatSelectSearchModule = /*#__PURE__*/(function () {\n  var NgxMatSelectSearchModule = /*#__PURE__*/_createClass(function NgxMatSelectSearchModule() {\n    _classCallCheck(this, NgxMatSelectSearchModule);\n  });\n\n  NgxMatSelectSearchModule.ɵfac = function NgxMatSelectSearchModule_Factory(t) {\n    return new (t || NgxMatSelectSearchModule)();\n  };\n\n  NgxMatSelectSearchModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxMatSelectSearchModule\n  });\n  NgxMatSelectSearchModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule]]\n  });\n  return NgxMatSelectSearchModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MATSELECTSEARCH_GLOBAL_OPTIONS, MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions, configurableGlobalOptions };","map":{"version":3,"names":["A","Z","ZERO","NINE","SPACE","HOME","END","ENTER","ESCAPE","UP_ARROW","DOWN_ARROW","i0","Directive","InjectionToken","EventEmitter","forwardRef","ElementRef","Component","ChangeDetectionStrategy","Inject","Optional","Input","Output","ViewChild","ContentChild","HostBinding","NgModule","i9","FormControl","NG_VALUE_ACCESSOR","ReactiveFormsModule","i11","_countGroupLabelsBeforeOption","MatOption","i12","MatFormField","i10","MatSelect","BehaviorSubject","of","combineLatest","Subject","switchMap","map","startWith","delay","takeUntil","take","filter","tap","i1","i2","i3","MatCheckboxModule","i4","MatProgressSpinnerModule","i5","MatButtonModule","i6","MatIconModule","i7","CommonModule","i8","MatTooltipModule","MatSelectSearchClearDirective","ɵfac","ɵdir","configurableDefaultOptions","MAT_SELECTSEARCH_DEFAULT_OPTIONS","configurableGlobalOptions","MATSELECTSEARCH_GLOBAL_OPTIONS","MatSelectNoEntriesFoundDirective","SELECT_PANEL_MAX_HEIGHT","MatSelectSearchComponent","matSelect","changeDetectorRef","_viewportRuler","matOption","liveAnnouncer","matFormField","defaultOptions","placeholderLabel","type","closeIcon","noEntriesFoundLabel","indexAndLengthScreenReaderText","clearSearchInput","searching","disableInitialFocus","enableClearOnEscapePressed","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAllCheckboxTooltipMessage","toogleAllCheckboxTooltipPosition","hideClearSearchButton","alwaysRestoreSelectedOptionsMulti","toggleAll","onTouched","_","_options$","optionsList$","pipe","_options","changes","options","toArray","optionsLength$","length","_formControl","_showNoEntriesFound$","valueChanges","value","optionsLength","getOptionsLengthOffset","_onDestroy","applyDefaultOptions","getValue","next","key","hasOwnProperty","panelClass","Array","isArray","push","disabled","_getHostElement","classList","add","console","error","openedChange","subscribe","opened","updateInputWidth","_focus","_reset","_keyManager","change","adjustScrollTopToFitActiveOptionIntoView","log","previousFirstOption","setTimeout","currentFirstOption","keyManager","panelOpen","firstOptionIsChanged","compareWith","activeItem","find","option","setFirstItemActive","showNoEntriesFound","remove","initMultipleHandling","markForCheck","state","emit","complete","multiple","event","keyCode","stopPropagation","ariaActiveDescendantId","_getAriaActiveDescendant","index","findIndex","item","id","activeDescendant","announce","viewValue","getAriaIndex","getAriaLength","optionIndex","_lastExternalInputValue","setValue","fn","undefined","searchSelectInput","panel","nativeElement","scrollTop","focus","ngControl","previousSelectedValues","values","restoreSelectedValues","optionValues","forEach","previousValue","some","v","_onChange","matOptionHeight","getMatOptionHeight","activeOptionIndex","activeItemIndex","labelCount","optionGroups","indexOfOptionToFitIntoView","currentScrollTop","searchInputHeight","innerSelectSearch","offsetHeight","amountOfVisibleOptions","Math","floor","indexOfFirstVisibleOption","round","element","panelElement","parentElement","contains","style","width","clientWidth","first","getBoundingClientRect","height","ChangeDetectorRef","ViewportRuler","LiveAnnouncer","ɵcmp","provide","useExisting","multi","MatCheckbox","MatProgressSpinner","MatButton","MatIcon","NgClass","NgIf","MatTooltip","DefaultValueAccessor","NgControlStatus","FormControlDirective","AsyncPipe","MatSelectSearchVersion","NgxMatSelectSearchModule","ɵmod","ɵinj"],"sources":["C:/Users/sonkh/2/node_modules/ngx-mat-select-search/fesm2015/ngx-mat-select-search.mjs"],"sourcesContent":["import { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, HostBinding, NgModule } from '@angular/core';\nimport * as i9 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i11 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport * as i12 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i10 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i4 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i8 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nclass MatSelectSearchClearDirective {\n}\nMatSelectSearchClearDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchClearDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectSearchClearDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectSearchClearDirective, selector: \"[ngxMatSelectSearchClear]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchClearDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectSearchClear]'\n                }]\n        }] });\n\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\nconst configurableDefaultOptions = [\n    'ariaLabel',\n    'clearSearchInput',\n    'closeIcon',\n    'closeSvgIcon',\n    'disableInitialFocus',\n    'disableScrollToActiveOnOptionsChanged',\n    'enableClearOnEscapePressed',\n    'hideClearSearchButton',\n    'indexAndLengthScreenReaderText',\n    'noEntriesFoundLabel',\n    'placeholderLabel',\n    'preventHomeEndKeyPropagation',\n    'searching',\n];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\nconst MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n/** @deprecated */\nconst configurableGlobalOptions = configurableDefaultOptions;\n/** @deprecated */\nconst MATSELECTSEARCH_GLOBAL_OPTIONS = MAT_SELECTSEARCH_DEFAULT_OPTIONS;\n\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\nclass MatSelectNoEntriesFoundDirective {\n}\nMatSelectNoEntriesFoundDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectNoEntriesFoundDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectNoEntriesFoundDirective, selector: \"[ngxMatSelectNoEntriesFound]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectNoEntriesFound]'\n                }]\n        }] });\n\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nclass MatSelectSearchComponent {\n    constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, liveAnnouncer, matFormField = null, defaultOptions) {\n        this.matSelect = matSelect;\n        this.changeDetectorRef = changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this.matOption = matOption;\n        this.liveAnnouncer = liveAnnouncer;\n        this.matFormField = matFormField;\n        /** Label of the search placeholder */\n        this.placeholderLabel = 'Suche';\n        /** Type of the search input field */\n        this.type = 'text';\n        /** Font-based icon used for displaying Close-Icon */\n        this.closeIcon = 'close';\n        /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n        /**\n         *  Text that is appended to the currently active item label announced by screen readers,\n         *  informing the user of the current index, value and total options.\n         *  eg: Bank R (Germany) 1 of 6\n        */\n        this.indexAndLengthScreenReaderText = ' of ';\n        /**\n          * Whether or not the search field should be cleared after the dropdown menu is closed.\n          * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n          */\n        this.clearSearchInput = true;\n        /** Whether to show the search-in-progress indicator */\n        this.searching = false;\n        /** Disables initial focusing of the input field */\n        this.disableInitialFocus = false;\n        /** Enable clear input on escape pressed */\n        this.enableClearOnEscapePressed = false;\n        /**\n         * Prevents home / end key being propagated to mat-select,\n         * allowing to move the cursor within the search input instead of navigating the options\n         */\n        this.preventHomeEndKeyPropagation = false;\n        /** Disables scrolling to active options when option list changes. Useful for server-side search */\n        this.disableScrollToActiveOnOptionsChanged = false;\n        /** Adds 508 screen reader support for search box */\n        this.ariaLabel = 'dropdown search';\n        /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n        this.showToggleAllCheckbox = false;\n        /** select all checkbox checked state */\n        this.toggleAllCheckboxChecked = false;\n        /** select all checkbox indeterminate state */\n        this.toggleAllCheckboxIndeterminate = false;\n        /** Display a message in a tooltip on the toggle-all checkbox */\n        this.toggleAllCheckboxTooltipMessage = '';\n        /** Define the position of the tooltip on the toggle-all checkbox. */\n        this.toogleAllCheckboxTooltipPosition = 'below';\n        /** Show/Hide the search clear button of the search input */\n        this.hideClearSearchButton = false;\n        /**\n         * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n         * Defaults to false, so selected options are only restored while filtering is active.\n         */\n        this.alwaysRestoreSelectedOptionsMulti = false;\n        /** Output emitter to send to parent component with the toggle all boolean */\n        this.toggleAll = new EventEmitter();\n        this.onTouched = (_) => { };\n        this._options$ = new BehaviorSubject(null);\n        this.optionsList$ = this._options$.pipe(switchMap(_options => _options ?\n            _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n        this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n        this._formControl = new FormControl('');\n        /** whether to show the no entries found message */\n        this._showNoEntriesFound$ = combineLatest([\n            this._formControl.valueChanges,\n            this.optionsLength$\n        ]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value\n            && optionsLength === this.getOptionsLengthOffset()));\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        this.applyDefaultOptions(defaultOptions);\n    }\n    get isInsideMatOption() {\n        return !!this.matOption;\n    }\n    /** Current search value */\n    get value() {\n        return this._formControl.value;\n    }\n    /** Reference to the MatSelect options */\n    set _options(_options) {\n        this._options$.next(_options);\n    }\n    get _options() {\n        return this._options$.getValue();\n    }\n    applyDefaultOptions(defaultOptions) {\n        if (!defaultOptions) {\n            return;\n        }\n        for (const key of configurableDefaultOptions) {\n            if (defaultOptions.hasOwnProperty(key)) {\n                this[key] = defaultOptions[key];\n            }\n        }\n    }\n    ngOnInit() {\n        // set custom panel class\n        const panelClass = 'mat-select-search-panel';\n        if (this.matSelect.panelClass) {\n            if (Array.isArray(this.matSelect.panelClass)) {\n                this.matSelect.panelClass.push(panelClass);\n            }\n            else if (typeof this.matSelect.panelClass === 'string') {\n                this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n            }\n            else if (typeof this.matSelect.panelClass === 'object') {\n                this.matSelect.panelClass[panelClass] = true;\n            }\n        }\n        else {\n            this.matSelect.panelClass = panelClass;\n        }\n        // set custom mat-option class if the component was placed inside a mat-option\n        if (this.matOption) {\n            this.matOption.disabled = true;\n            this.matOption._getHostElement().classList.add('contains-mat-select-search');\n        }\n        else {\n            console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n        }\n        // when the select dropdown panel is opened or closed\n        this.matSelect.openedChange\n            .pipe(delay(1), takeUntil(this._onDestroy))\n            .subscribe((opened) => {\n            if (opened) {\n                this.updateInputWidth();\n                // focus the search field when opening\n                if (!this.disableInitialFocus) {\n                    this._focus();\n                }\n            }\n            else {\n                // clear it when closing\n                if (this.clearSearchInput) {\n                    this._reset();\n                }\n            }\n        });\n        // set the first item active after the options changed\n        this.matSelect.openedChange\n            .pipe(take(1))\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect._keyManager) {\n                this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n                    .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n            }\n            else {\n                console.log('_keyManager was not initialized.');\n            }\n            this._options = this.matSelect.options;\n            // Closure variable for tracking the most recent first option.\n            // In order to avoid avoid causing the list to\n            // scroll to the top when options are added to the bottom of\n            // the list (eg: infinite scroll), we compare only\n            // the changes to the first options to determine if we\n            // should set the first item as active.\n            // This prevents unnecessary scrolling to the top of the list\n            // when options are appended, but allows the first item\n            // in the list to be set as active by default when there\n            // is no active selection\n            let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n            this._options.changes\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => {\n                // avoid \"expression has been changed\" error\n                setTimeout(() => {\n                    // Convert the QueryList to an array\n                    const options = this._options.toArray();\n                    // The true first item is offset by 1\n                    const currentFirstOption = options[this.getOptionsLengthOffset()];\n                    const keyManager = this.matSelect._keyManager;\n                    if (keyManager && this.matSelect.panelOpen) {\n                        // set first item active and input width\n                        // Check to see if the first option in these changes is different from the previous.\n                        const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n                        // CASE: The first option is different now.\n                        // Indiciates we should set it as active and scroll to the top.\n                        if (firstOptionIsChanged\n                            || !keyManager.activeItem\n                            || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n                            keyManager.setFirstItemActive();\n                        }\n                        // wait for panel width changes\n                        setTimeout(() => {\n                            this.updateInputWidth();\n                        });\n                        if (!this.disableScrollToActiveOnOptionsChanged) {\n                            this.adjustScrollTopToFitActiveOptionIntoView();\n                        }\n                    }\n                    // Update our reference\n                    previousFirstOption = currentFirstOption;\n                });\n            });\n        });\n        // add or remove css class depending on whether to show the no entries found message\n        // note: this is hacky\n        this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n            // set no entries found class on mat option\n            if (this.matOption) {\n                if (showNoEntriesFound) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                }\n                else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                }\n            }\n        });\n        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect.panelOpen) {\n                this.updateInputWidth();\n            }\n        });\n        this.initMultipleHandling();\n        this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            // update view when available options change\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n    _emitSelectAllBooleanToParent(state) {\n        this.toggleAll.emit(state);\n    }\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n    _isToggleAllCheckboxVisible() {\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n    _handleKeydown(event) {\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n        if ((event.key && event.key.length === 1) ||\n            (event.keyCode >= A && event.keyCode <= Z) ||\n            (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n            (event.keyCode === SPACE)\n            || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))) {\n            event.stopPropagation();\n        }\n        if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n            // Regain focus after multiselect, so we can further type\n            setTimeout(() => this._focus());\n        }\n        // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n        if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n            this._reset(true);\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n    _handleKeyup(event) {\n        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n            const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n            const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n            if (index !== -1) {\n                const activeDescendant = this._options.toArray()[index];\n                this.liveAnnouncer.announce(activeDescendant.viewValue + ' '\n                    + this.getAriaIndex(index)\n                    + this.indexAndLengthScreenReaderText\n                    + this.getAriaLength());\n            }\n        }\n    }\n    /**\n     * Calculate the index of the current option, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n     *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n     */\n    getAriaIndex(optionIndex) {\n        if (this.getOptionsLengthOffset() === 0) {\n            return optionIndex + 1;\n        }\n        return optionIndex;\n    }\n    /**\n     * Calculate the length of the options, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n     *    Case 2 [1, 2, 3] will have length of options.length.\n     */\n    getAriaLength() {\n        return this._options.toArray().length - this.getOptionsLengthOffset();\n    }\n    writeValue(value) {\n        this._lastExternalInputValue = value;\n        this._formControl.setValue(value);\n        this.changeDetectorRef.markForCheck();\n    }\n    onBlur() {\n        this.onTouched();\n    }\n    registerOnChange(fn) {\n        this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     */\n    _focus() {\n        if (!this.searchSelectInput || !this.matSelect.panel) {\n            return;\n        }\n        // save and restore scrollTop of panel, since it will be reset by focus()\n        // note: this is hacky\n        const panel = this.matSelect.panel.nativeElement;\n        const scrollTop = panel.scrollTop;\n        // focus\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n    _reset(focus) {\n        this._formControl.setValue('');\n        if (focus) {\n            this._focus();\n        }\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n    initMultipleHandling() {\n        if (!this.matSelect.ngControl) {\n            if (this.matSelect.multiple) {\n                // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n                // is necessary to properly work in multi-selection mode.\n                console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n            }\n            return;\n        }\n        // if <mat-select [multiple]=\"true\">\n        // store previously selected values and restore them when they are deselected\n        // because the option is not available while we are currently filtering\n        this.previousSelectedValues = this.matSelect.ngControl.value;\n        this.matSelect.ngControl.valueChanges\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((values) => {\n            let restoreSelectedValues = false;\n            if (this.matSelect.multiple) {\n                if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length))\n                    && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n                    if (!values || !Array.isArray(values)) {\n                        values = [];\n                    }\n                    const optionValues = this.matSelect.options.map(option => option.value);\n                    this.previousSelectedValues.forEach(previousValue => {\n                        if (!values.some(v => this.matSelect.compareWith(v, previousValue))\n                            && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                            // if a value that was selected before is deselected and not found in the options, it was deselected\n                            // due to the filtering, so we restore it.\n                            values.push(previousValue);\n                            restoreSelectedValues = true;\n                        }\n                    });\n                }\n            }\n            this.previousSelectedValues = values;\n            if (restoreSelectedValues) {\n                this.matSelect._onChange(values);\n            }\n        });\n    }\n    /**\n     * Scrolls the currently active option into the view if it is not yet visible.\n     */\n    adjustScrollTopToFitActiveOptionIntoView() {\n        if (this.matSelect.panel && this.matSelect.options.length > 0) {\n            const matOptionHeight = this.getMatOptionHeight();\n            const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n            const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n            // If the component is in a MatOption, the activeItemIndex will be offset by one.\n            const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n            const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n            const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n            const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n            const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n            if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n            }\n            else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight\n                    - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n            }\n        }\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n    updateInputWidth() {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n            return;\n        }\n        let element = this.innerSelectSearch.nativeElement;\n        let panelElement;\n        while (element = element.parentElement) {\n            if (element.classList.contains('mat-select-panel')) {\n                panelElement = element;\n                break;\n            }\n        }\n        if (panelElement) {\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n    }\n    getMatOptionHeight() {\n        if (this.matSelect.options.length > 0) {\n            return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n        }\n        return 0;\n    }\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n    getOptionsLengthOffset() {\n        if (this.matOption) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\nMatSelectSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchComponent, deps: [{ token: MatSelect }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MatOption, optional: true }, { token: i2.LiveAnnouncer }, { token: MatFormField, optional: true }, { token: MAT_SELECTSEARCH_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSelectSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectSearchComponent, selector: \"ngx-mat-select-search\", inputs: { placeholderLabel: \"placeholderLabel\", type: \"type\", closeIcon: \"closeIcon\", closeSvgIcon: \"closeSvgIcon\", noEntriesFoundLabel: \"noEntriesFoundLabel\", indexAndLengthScreenReaderText: \"indexAndLengthScreenReaderText\", clearSearchInput: \"clearSearchInput\", searching: \"searching\", disableInitialFocus: \"disableInitialFocus\", enableClearOnEscapePressed: \"enableClearOnEscapePressed\", preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\", disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\", ariaLabel: \"ariaLabel\", showToggleAllCheckbox: \"showToggleAllCheckbox\", toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\", toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\", toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\", toogleAllCheckboxTooltipPosition: \"toogleAllCheckboxTooltipPosition\", hideClearSearchButton: \"hideClearSearchButton\", alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\" }, outputs: { toggleAll: \"toggleAll\" }, host: { properties: { \"class.mat-select-search-inside-mat-option\": \"this.isInsideMatOption\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MatSelectSearchComponent),\n            multi: true\n        }\n    ], queries: [{ propertyName: \"clearIcon\", first: true, predicate: MatSelectSearchClearDirective, descendants: true }, { propertyName: \"noEntriesFound\", first: true, predicate: MatSelectNoEntriesFoundDirective, descendants: true }], viewQueries: [{ propertyName: \"searchSelectInput\", first: true, predicate: [\"searchSelectInput\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"innerSelectSearch\", first: true, predicate: [\"innerSelectSearch\"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\\n\"], components: [{ type: i3.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"id\", \"required\", \"labelPosition\", \"name\", \"value\", \"checked\", \"disabled\", \"indeterminate\"], outputs: [\"change\", \"indeterminateChange\"], exportAs: [\"matCheckbox\"] }, { type: i4.MatProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: [\"color\", \"diameter\", \"strokeWidth\", \"mode\", \"value\"], exportAs: [\"matProgressSpinner\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i6.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], directives: [{ type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i7.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i8.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }, { type: i9.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i9.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i9.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }], pipes: { \"async\": i7.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-mat-select-search', providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MatSelectSearchComponent),\n                            multi: true\n                        }\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i10.MatSelect, decorators: [{\n                        type: Inject,\n                        args: [MatSelect]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: i11.MatOption, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MatOption]\n                    }] }, { type: i2.LiveAnnouncer }, { type: i12.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MatFormField]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECTSEARCH_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { placeholderLabel: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], closeIcon: [{\n                type: Input\n            }], closeSvgIcon: [{\n                type: Input\n            }], noEntriesFoundLabel: [{\n                type: Input\n            }], indexAndLengthScreenReaderText: [{\n                type: Input\n            }], clearSearchInput: [{\n                type: Input\n            }], searching: [{\n                type: Input\n            }], disableInitialFocus: [{\n                type: Input\n            }], enableClearOnEscapePressed: [{\n                type: Input\n            }], preventHomeEndKeyPropagation: [{\n                type: Input\n            }], disableScrollToActiveOnOptionsChanged: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], showToggleAllCheckbox: [{\n                type: Input\n            }], toggleAllCheckboxChecked: [{\n                type: Input\n            }], toggleAllCheckboxIndeterminate: [{\n                type: Input\n            }], toggleAllCheckboxTooltipMessage: [{\n                type: Input\n            }], toogleAllCheckboxTooltipPosition: [{\n                type: Input\n            }], hideClearSearchButton: [{\n                type: Input\n            }], alwaysRestoreSelectedOptionsMulti: [{\n                type: Input\n            }], toggleAll: [{\n                type: Output\n            }], searchSelectInput: [{\n                type: ViewChild,\n                args: ['searchSelectInput', { read: ElementRef, static: true }]\n            }], innerSelectSearch: [{\n                type: ViewChild,\n                args: ['innerSelectSearch', { read: ElementRef, static: true }]\n            }], clearIcon: [{\n                type: ContentChild,\n                args: [MatSelectSearchClearDirective]\n            }], noEntriesFound: [{\n                type: ContentChild,\n                args: [MatSelectNoEntriesFoundDirective]\n            }], isInsideMatOption: [{\n                type: HostBinding,\n                args: ['class.mat-select-search-inside-mat-option']\n            }] } });\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MatSelectSearchVersion = '4.2.1';\nclass NgxMatSelectSearchModule {\n}\nNgxMatSelectSearchModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMatSelectSearchModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, declarations: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatTooltipModule], exports: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective] });\nNgxMatSelectSearchModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatButtonModule,\n            MatCheckboxModule,\n            MatIconModule,\n            MatProgressSpinnerModule,\n            MatTooltipModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatButtonModule,\n                        MatCheckboxModule,\n                        MatIconModule,\n                        MatProgressSpinnerModule,\n                        MatTooltipModule\n                    ],\n                    declarations: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ],\n                    exports: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MATSELECTSEARCH_GLOBAL_OPTIONS, MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions, configurableGlobalOptions };\n"],"mappings":";;;;AAAA,SAASA,CAAT,EAAYC,CAAZ,EAAeC,IAAf,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwCC,GAAxC,EAA6CC,KAA7C,EAAoDC,MAApD,EAA4DC,QAA5D,EAAsEC,UAAtE,QAAwF,uBAAxF;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,YAApC,EAAkDC,UAAlD,EAA8DC,UAA9D,EAA0EC,SAA1E,EAAqFC,uBAArF,EAA8GC,MAA9G,EAAsHC,QAAtH,EAAgIC,KAAhI,EAAuIC,MAAvI,EAA+IC,SAA/I,EAA0JC,YAA1J,EAAwKC,WAAxK,EAAqLC,QAArL,QAAqM,eAArM;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,SAASC,WAAT,EAAsBC,iBAAtB,EAAyCC,mBAAzC,QAAoE,gBAApE;AACA,OAAO,KAAKC,GAAZ,MAAqB,wBAArB;AACA,SAASC,6BAAT,EAAwCC,SAAxC,QAAyD,wBAAzD;AACA,OAAO,KAAKC,GAAZ,MAAqB,8BAArB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,OAAO,KAAKC,GAAZ,MAAqB,0BAArB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,eAAT,EAA0BC,EAA1B,EAA8BC,aAA9B,EAA6CC,OAA7C,QAA4D,MAA5D;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,KAApC,EAA2CC,SAA3C,EAAsDC,IAAtD,EAA4DC,MAA5D,EAAoEC,GAApE,QAA+E,gBAA/E;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,4BAApB;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,OAAO,KAAKC,EAAZ,MAAoB,oCAApB;AACA,SAASC,wBAAT,QAAyC,oCAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,0BAApB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;cAGiHpD,E;;IAAAA,EA0lB89B,qC;IA1lB99BA,EA0lB8+C;MA1lB9+CA,EA0lB8+C;MAAA,aA1lB9+CA,EA0lB8+C;MAAA,OAAW,oDAAX;IAAA,E;IA1lB9+CA,EA0lB6iD,e;;;;iBA1lB7iDA,E;IAAAA,EA0lBqiC,6S;;;;;;IA1lBriCA,EA0lBo9D,gC;;;;;;IA1lBp9DA,EA0lB2zE,6D;;;;;;IA1lB3zEA,EA0lBu8E,kC;IA1lBv8EA,EA0lBs/E,U;IA1lBt/EA,EA0lBkiF,e;;;;kBA1lBliFA,E;IAAAA,EA0lBi9E,4C;IA1lBj9EA,EA0lBs/E,a;IA1lBt/EA,EA0lBs/E,+E;;;;;;eA1lBt/EA,E;;IAAAA,EA0lBmlE,gC;IA1lBnlEA,EA0lB+uE;MA1lB/uEA,EA0lB+uE;MAAA,cA1lB/uEA,EA0lB+uE;MAAA,OAAU,eAAO,IAAP,CAAV;IAAA,E;IA1lB/uEA,EA0lB2zE,+F;IA1lB3zEA,EA0lBq6E,wGA1lBr6EA,EA0lBq6E,wB;IA1lBr6EA,EA0lBqkF,e;;;;cA1lBrkFA,E;;iBAAAA,E;IAAAA,EA0lBw0E,a;IA1lBx0EA,EA0lBw0E,sD;;;;;;IA1lBx0EA,EA0lBkxF,4E;;;;;;IA1lBlxFA,EA0lB+7F,U;;;;kBA1lB/7FA,E;IAAAA,EA0lB+7F,+C;;;;;;IA1lB/7FA,EA0lB+qF,6B;IA1lB/qFA,EA0lBkxF,4F;IA1lBlxFA,EA0lB25F,qGA1lB35FA,EA0lB25F,wB;IA1lB35FA,EA0lBs+F,e;;;;eA1lBt+FA,E;;iBAAAA,E;IAAAA,EA0lB+xF,a;IA1lB/xFA,EA0lB+xF,4D;;;;;;;;;;;;;;IA5lB14FqD,6B;MAAAA,6B;;;;EAENA,6BAA6B,CAACC,IAA9B;IAAA,iBAA2HD,6BAA3H;EAAA;;EACAA,6BAA6B,CAACE,IAA9B,kBADiHvD,EACjH;IAAA,MAA+GqD,6BAA/G;IAAA;EAAA;SAHMA,6B;;;AAIN;EAAA;AAAA;AAOA;;;AACA,IAAMG,0BAA0B,GAAG,CAC/B,WAD+B,EAE/B,kBAF+B,EAG/B,WAH+B,EAI/B,cAJ+B,EAK/B,qBAL+B,EAM/B,uCAN+B,EAO/B,4BAP+B,EAQ/B,uBAR+B,EAS/B,gCAT+B,EAU/B,qBAV+B,EAW/B,kBAX+B,EAY/B,8BAZ+B,EAa/B,WAb+B,CAAnC;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,gCAAgC,GAAG,IAAIvD,cAAJ,CAAmB,kCAAnB,CAAzC;AACA;;AACA,IAAMwD,yBAAyB,GAAGF,0BAAlC;AACA;;AACA,IAAMG,8BAA8B,GAAGF,gCAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMG,gC;MAAAA,gC;;;;EAENA,gCAAgC,CAACN,IAAjC;IAAA,iBAA8HM,gCAA9H;EAAA;;EACAA,gCAAgC,CAACL,IAAjC,kBA5DiHvD,EA4DjH;IAAA,MAAkH4D,gCAAlH;IAAA;EAAA;SAHMA,gC;;;AAIN;EAAA;AAAA;AAOA;;;AACA,IAAMC,uBAAuB,GAAG,GAAhC;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,wB;MAAAA,wB;IACF,kCAAYC,SAAZ,EAAuBC,iBAAvB,EAA0CC,cAA1C,EA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"},"metadata":{},"sourceType":"module"}