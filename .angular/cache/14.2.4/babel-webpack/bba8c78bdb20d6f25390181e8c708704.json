{"ast":null,"code":"import _slicedToArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _assertThisInitialized from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { FocusMonitor, FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, ChangeDetectorRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Input, HostListener, QueryList, EventEmitter, NgZone, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nvar _c0 = [\"mat-menu-item\", \"\"];\nvar _c1 = [\"*\"];\n\nfunction MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1._handleKeydown($event);\n    })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.closed.emit(\"click\");\n    })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4._onAnimationStart($event);\n    })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5._onAnimationDone($event);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n  }\n}\n\nvar matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: /*#__PURE__*/trigger('transformMenu', [/*#__PURE__*/state('void', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), /*#__PURE__*/transition('void => enter', /*#__PURE__*/animate('120ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }))), /*#__PURE__*/transition('* => void', /*#__PURE__*/animate('100ms 25ms linear', /*#__PURE__*/style({\n    opacity: 0\n  })))]),\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: /*#__PURE__*/trigger('fadeInItems', [\n  /*#__PURE__*/\n  // TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', /*#__PURE__*/style({\n    opacity: 1\n  })), /*#__PURE__*/transition('void => *', [/*#__PURE__*/style({\n    opacity: 0\n  }), /*#__PURE__*/animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\n\nvar fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\n\nvar transformMenu = matMenuAnimations.transformMenu;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar MAT_MENU_CONTENT = /*#__PURE__*/new InjectionToken('MatMenuContent');\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n\nvar MatMenuContent = /*#__PURE__*/(function () {\n  var MatMenuContent = /*#__PURE__*/function () {\n    function MatMenuContent(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n      _classCallCheck(this, MatMenuContent);\n\n      this._template = _template;\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._appRef = _appRef;\n      this._injector = _injector;\n      this._viewContainerRef = _viewContainerRef;\n      this._document = _document;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Emits when the menu content has been attached. */\n\n      this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n\n\n    _createClass(MatMenuContent, [{\n      key: \"attach\",\n      value: function attach() {\n        var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        if (!this._portal) {\n          this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n          this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        var element = this._template.elementRef.nativeElement; // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n\n        element.parentNode.insertBefore(this._outlet.outletElement, element); // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n\n        if (this._changeDetectorRef) {\n          this._changeDetectorRef.markForCheck();\n        }\n\n        this._portal.attach(this._outlet, context);\n\n        this._attached.next();\n      }\n      /**\n       * Detaches the content.\n       * @docs-private\n       */\n\n    }, {\n      key: \"detach\",\n      value: function detach() {\n        if (this._portal.isAttached) {\n          this._portal.detach();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._outlet) {\n          this._outlet.dispose();\n        }\n      }\n    }]);\n\n    return MatMenuContent;\n  }();\n\n  MatMenuContent.ɵfac = function MatMenuContent_Factory(t) {\n    return new (t || MatMenuContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MatMenuContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatMenuContent,\n    selectors: [[\"ng-template\", \"matMenuContent\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_MENU_CONTENT,\n      useExisting: MatMenuContent\n    }])]\n  });\n  return MatMenuContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\n\n\nfunction throwMatMenuMissingError() {\n  throw Error(\"matMenuTriggerFor: must pass in an mat-menu instance.\\n\\n    Example:\\n      <mat-menu #menu=\\\"matMenu\\\"></mat-menu>\\n      <button [matMenuTriggerFor]=\\\"menu\\\"></button>\");\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\n\n\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(\"xPosition value must be either 'before' or after'.\\n      Example: <mat-menu xPosition=\\\"before\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\n\n\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(\"yPosition value must be either 'above' or below'.\\n      Example: <mat-menu yPosition=\\\"above\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\n\n\nfunction throwMatMenuRecursiveError() {\n  throw Error(\"matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is \" + \"not a parent of the trigger or move the trigger outside of the menu.\");\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\n\n\nvar MAT_MENU_PANEL = /*#__PURE__*/new InjectionToken('MAT_MENU_PANEL');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n\n/** @docs-private */\n\nvar _MatMenuItemBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinDisabled( /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  return _createClass(_class);\n}()));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n\n\nvar MatMenuItem = /*#__PURE__*/(function () {\n  var MatMenuItem = /*#__PURE__*/function (_MatMenuItemBase2) {\n    _inherits(MatMenuItem, _MatMenuItemBase2);\n\n    var _super = _createSuper(MatMenuItem);\n\n    function MatMenuItem(_elementRef,\n    /**\n     * @deprecated `_document` parameter is no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _focusMonitor, _parentMenu) {\n      var _this;\n\n      _classCallCheck(this, MatMenuItem);\n\n      // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n      _this = _super.call(this);\n      _this._elementRef = _elementRef;\n      _this._focusMonitor = _focusMonitor;\n      _this._parentMenu = _parentMenu;\n      /** ARIA role for the menu item. */\n\n      _this.role = 'menuitem';\n      /** Stream that emits when the menu item is hovered. */\n\n      _this._hovered = new Subject();\n      /** Stream that emits when the menu item is focused. */\n\n      _this._focused = new Subject();\n      /** Whether the menu item is highlighted. */\n\n      _this._highlighted = false;\n      /** Whether the menu item acts as a trigger for a sub-menu. */\n\n      _this._triggersSubmenu = false;\n\n      if (_parentMenu && _parentMenu.addItem) {\n        _parentMenu.addItem(_assertThisInitialized(_this));\n      }\n\n      return _this;\n    }\n    /** Focuses the menu item. */\n\n\n    _createClass(MatMenuItem, [{\n      key: \"focus\",\n      value: function focus(origin, options) {\n        if (this._focusMonitor && origin) {\n          this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        } else {\n          this._getHostElement().focus(options);\n        }\n\n        this._focused.next(this);\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        if (this._focusMonitor) {\n          // Start monitoring the element so it gets the appropriate focused classes. We want\n          // to show the focus style for menu items only when the focus was not caused by a\n          // mouse or touch interaction.\n          this._focusMonitor.monitor(this._elementRef, false);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._focusMonitor) {\n          this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n\n        if (this._parentMenu && this._parentMenu.removeItem) {\n          this._parentMenu.removeItem(this);\n        }\n\n        this._hovered.complete();\n\n        this._focused.complete();\n      }\n      /** Used to set the `tabindex`. */\n\n    }, {\n      key: \"_getTabIndex\",\n      value: function _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n      }\n      /** Returns the host DOM element. */\n\n    }, {\n      key: \"_getHostElement\",\n      value: function _getHostElement() {\n        return this._elementRef.nativeElement;\n      }\n      /** Prevents the default element actions if it is disabled. */\n      // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n      // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n      // ViewEngine they're overwritten.\n      // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n      // tslint:disable-next-line:no-host-decorator-in-concrete\n\n    }, {\n      key: \"_checkDisabled\",\n      value: function _checkDisabled(event) {\n        if (this.disabled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n      /** Emits to the hover stream. */\n      // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n      // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n      // ViewEngine they're overwritten.\n      // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n      // tslint:disable-next-line:no-host-decorator-in-concrete\n\n    }, {\n      key: \"_handleMouseEnter\",\n      value: function _handleMouseEnter() {\n        this._hovered.next(this);\n      }\n      /** Gets the label to be used when determining whether the option should be focused. */\n\n    }, {\n      key: \"getLabel\",\n      value: function getLabel() {\n        var _a, _b;\n\n        var clone = this._elementRef.nativeElement.cloneNode(true);\n\n        var icons = clone.querySelectorAll('mat-icon, .material-icons'); // Strip away icons so they don't show up in the text.\n\n        for (var i = 0; i < icons.length; i++) {\n          var icon = icons[i];\n          (_a = icon.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(icon);\n        }\n\n        return ((_b = clone.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || '';\n      }\n    }]);\n\n    return MatMenuItem;\n  }(_MatMenuItemBase);\n\n  MatMenuItem.ɵfac = function MatMenuItem_Factory(t) {\n    return new (t || MatMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8));\n  };\n\n  MatMenuItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatMenuItem,\n    selectors: [[\"\", \"mat-menu-item\", \"\"]],\n    hostAttrs: [1, \"mat-focus-indicator\"],\n    hostVars: 10,\n    hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n          return ctx._checkDisabled($event);\n        })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n          return ctx._handleMouseEnter();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"mat-menu-item\", true)(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      role: \"role\"\n    },\n    exportAs: [\"matMenuItem\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 2,\n    consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"]],\n    template: function MatMenuItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelement(1, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n      }\n    },\n    directives: [ɵngcc2.MatRipple],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatMenuItem;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-menu`. */\n\n\nvar MAT_MENU_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n\nvar menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\n\nvar _MatMenuBase = /*#__PURE__*/(function () {\n  var _MatMenuBase = /*#__PURE__*/function () {\n    function _MatMenuBase(_elementRef, _ngZone, _defaultOptions) {\n      _classCallCheck(this, _MatMenuBase);\n\n      this._elementRef = _elementRef;\n      this._ngZone = _ngZone;\n      this._defaultOptions = _defaultOptions;\n      this._xPosition = this._defaultOptions.xPosition;\n      this._yPosition = this._defaultOptions.yPosition;\n      /** Only the direct descendant menu items. */\n\n      this._directDescendantItems = new QueryList();\n      /** Subscription to tab events on the menu panel */\n\n      this._tabSubscription = Subscription.EMPTY;\n      /** Config object to be passed into the menu's ngClass */\n\n      this._classList = {};\n      /** Current state of the panel animation. */\n\n      this._panelAnimationState = 'void';\n      /** Emits whenever an animation on the menu completes. */\n\n      this._animationDone = new Subject();\n      /** Class or list of classes to be added to the overlay panel. */\n\n      this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n      /** Class to be added to the backdrop element. */\n\n      this.backdropClass = this._defaultOptions.backdropClass;\n      this._overlapTrigger = this._defaultOptions.overlapTrigger;\n      this._hasBackdrop = this._defaultOptions.hasBackdrop;\n      /** Event emitted when the menu is closed. */\n\n      this.closed = new EventEmitter();\n      /**\n       * Event emitted when the menu is closed.\n       * @deprecated Switch to `closed` instead\n       * @breaking-change 8.0.0\n       */\n\n      this.close = this.closed;\n      this.panelId = \"mat-menu-panel-\".concat(menuPanelUid++);\n    }\n    /** Position of the menu in the X axis. */\n\n\n    _createClass(_MatMenuBase, [{\n      key: \"xPosition\",\n      get: function get() {\n        return this._xPosition;\n      },\n      set: function set(value) {\n        if (value !== 'before' && value !== 'after' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatMenuInvalidPositionX();\n        }\n\n        this._xPosition = value;\n        this.setPositionClasses();\n      }\n      /** Position of the menu in the Y axis. */\n\n    }, {\n      key: \"yPosition\",\n      get: function get() {\n        return this._yPosition;\n      },\n      set: function set(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatMenuInvalidPositionY();\n        }\n\n        this._yPosition = value;\n        this.setPositionClasses();\n      }\n      /** Whether the menu should overlap its trigger. */\n\n    }, {\n      key: \"overlapTrigger\",\n      get: function get() {\n        return this._overlapTrigger;\n      },\n      set: function set(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n      }\n      /** Whether the menu has a backdrop. */\n\n    }, {\n      key: \"hasBackdrop\",\n      get: function get() {\n        return this._hasBackdrop;\n      },\n      set: function set(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n      }\n      /**\n       * This method takes classes set on the host mat-menu element and applies them on the\n       * menu template that displays in the overlay container.  Otherwise, it's difficult\n       * to style the containing menu from outside the component.\n       * @param classes list of class names\n       */\n\n    }, {\n      key: \"panelClass\",\n      set: function set(classes) {\n        var _this2 = this;\n\n        var previousPanelClass = this._previousPanelClass;\n\n        if (previousPanelClass && previousPanelClass.length) {\n          previousPanelClass.split(' ').forEach(function (className) {\n            _this2._classList[className] = false;\n          });\n        }\n\n        this._previousPanelClass = classes;\n\n        if (classes && classes.length) {\n          classes.split(' ').forEach(function (className) {\n            _this2._classList[className] = true;\n          });\n          this._elementRef.nativeElement.className = '';\n        }\n      }\n      /**\n       * This method takes classes set on the host mat-menu element and applies them on the\n       * menu template that displays in the overlay container.  Otherwise, it's difficult\n       * to style the containing menu from outside the component.\n       * @deprecated Use `panelClass` instead.\n       * @breaking-change 8.0.0\n       */\n\n    }, {\n      key: \"classList\",\n      get: function get() {\n        return this.panelClass;\n      },\n      set: function set(classes) {\n        this.panelClass = classes;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.setPositionClasses();\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this3 = this;\n\n        this._updateDirectDescendants();\n\n        this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead().withHomeAndEnd();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(function () {\n          return _this3.closed.emit('tab');\n        }); // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n\n        this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(function (items) {\n          return merge.apply(void 0, _toConsumableArray(items.map(function (item) {\n            return item._focused;\n          })));\n        })).subscribe(function (focusedItem) {\n          return _this3._keyManager.updateActiveItem(focusedItem);\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._directDescendantItems.destroy();\n\n        this._tabSubscription.unsubscribe();\n\n        this.closed.complete();\n      }\n      /** Stream that emits whenever the hovered menu item changes. */\n\n    }, {\n      key: \"_hovered\",\n      value: function _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        var itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(function (items) {\n          return merge.apply(void 0, _toConsumableArray(items.map(function (item) {\n            return item._hovered;\n          })));\n        }));\n      }\n      /*\n       * Registers a menu item with the menu.\n       * @docs-private\n       * @deprecated No longer being used. To be removed.\n       * @breaking-change 9.0.0\n       */\n\n    }, {\n      key: \"addItem\",\n      value: function addItem(_item) {}\n      /**\n       * Removes an item from the menu.\n       * @docs-private\n       * @deprecated No longer being used. To be removed.\n       * @breaking-change 9.0.0\n       */\n\n    }, {\n      key: \"removeItem\",\n      value: function removeItem(_item) {}\n      /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        var keyCode = event.keyCode;\n        var manager = this._keyManager;\n\n        switch (keyCode) {\n          case ESCAPE:\n            if (!hasModifierKey(event)) {\n              event.preventDefault();\n              this.closed.emit('keydown');\n            }\n\n            break;\n\n          case LEFT_ARROW:\n            if (this.parentMenu && this.direction === 'ltr') {\n              this.closed.emit('keydown');\n            }\n\n            break;\n\n          case RIGHT_ARROW:\n            if (this.parentMenu && this.direction === 'rtl') {\n              this.closed.emit('keydown');\n            }\n\n            break;\n\n          default:\n            if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n              manager.setFocusOrigin('keyboard');\n            }\n\n            manager.onKeydown(event);\n        }\n      }\n      /**\n       * Focus the first item in the menu.\n       * @param origin Action from which the focus originated. Used to set the correct styling.\n       */\n\n    }, {\n      key: \"focusFirstItem\",\n      value: function focusFirstItem() {\n        var _this4 = this;\n\n        var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';\n\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n          this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n            return _this4._focusFirstItem(origin);\n          });\n        } else {\n          this._focusFirstItem(origin);\n        }\n      }\n      /**\n       * Actual implementation that focuses the first item. Needs to be separated\n       * out so we don't repeat the same logic in the public `focusFirstItem` method.\n       */\n\n    }, {\n      key: \"_focusFirstItem\",\n      value: function _focusFirstItem(origin) {\n        var manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive(); // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n\n        if (!manager.activeItem && this._directDescendantItems.length) {\n          var element = this._directDescendantItems.first._getHostElement().parentElement; // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n          // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n          // because the panel is inside an `ng-template`. We work around it by starting from one of\n          // the items and walking up the DOM.\n\n\n          while (element) {\n            if (element.getAttribute('role') === 'menu') {\n              element.focus();\n              break;\n            } else {\n              element = element.parentElement;\n            }\n          }\n        }\n      }\n      /**\n       * Resets the active item in the menu. This is used when the menu is opened, allowing\n       * the user to start from the first option when pressing the down arrow.\n       */\n\n    }, {\n      key: \"resetActiveItem\",\n      value: function resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n      }\n      /**\n       * Sets the menu panel elevation.\n       * @param depth Number of parent menus that come before the menu.\n       */\n\n    }, {\n      key: \"setElevation\",\n      value: function setElevation(depth) {\n        var _this5 = this;\n\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        var elevation = Math.min(this._baseElevation + depth, 24);\n        var newElevation = \"\".concat(this._elevationPrefix).concat(elevation);\n        var customElevation = Object.keys(this._classList).find(function (className) {\n          return className.startsWith(_this5._elevationPrefix);\n        });\n\n        if (!customElevation || customElevation === this._previousElevation) {\n          if (this._previousElevation) {\n            this._classList[this._previousElevation] = false;\n          }\n\n          this._classList[newElevation] = true;\n          this._previousElevation = newElevation;\n        }\n      }\n      /**\n       * Adds classes to the menu panel based on its position. Can be used by\n       * consumers to add specific styling based on the position.\n       * @param posX Position of the menu along the x axis.\n       * @param posY Position of the menu along the y axis.\n       * @docs-private\n       */\n\n    }, {\n      key: \"setPositionClasses\",\n      value: function setPositionClasses() {\n        var posX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.xPosition;\n        var posY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.yPosition;\n        var classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n      }\n      /** Starts the enter animation. */\n\n    }, {\n      key: \"_startAnimation\",\n      value: function _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n      }\n      /** Resets the panel animation to its initial state. */\n\n    }, {\n      key: \"_resetAnimation\",\n      value: function _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n      }\n      /** Callback that is invoked when the panel animation completes. */\n\n    }, {\n      key: \"_onAnimationDone\",\n      value: function _onAnimationDone(event) {\n        this._animationDone.next(event);\n\n        this._isAnimating = false;\n      }\n    }, {\n      key: \"_onAnimationStart\",\n      value: function _onAnimationStart(event) {\n        this._isAnimating = true; // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n          event.element.scrollTop = 0;\n        }\n      }\n      /**\n       * Sets up a stream that will keep track of any newly-added menu items and will update the list\n       * of direct descendants. We collect the descendants this way, because `_allItems` can include\n       * items that are part of child menus, and using a custom way of registering items is unreliable\n       * when it comes to maintaining the item order.\n       */\n\n    }, {\n      key: \"_updateDirectDescendants\",\n      value: function _updateDirectDescendants() {\n        var _this6 = this;\n\n        this._allItems.changes.pipe(startWith(this._allItems)).subscribe(function (items) {\n          _this6._directDescendantItems.reset(items.filter(function (item) {\n            return item._parentMenu === _this6;\n          }));\n\n          _this6._directDescendantItems.notifyOnChanges();\n        });\n      }\n    }]);\n\n    return _MatMenuBase;\n  }();\n\n  _MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) {\n    return new (t || _MatMenuBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n  };\n\n  _MatMenuBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatMenuBase,\n    contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_MENU_CONTENT, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allItems = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    viewQuery: function _MatMenuBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n      }\n    },\n    inputs: {\n      backdropClass: \"backdropClass\",\n      xPosition: \"xPosition\",\n      yPosition: \"yPosition\",\n      overlapTrigger: \"overlapTrigger\",\n      hasBackdrop: \"hasBackdrop\",\n      panelClass: [\"class\", \"panelClass\"],\n      classList: \"classList\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n    },\n    outputs: {\n      closed: \"closed\",\n      close: \"close\"\n    }\n  });\n  return _MatMenuBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-public MatMenu */\n\n\nvar MatMenu = /*#__PURE__*/(function () {\n  var MatMenu = /*#__PURE__*/function (_MatMenuBase2) {\n    _inherits(MatMenu, _MatMenuBase2);\n\n    var _super2 = _createSuper(MatMenu);\n\n    function MatMenu(elementRef, ngZone, defaultOptions) {\n      var _this7;\n\n      _classCallCheck(this, MatMenu);\n\n      _this7 = _super2.call(this, elementRef, ngZone, defaultOptions);\n      _this7._elevationPrefix = 'mat-elevation-z';\n      _this7._baseElevation = 4;\n      return _this7;\n    }\n\n    return _createClass(MatMenu);\n  }(_MatMenuBase);\n\n  MatMenu.ɵfac = function MatMenu_Factory(t) {\n    return new (t || MatMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n  };\n\n  MatMenu.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatMenu,\n    selectors: [[\"mat-menu\"]],\n    hostVars: 3,\n    hostBindings: function MatMenu_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n      }\n    },\n    exportAs: [\"matMenu\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_MENU_PANEL,\n      useExisting: MatMenu\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]],\n    template: function MatMenu_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n      }\n    },\n    directives: [ɵngcc3.NgClass],\n    styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n    },\n    changeDetection: 0\n  });\n  return MatMenu;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that determines the scroll handling while the menu is open. */\n\n\nvar MAT_MENU_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/** Default top padding of the menu panel. */\n\nvar MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\n\nvar passiveEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n}); // TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Directive applied to an element that should trigger a `mat-menu`. */\n\nvar MatMenuTrigger = /*#__PURE__*/(function () {\n  var MatMenuTrigger = /*#__PURE__*/function () {\n    function MatMenuTrigger(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n    // @breaking-change 8.0.0\n    _focusMonitor) {\n      var _this8 = this;\n\n      _classCallCheck(this, MatMenuTrigger);\n\n      this._overlay = _overlay;\n      this._element = _element;\n      this._viewContainerRef = _viewContainerRef;\n      this._menuItemInstance = _menuItemInstance;\n      this._dir = _dir;\n      this._focusMonitor = _focusMonitor;\n      this._overlayRef = null;\n      this._menuOpen = false;\n      this._closingActionsSubscription = Subscription.EMPTY;\n      this._hoverSubscription = Subscription.EMPTY;\n      this._menuCloseSubscription = Subscription.EMPTY;\n      /**\n       * Handles touch start events on the trigger.\n       * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n       */\n\n      this._handleTouchStart = function (event) {\n        if (!isFakeTouchstartFromScreenReader(event)) {\n          _this8._openedBy = 'touch';\n        }\n      }; // Tracking input type is necessary so it's possible to only auto-focus\n      // the first item of the list when the menu is opened via the keyboard\n\n\n      this._openedBy = undefined;\n      /**\n       * Whether focus should be restored when the menu is closed.\n       * Note that disabling this option can have accessibility implications\n       * and it's up to you to manage focus, if you decide to turn it off.\n       */\n\n      this.restoreFocus = true;\n      /** Event emitted when the associated menu is opened. */\n\n      this.menuOpened = new EventEmitter();\n      /**\n       * Event emitted when the associated menu is opened.\n       * @deprecated Switch to `menuOpened` instead\n       * @breaking-change 8.0.0\n       */\n      // tslint:disable-next-line:no-output-on-prefix\n\n      this.onMenuOpen = this.menuOpened;\n      /** Event emitted when the associated menu is closed. */\n\n      this.menuClosed = new EventEmitter();\n      /**\n       * Event emitted when the associated menu is closed.\n       * @deprecated Switch to `menuClosed` instead\n       * @breaking-change 8.0.0\n       */\n      // tslint:disable-next-line:no-output-on-prefix\n\n      this.onMenuClose = this.menuClosed;\n      this._scrollStrategy = scrollStrategy;\n      this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n\n      _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n      if (_menuItemInstance) {\n        _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n      }\n    }\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n\n\n    _createClass(MatMenuTrigger, [{\n      key: \"_deprecatedMatMenuTriggerFor\",\n      get: function get() {\n        return this.menu;\n      },\n      set: function set(v) {\n        this.menu = v;\n      }\n      /** References the menu instance that the trigger is associated with. */\n\n    }, {\n      key: \"menu\",\n      get: function get() {\n        return this._menu;\n      },\n      set: function set(menu) {\n        var _this9 = this;\n\n        if (menu === this._menu) {\n          return;\n        }\n\n        this._menu = menu;\n\n        this._menuCloseSubscription.unsubscribe();\n\n        if (menu) {\n          if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuRecursiveError();\n          }\n\n          this._menuCloseSubscription = menu.close.subscribe(function (reason) {\n            _this9._destroyMenu(reason); // If a click closed the menu, we should close the entire chain of nested menus.\n\n\n            if ((reason === 'click' || reason === 'tab') && _this9._parentMaterialMenu) {\n              _this9._parentMaterialMenu.closed.emit(reason);\n            }\n          });\n        }\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        this._checkMenu();\n\n        this._handleHover();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._overlayRef) {\n          this._overlayRef.dispose();\n\n          this._overlayRef = null;\n        }\n\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n        this._menuCloseSubscription.unsubscribe();\n\n        this._closingActionsSubscription.unsubscribe();\n\n        this._hoverSubscription.unsubscribe();\n      }\n      /** Whether the menu is open. */\n\n    }, {\n      key: \"menuOpen\",\n      get: function get() {\n        return this._menuOpen;\n      }\n      /** The text direction of the containing app. */\n\n    }, {\n      key: \"dir\",\n      get: function get() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n      }\n      /** Whether the menu triggers a sub-menu or a top-level one. */\n\n    }, {\n      key: \"triggersSubmenu\",\n      value: function triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu);\n      }\n      /** Toggles the menu between the open and closed states. */\n\n    }, {\n      key: \"toggleMenu\",\n      value: function toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n      }\n      /** Opens the menu. */\n\n    }, {\n      key: \"openMenu\",\n      value: function openMenu() {\n        var _this10 = this;\n\n        if (this._menuOpen) {\n          return;\n        }\n\n        this._checkMenu();\n\n        var overlayRef = this._createOverlay();\n\n        var overlayConfig = overlayRef.getConfig();\n\n        this._setPosition(overlayConfig.positionStrategy);\n\n        overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n\n        if (this.menu.lazyContent) {\n          this.menu.lazyContent.attach(this.menuData);\n        }\n\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(function () {\n          return _this10.closeMenu();\n        });\n\n        this._initMenu();\n\n        if (this.menu instanceof _MatMenuBase) {\n          this.menu._startAnimation();\n        }\n      }\n      /** Closes the menu. */\n\n    }, {\n      key: \"closeMenu\",\n      value: function closeMenu() {\n        this.menu.close.emit();\n      }\n      /**\n       * Focuses the menu trigger.\n       * @param origin Source of the menu trigger's focus.\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus(origin, options) {\n        if (this._focusMonitor && origin) {\n          this._focusMonitor.focusVia(this._element, origin, options);\n        } else {\n          this._element.nativeElement.focus(options);\n        }\n      }\n      /**\n       * Updates the position of the menu to ensure that it fits all options within the viewport.\n       */\n\n    }, {\n      key: \"updatePosition\",\n      value: function updatePosition() {\n        var _a;\n\n        (_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.updatePosition();\n      }\n      /** Closes the menu and does the necessary cleanup. */\n\n    }, {\n      key: \"_destroyMenu\",\n      value: function _destroyMenu(reason) {\n        var _this11 = this;\n\n        if (!this._overlayRef || !this.menuOpen) {\n          return;\n        }\n\n        var menu = this.menu;\n\n        this._closingActionsSubscription.unsubscribe();\n\n        this._overlayRef.detach(); // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n\n\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n          this.focus(this._openedBy);\n        }\n\n        this._openedBy = undefined;\n\n        if (menu instanceof _MatMenuBase) {\n          menu._resetAnimation();\n\n          if (menu.lazyContent) {\n            // Wait for the exit animation to finish before detaching the content.\n            menu._animationDone.pipe(filter(function (event) {\n              return event.toState === 'void';\n            }), take(1), // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)).subscribe({\n              next: function next() {\n                return menu.lazyContent.detach();\n              },\n              // No matter whether the content got re-attached, reset the menu.\n              complete: function complete() {\n                return _this11._setIsMenuOpen(false);\n              }\n            });\n          } else {\n            this._setIsMenuOpen(false);\n          }\n        } else {\n          this._setIsMenuOpen(false);\n\n          if (menu.lazyContent) {\n            menu.lazyContent.detach();\n          }\n        }\n      }\n      /**\n       * This method sets the menu state to open and focuses the first item if\n       * the menu was opened via the keyboard.\n       */\n\n    }, {\n      key: \"_initMenu\",\n      value: function _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        this.menu.direction = this.dir;\n\n        this._setMenuElevation();\n\n        this.menu.focusFirstItem(this._openedBy || 'program');\n\n        this._setIsMenuOpen(true);\n      }\n      /** Updates the menu elevation based on the amount of parent menus that it has. */\n\n    }, {\n      key: \"_setMenuElevation\",\n      value: function _setMenuElevation() {\n        if (this.menu.setElevation) {\n          var depth = 0;\n          var parentMenu = this.menu.parentMenu;\n\n          while (parentMenu) {\n            depth++;\n            parentMenu = parentMenu.parentMenu;\n          }\n\n          this.menu.setElevation(depth);\n        }\n      } // set state rather than toggle to support triggers sharing a menu\n\n    }, {\n      key: \"_setIsMenuOpen\",\n      value: function _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n        if (this.triggersSubmenu()) {\n          this._menuItemInstance._highlighted = isOpen;\n        }\n      }\n      /**\n       * This method checks that a valid instance of MatMenu has been passed into\n       * matMenuTriggerFor. If not, an exception is thrown.\n       */\n\n    }, {\n      key: \"_checkMenu\",\n      value: function _checkMenu() {\n        if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatMenuMissingError();\n        }\n      }\n      /**\n       * This method creates the overlay from the provided menu's template and saves its\n       * OverlayRef so that it can be attached to the DOM when openMenu is called.\n       */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay() {\n        if (!this._overlayRef) {\n          var config = this._getOverlayConfig();\n\n          this._subscribeToPositions(config.positionStrategy);\n\n          this._overlayRef = this._overlay.create(config); // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n          // Ideally we'd also have our keyboard event logic in here, however doing so will\n          // break anybody that may have implemented the `MatMenuPanel` themselves.\n\n          this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n      }\n      /**\n       * This method builds the configuration object needed to create the overlay, the OverlayState.\n       * @returns OverlayConfig\n       */\n\n    }, {\n      key: \"_getOverlayConfig\",\n      value: function _getOverlayConfig() {\n        return new OverlayConfig({\n          positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withGrowAfterOpen().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n          backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n          panelClass: this.menu.overlayPanelClass,\n          scrollStrategy: this._scrollStrategy(),\n          direction: this._dir\n        });\n      }\n      /**\n       * Listens to changes in the position of the overlay and sets the correct classes\n       * on the menu based on the new position. This ensures the animation origin is always\n       * correct, even if a fallback position is used for the overlay.\n       */\n\n    }, {\n      key: \"_subscribeToPositions\",\n      value: function _subscribeToPositions(position) {\n        var _this12 = this;\n\n        if (this.menu.setPositionClasses) {\n          position.positionChanges.subscribe(function (change) {\n            var posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n            var posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n            _this12.menu.setPositionClasses(posX, posY);\n          });\n        }\n      }\n      /**\n       * Sets the appropriate positions on a position strategy\n       * so the overlay connects with the trigger correctly.\n       * @param positionStrategy Strategy whose position to update.\n       */\n\n    }, {\n      key: \"_setPosition\",\n      value: function _setPosition(positionStrategy) {\n        var _ref = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'],\n            _ref2 = _slicedToArray(_ref, 2),\n            originX = _ref2[0],\n            originFallbackX = _ref2[1];\n\n        var _ref3 = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'],\n            _ref4 = _slicedToArray(_ref3, 2),\n            overlayY = _ref4[0],\n            overlayFallbackY = _ref4[1];\n\n        var originY = overlayY,\n            originFallbackY = overlayFallbackY;\n        var overlayX = originX,\n            overlayFallbackX = originFallbackX;\n        var offsetY = 0;\n\n        if (this.triggersSubmenu()) {\n          // When the menu is a sub-menu, it should always align itself\n          // to the edges of the trigger, instead of overlapping it.\n          overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n          originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n          offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        } else if (!this.menu.overlapTrigger) {\n          originY = overlayY === 'top' ? 'bottom' : 'top';\n          originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n\n        positionStrategy.withPositions([{\n          originX: originX,\n          originY: originY,\n          overlayX: overlayX,\n          overlayY: overlayY,\n          offsetY: offsetY\n        }, {\n          originX: originFallbackX,\n          originY: originY,\n          overlayX: overlayFallbackX,\n          overlayY: overlayY,\n          offsetY: offsetY\n        }, {\n          originX: originX,\n          originY: originFallbackY,\n          overlayX: overlayX,\n          overlayY: overlayFallbackY,\n          offsetY: -offsetY\n        }, {\n          originX: originFallbackX,\n          originY: originFallbackY,\n          overlayX: overlayFallbackX,\n          overlayY: overlayFallbackY,\n          offsetY: -offsetY\n        }]);\n      }\n      /** Returns a stream that emits whenever an action that should close the menu occurs. */\n\n    }, {\n      key: \"_menuClosingActions\",\n      value: function _menuClosingActions() {\n        var _this13 = this;\n\n        var backdrop = this._overlayRef.backdropClick();\n\n        var detachments = this._overlayRef.detachments();\n\n        var parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        var hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(function (active) {\n          return active !== _this13._menuItemInstance;\n        }), filter(function () {\n          return _this13._menuOpen;\n        })) : of();\n        return merge(backdrop, parentClose, hover, detachments);\n      }\n      /** Handles mouse presses on the trigger. */\n\n    }, {\n      key: \"_handleMousedown\",\n      value: function _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n          // Since right or middle button clicks won't trigger the `click` event,\n          // we shouldn't consider the menu as opened by mouse in those cases.\n          this._openedBy = event.button === 0 ? 'mouse' : undefined; // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n          // we should prevent focus from moving onto it via click to avoid the\n          // highlight from lingering on the menu item.\n\n          if (this.triggersSubmenu()) {\n            event.preventDefault();\n          }\n        }\n      }\n      /** Handles key presses on the trigger. */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        var keyCode = event.keyCode; // Pressing enter on the trigger will trigger the click handler later.\n\n        if (keyCode === ENTER || keyCode === SPACE) {\n          this._openedBy = 'keyboard';\n        }\n\n        if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n          this._openedBy = 'keyboard';\n          this.openMenu();\n        }\n      }\n      /** Handles click events on the trigger. */\n\n    }, {\n      key: \"_handleClick\",\n      value: function _handleClick(event) {\n        if (this.triggersSubmenu()) {\n          // Stop event propagation to avoid closing the parent menu.\n          event.stopPropagation();\n          this.openMenu();\n        } else {\n          this.toggleMenu();\n        }\n      }\n      /** Handles the cases where the user hovers over the trigger. */\n\n    }, {\n      key: \"_handleHover\",\n      value: function _handleHover() {\n        var _this14 = this;\n\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n          return;\n        }\n\n        this._hoverSubscription = this._parentMaterialMenu._hovered() // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n        .pipe(filter(function (active) {\n          return active === _this14._menuItemInstance && !active.disabled;\n        }), delay(0, asapScheduler)).subscribe(function () {\n          _this14._openedBy = 'mouse'; // If the same menu is used between multiple triggers, it might still be animating\n          // while the new trigger tries to re-open it. Wait for the animation to finish\n          // before doing so. Also interrupt if the user moves to another item.\n\n          if (_this14.menu instanceof _MatMenuBase && _this14.menu._isAnimating) {\n            // We need the `delay(0)` here in order to avoid\n            // 'changed after checked' errors in some cases. See #12194.\n            _this14.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(_this14._parentMaterialMenu._hovered())).subscribe(function () {\n              return _this14.openMenu();\n            });\n          } else {\n            _this14.openMenu();\n          }\n        });\n      }\n      /** Gets the portal that should be attached to the overlay. */\n\n    }, {\n      key: \"_getPortal\",\n      value: function _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n          this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n\n        return this._portal;\n      }\n    }]);\n\n    return MatMenuTrigger;\n  }();\n\n  MatMenuTrigger.ɵfac = function MatMenuTrigger_Factory(t) {\n    return new (t || MatMenuTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), ɵngcc0.ɵɵdirectiveInject(MatMenuItem, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n  };\n\n  MatMenuTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatMenuTrigger,\n    selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n    hostAttrs: [\"aria-haspopup\", \"true\", 1, \"mat-menu-trigger\"],\n    hostVars: 2,\n    hostBindings: function MatMenuTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MatMenuTrigger_mousedown_HostBindingHandler($event) {\n          return ctx._handleMousedown($event);\n        })(\"keydown\", function MatMenuTrigger_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"click\", function MatMenuTrigger_click_HostBindingHandler($event) {\n          return ctx._handleClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.menuOpen || null)(\"aria-controls\", ctx.menuOpen ? ctx.menu.panelId : null);\n      }\n    },\n    inputs: {\n      restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"],\n      _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n      menu: [\"matMenuTriggerFor\", \"menu\"],\n      menuData: [\"matMenuTriggerData\", \"menuData\"]\n    },\n    outputs: {\n      menuOpened: \"menuOpened\",\n      onMenuOpen: \"onMenuOpen\",\n      menuClosed: \"menuClosed\",\n      onMenuClose: \"onMenuClose\"\n    },\n    exportAs: [\"matMenuTrigger\"]\n  });\n  return MatMenuTrigger;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n\n\nvar _MatMenuDirectivesModule = /*#__PURE__*/(function () {\n  var _MatMenuDirectivesModule = /*#__PURE__*/_createClass(function _MatMenuDirectivesModule() {\n    _classCallCheck(this, _MatMenuDirectivesModule);\n  });\n\n  _MatMenuDirectivesModule.ɵfac = function _MatMenuDirectivesModule_Factory(t) {\n    return new (t || _MatMenuDirectivesModule)();\n  };\n\n  _MatMenuDirectivesModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: _MatMenuDirectivesModule\n  });\n  _MatMenuDirectivesModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [MatCommonModule]\n  });\n  return _MatMenuDirectivesModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatMenuDirectivesModule, {\n    declarations: function declarations() {\n      return [MatMenuTrigger, MatMenuContent];\n    },\n    exports: function exports() {\n      return [MatMenuTrigger, MatMenuContent, MatCommonModule];\n    }\n  });\n})();\n\nvar MatMenuModule = /*#__PURE__*/(function () {\n  var MatMenuModule = /*#__PURE__*/_createClass(function MatMenuModule() {\n    _classCallCheck(this, MatMenuModule);\n  });\n\n  MatMenuModule.ɵfac = function MatMenuModule_Factory(t) {\n    return new (t || MatMenuModule)();\n  };\n\n  MatMenuModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatMenuModule\n  });\n  MatMenuModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [[CommonModule, MatCommonModule, MatRippleModule, OverlayModule, _MatMenuDirectivesModule], CdkScrollableModule, MatCommonModule, _MatMenuDirectivesModule]\n  });\n  return MatMenuModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMenuModule, {\n    declarations: function declarations() {\n      return [MatMenu, MatMenuItem];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule, MatRippleModule, OverlayModule, _MatMenuDirectivesModule];\n    },\n    exports: function exports() {\n      return [CdkScrollableModule, MatCommonModule, MatMenu, MatMenuItem, _MatMenuDirectivesModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuDirectivesModule, fadeInItems, matMenuAnimations, transformMenu, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵangular_material_src_material_menu_menu_a, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵangular_material_src_material_menu_menu_b, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵangular_material_src_material_menu_menu_c };","map":{"version":3,"names":["FocusMonitor","FocusKeyManager","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","coerceBooleanProperty","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","LEFT_ARROW","ESCAPE","hasModifierKey","ENTER","SPACE","InjectionToken","Directive","TemplateRef","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","Inject","ChangeDetectorRef","Component","ChangeDetectionStrategy","ViewEncapsulation","ElementRef","Optional","Input","HostListener","QueryList","EventEmitter","NgZone","ContentChildren","ViewChild","ContentChild","Output","Self","NgModule","Subject","Subscription","merge","of","asapScheduler","startWith","switchMap","take","filter","takeUntil","delay","trigger","state","style","transition","animate","TemplatePortal","DomPortalOutlet","DOCUMENT","CommonModule","mixinDisableRipple","mixinDisabled","MatCommonModule","MatRippleModule","Directionality","Overlay","OverlayConfig","OverlayModule","normalizePassiveListenerOptions","CdkScrollableModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","_c1","MatMenu_ng_template_0_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatMenu_ng_template_0_Template_div_keydown_0_listener","$event","ɵɵrestoreView","ctx_r1","ɵɵnextContext","_handleKeydown","MatMenu_ng_template_0_Template_div_click_0_listener","ctx_r3","closed","emit","MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener","ctx_r4","_onAnimationStart","MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener","ctx_r5","_onAnimationDone","ɵɵprojection","ɵɵelementEnd","ctx_r0","ɵɵproperty","panelId","_classList","_panelAnimationState","ɵɵattribute","ariaLabel","ariaLabelledby","ariaDescribedby","matMenuAnimations","transformMenu","opacity","transform","fadeInItems","MAT_MENU_CONTENT","MatMenuContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_changeDetectorRef","_attached","context","_portal","detach","_outlet","createElement","element","elementRef","nativeElement","parentNode","insertBefore","outletElement","markForCheck","attach","next","isAttached","dispose","ɵfac","MatMenuContent_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","features","ɵɵProvidersFeature","provide","useExisting","ngDevMode","throwMatMenuMissingError","Error","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","throwMatMenuRecursiveError","MAT_MENU_PANEL","_MatMenuItemBase","MatMenuItem","_elementRef","_focusMonitor","_parentMenu","role","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","origin","options","focusVia","_getHostElement","focus","monitor","stopMonitoring","removeItem","complete","disabled","event","preventDefault","stopPropagation","_a","_b","clone","cloneNode","icons","querySelectorAll","i","length","icon","removeChild","textContent","trim","MatMenuItem_Factory","ɵcmp","ɵɵdefineComponent","hostAttrs","hostVars","hostBindings","MatMenuItem_HostBindings","MatMenuItem_click_HostBindingHandler","_checkDisabled","MatMenuItem_mouseenter_HostBindingHandler","_handleMouseEnter","_getTabIndex","toString","ɵɵclassProp","inputs","disableRipple","exportAs","ɵɵInheritDefinitionFeature","attrs","ngContentSelectors","decls","vars","consts","template","MatMenuItem_Template","ɵɵprojectionDef","ɵɵelement","ɵɵadvance","directives","MatRipple","encapsulation","changeDetection","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","menuPanelUid","_MatMenuBase","_ngZone","_defaultOptions","_xPosition","_yPosition","_directDescendantItems","_tabSubscription","EMPTY","_animationDone","overlayPanelClass","_overlapTrigger","_hasBackdrop","hasBackdrop","close","value","setPositionClasses","classes","previousPanelClass","_previousPanelClass","split","forEach","className","panelClass","_updateDirectDescendants","_keyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","changes","pipe","items","map","item","focusedItem","updateActiveItem","destroy","unsubscribe","itemChanges","_item","keyCode","manager","parentMenu","direction","setFocusOrigin","onKeydown","lazyContent","onStable","_focusFirstItem","setFirstItemActive","activeItem","first","parentElement","getAttribute","setActiveItem","depth","elevation","Math","min","_baseElevation","newElevation","_elevationPrefix","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_isAnimating","toState","activeItemIndex","scrollTop","_allItems","reset","notifyOnChanges","_MatMenuBase_Factory","contentQueries","_MatMenuBase_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","_MatMenuBase_Query","ɵɵviewQuery","templateRef","classList","outputs","MatMenu","ngZone","defaultOptions","MatMenu_Factory","MatMenu_HostBindings","MatMenu_Template","ɵɵtemplate","NgClass","styles","data","animation","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MENU_PANEL_TOP_PADDING","passiveEventListenerOptions","passive","MatMenuTrigger","_overlay","_element","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","undefined","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","_parentMaterialMenu","addEventListener","triggersSubmenu","menu","v","_menu","reason","_destroyMenu","_checkMenu","_handleHover","removeEventListener","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","_setPosition","positionStrategy","_getPortal","menuData","_menuClosingActions","_initMenu","_startAnimation","updatePosition","menuOpen","_resetAnimation","_setIsMenuOpen","dir","_setMenuElevation","focusFirstItem","setElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withLockedPosition","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","button","toggleMenu","MatMenuTrigger_Factory","MatMenuTrigger_HostBindings","MatMenuTrigger_mousedown_HostBindingHandler","_handleMousedown","MatMenuTrigger_keydown_HostBindingHandler","MatMenuTrigger_click_HostBindingHandler","_handleClick","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","_MatMenuDirectivesModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","MatMenuModule","MatMenuModule_Factory","ɵangular_material_src_material_menu_menu_a","ɵangular_material_src_material_menu_menu_b","ɵangular_material_src_material_menu_menu_c"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/menu.js"],"sourcesContent":["import { FocusMonitor, FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, ChangeDetectorRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Input, HostListener, QueryList, EventEmitter, NgZone, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\n\nconst _c0 = [\"mat-menu-item\", \"\"];\nconst _c1 = [\"*\"];\nfunction MatMenu_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1._handleKeydown($event); })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.closed.emit(\"click\"); })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4._onAnimationStart($event); })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5._onAnimationDone($event); });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n} }\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)'\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\nMatMenuContent.ɵfac = function MatMenuContent_Factory(t) { return new (t || MatMenuContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatMenuContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatMenuContent, selectors: [[\"ng-template\", \"matMenuContent\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }])] });\nMatMenuContent.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef },\n    { type: Injector },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: ChangeDetectorRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matMenuContent]',\n                providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {\n}));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, \n    /**\n     * @deprecated `_document` parameter is no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _focusMonitor, _parentMenu) {\n        // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n        super();\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        if (_parentMenu && _parentMenu.addItem) {\n            _parentMenu.addItem(this);\n        }\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        var _a, _b;\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            const icon = icons[i];\n            (_a = icon.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(icon);\n        }\n        return ((_b = clone.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || '';\n    }\n}\nMatMenuItem.ɵfac = function MatMenuItem_Factory(t) { return new (t || MatMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8)); };\nMatMenuItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatMenuItem, selectors: [[\"\", \"mat-menu-item\", \"\"]], hostAttrs: [1, \"mat-focus-indicator\"], hostVars: 10, hostBindings: function MatMenuItem_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) { return ctx._checkDisabled($event); })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() { return ctx._handleMouseEnter(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"mat-menu-item\", true)(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, exportAs: [\"matMenuItem\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 2, vars: 2, consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"]], template: function MatMenuItem_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelement(1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n    } }, directives: [ɵngcc2.MatRipple], encapsulation: 2, changeDetection: 0 });\nMatMenuItem.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] }\n];\nMatMenuItem.propDecorators = {\n    role: [{ type: Input }],\n    _checkDisabled: [{ type: HostListener, args: ['click', ['$event'],] }],\n    _handleMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuItem, [{\n        type: Component,\n        args: [{\n                selector: '[mat-menu-item]',\n                exportAs: 'matMenuItem',\n                inputs: ['disabled', 'disableRipple'],\n                host: {\n                    '[attr.role]': 'role',\n                    '[class.mat-menu-item]': 'true',\n                    '[class.mat-menu-item-highlighted]': '_highlighted',\n                    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.disabled]': 'disabled || null',\n                    'class': 'mat-focus-indicator'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\"\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc1.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_PANEL]\n            }, {\n                type: Optional\n            }] }]; }, { role: [{\n            type: Input\n        }], \n    /** Prevents the default element actions if it is disabled. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _checkDisabled: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }], \n    /** Emits to the hover stream. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleMouseEnter: [{\n            type: HostListener,\n            args: ['mouseenter']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Subscription to tab events on the menu panel */\n        this._tabSubscription = Subscription.EMPTY;\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Class or list of classes to be added to the overlay panel. */\n        this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n        /** Class to be added to the backdrop element. */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /** Position of the menu in the X axis. */\n    get xPosition() { return this._xPosition; }\n    set xPosition(value) {\n        if (value !== 'before' && value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() { return this._yPosition; }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() { return this._overlapTrigger; }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() { return this.panelClass; }\n    set classList(classes) { this.panelClass = classes; }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n    }\n    ngOnDestroy() {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n        }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable\n                .pipe(take(1))\n                .subscribe(() => this._focusFirstItem(origin));\n        }\n        else {\n            this._focusFirstItem(origin);\n        }\n    }\n    /**\n     * Actual implementation that focuses the first item. Needs to be separated\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\n     */\n    _focusFirstItem(origin) {\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive();\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && this._directDescendantItems.length) {\n            let element = this._directDescendantItems.first._getHostElement().parentElement;\n            // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n            // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n            // because the panel is inside an `ng-template`. We work around it by starting from one of\n            // the items and walking up the DOM.\n            while (element) {\n                if (element.getAttribute('role') === 'menu') {\n                    element.focus();\n                    break;\n                }\n                else {\n                    element = element.parentElement;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n}\n_MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) { return new (t || _MatMenuBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS)); };\n_MatMenuBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatMenuBase, contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_MENU_CONTENT, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allItems = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n    } }, viewQuery: function _MatMenuBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    } }, inputs: { backdropClass: \"backdropClass\", xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { closed: \"closed\", close: \"close\" } });\n_MatMenuBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n_MatMenuBase.propDecorators = {\n    _allItems: [{ type: ContentChildren, args: [MatMenuItem, { descendants: true },] }],\n    backdropClass: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    xPosition: [{ type: Input }],\n    yPosition: [{ type: Input }],\n    templateRef: [{ type: ViewChild, args: [TemplateRef,] }],\n    items: [{ type: ContentChildren, args: [MatMenuItem, { descendants: false },] }],\n    lazyContent: [{ type: ContentChild, args: [MAT_MENU_CONTENT,] }],\n    overlapTrigger: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    panelClass: [{ type: Input, args: ['class',] }],\n    classList: [{ type: Input }],\n    closed: [{ type: Output }],\n    close: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatMenuBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_DEFAULT_OPTIONS]\n            }] }]; }, { backdropClass: [{\n            type: Input\n        }], closed: [{\n            type: Output\n        }], close: [{\n            type: Output\n        }], xPosition: [{\n            type: Input\n        }], yPosition: [{\n            type: Input\n        }], overlapTrigger: [{\n            type: Input\n        }], hasBackdrop: [{\n            type: Input\n        }], panelClass: [{\n            type: Input,\n            args: ['class']\n        }], classList: [{\n            type: Input\n        }], _allItems: [{\n            type: ContentChildren,\n            args: [MatMenuItem, { descendants: true }]\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], templateRef: [{\n            type: ViewChild,\n            args: [TemplateRef]\n        }], items: [{\n            type: ContentChildren,\n            args: [MatMenuItem, { descendants: false }]\n        }], lazyContent: [{\n            type: ContentChild,\n            args: [MAT_MENU_CONTENT]\n        }] }); })();\n/** @docs-public MatMenu */\nclass MatMenu extends _MatMenuBase {\n    constructor(elementRef, ngZone, defaultOptions) {\n        super(elementRef, ngZone, defaultOptions);\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 4;\n    }\n}\nMatMenu.ɵfac = function MatMenu_Factory(t) { return new (t || MatMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS)); };\nMatMenu.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatMenu, selectors: [[\"mat-menu\"]], hostVars: 3, hostBindings: function MatMenu_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n    } }, exportAs: [\"matMenu\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]], template: function MatMenu_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n    } }, directives: [ɵngcc3.NgClass], styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"], encapsulation: 2, data: { animation: [\n            matMenuAnimations.transformMenu,\n            matMenuAnimations.fadeInItems\n        ] }, changeDetection: 0 });\nMatMenu.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenu, [{\n        type: Component,\n        args: [{\n                selector: 'mat-menu',\n                template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matMenu',\n                host: {\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null'\n                },\n                animations: [\n                    matMenuAnimations.transformMenu,\n                    matMenuAnimations.fadeInItems\n                ],\n                providers: [\n                    { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n                ],\n                styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Default top padding of the menu panel. */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger {\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, \n    // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n    // @breaking-change 8.0.0\n    _focusMonitor) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n    }\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() { return this.menu; }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() { return this._menu; }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n    }\n    ngAfterContentInit() {\n        this._checkMenu();\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n        this._setPosition(overlayConfig.positionStrategy);\n        overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n            this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu();\n        if (this.menu instanceof _MatMenuBase) {\n            this.menu._startAnimation();\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        var _a;\n        (_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false)\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this.menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation() {\n        if (this.menu.setElevation) {\n            let depth = 0;\n            let parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._highlighted = isOpen;\n        }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    _checkMenu() {\n        if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuMissingError();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay() {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: this.menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(position) {\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                this.menu.setPositionClasses(posX, posY);\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(positionStrategy) {\n        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() && ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\nMatMenuTrigger.ɵfac = function MatMenuTrigger_Factory(t) { return new (t || MatMenuTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), ɵngcc0.ɵɵdirectiveInject(MatMenuItem, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\nMatMenuTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatMenuTrigger, selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]], hostAttrs: [\"aria-haspopup\", \"true\", 1, \"mat-menu-trigger\"], hostVars: 2, hostBindings: function MatMenuTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MatMenuTrigger_mousedown_HostBindingHandler($event) { return ctx._handleMousedown($event); })(\"keydown\", function MatMenuTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"click\", function MatMenuTrigger_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.menuOpen || null)(\"aria-controls\", ctx.menuOpen ? ctx.menu.panelId : null);\n    } }, inputs: { restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"], _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, exportAs: [\"matMenuTrigger\"] });\nMatMenuTrigger.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_SCROLL_STRATEGY,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] },\n    { type: MatMenuItem, decorators: [{ type: Optional }, { type: Self }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: FocusMonitor }\n];\nMatMenuTrigger.propDecorators = {\n    _deprecatedMatMenuTriggerFor: [{ type: Input, args: ['mat-menu-trigger-for',] }],\n    menu: [{ type: Input, args: ['matMenuTriggerFor',] }],\n    menuData: [{ type: Input, args: ['matMenuTriggerData',] }],\n    restoreFocus: [{ type: Input, args: ['matMenuTriggerRestoreFocus',] }],\n    menuOpened: [{ type: Output }],\n    onMenuOpen: [{ type: Output }],\n    menuClosed: [{ type: Output }],\n    onMenuClose: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                host: {\n                    'class': 'mat-menu-trigger',\n                    'aria-haspopup': 'true',\n                    '[attr.aria-expanded]': 'menuOpen || null',\n                    '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                    '(mousedown)': '_handleMousedown($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(click)': '_handleClick($event)'\n                },\n                exportAs: 'matMenuTrigger'\n            }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_SCROLL_STRATEGY]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_PANEL]\n            }, {\n                type: Optional\n            }] }, { type: MatMenuItem, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc1.FocusMonitor }]; }, { restoreFocus: [{\n            type: Input,\n            args: ['matMenuTriggerRestoreFocus']\n        }], menuOpened: [{\n            type: Output\n        }], onMenuOpen: [{\n            type: Output\n        }], menuClosed: [{\n            type: Output\n        }], onMenuClose: [{\n            type: Output\n        }], _deprecatedMatMenuTriggerFor: [{\n            type: Input,\n            args: ['mat-menu-trigger-for']\n        }], menu: [{\n            type: Input,\n            args: ['matMenuTriggerFor']\n        }], menuData: [{\n            type: Input,\n            args: ['matMenuTriggerData']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\nclass _MatMenuDirectivesModule {\n}\n_MatMenuDirectivesModule.ɵfac = function _MatMenuDirectivesModule_Factory(t) { return new (t || _MatMenuDirectivesModule)(); };\n_MatMenuDirectivesModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: _MatMenuDirectivesModule });\n_MatMenuDirectivesModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatMenuDirectivesModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n                declarations: [\n                    MatMenuTrigger,\n                    MatMenuContent,\n                ],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatMenuDirectivesModule, { declarations: function () { return [MatMenuTrigger, MatMenuContent]; }, exports: function () { return [MatMenuTrigger, MatMenuContent, MatCommonModule]; } }); })();\nclass MatMenuModule {\n}\nMatMenuModule.ɵfac = function MatMenuModule_Factory(t) { return new (t || MatMenuModule)(); };\nMatMenuModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatMenuModule });\nMatMenuModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            CommonModule,\n            MatCommonModule,\n            MatRippleModule,\n            OverlayModule,\n            _MatMenuDirectivesModule,\n        ], CdkScrollableModule, MatCommonModule, _MatMenuDirectivesModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    MatRippleModule,\n                    OverlayModule,\n                    _MatMenuDirectivesModule,\n                ],\n                exports: [CdkScrollableModule, MatCommonModule, MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n                declarations: [MatMenu, MatMenuItem],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMenuModule, { declarations: function () { return [MatMenu, MatMenuItem]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        MatRippleModule,\n        OverlayModule, _MatMenuDirectivesModule]; }, exports: function () { return [CdkScrollableModule, MatCommonModule, MatMenu, MatMenuItem, _MatMenuDirectivesModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuDirectivesModule, fadeInItems, matMenuAnimations, transformMenu, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵangular_material_src_material_menu_menu_a, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵangular_material_src_material_menu_menu_b, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵangular_material_src_material_menu_menu_c };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}