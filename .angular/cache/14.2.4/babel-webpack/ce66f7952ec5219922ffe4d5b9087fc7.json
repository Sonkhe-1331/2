{"ast":null,"code":"import _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Options to pass to the animationstart listener. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar listenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n\nvar AutofillMonitor = /*#__PURE__*/(function () {\n  var AutofillMonitor = /*#__PURE__*/function () {\n    function AutofillMonitor(_platform, _ngZone) {\n      _classCallCheck(this, AutofillMonitor);\n\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._monitoredElements = new Map();\n    }\n\n    _createClass(AutofillMonitor, [{\n      key: \"monitor\",\n      value: function monitor(elementOrRef) {\n        var _this = this;\n\n        if (!this._platform.isBrowser) {\n          return EMPTY;\n        }\n\n        var element = coerceElement(elementOrRef);\n\n        var info = this._monitoredElements.get(element);\n\n        if (info) {\n          return info.subject;\n        }\n\n        var result = new Subject();\n        var cssClass = 'cdk-text-field-autofilled';\n\n        var listener = function listener(event) {\n          // Animation events fire on initial element render, we check for the presence of the autofill\n          // CSS class to make sure this is a real change in state, not just the initial render before\n          // we fire off events.\n          if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n            element.classList.add(cssClass);\n\n            _this._ngZone.run(function () {\n              return result.next({\n                target: event.target,\n                isAutofilled: true\n              });\n            });\n          } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n            element.classList.remove(cssClass);\n\n            _this._ngZone.run(function () {\n              return result.next({\n                target: event.target,\n                isAutofilled: false\n              });\n            });\n          }\n        };\n\n        this._ngZone.runOutsideAngular(function () {\n          element.addEventListener('animationstart', listener, listenerOptions);\n          element.classList.add('cdk-text-field-autofill-monitored');\n        });\n\n        this._monitoredElements.set(element, {\n          subject: result,\n          unlisten: function unlisten() {\n            element.removeEventListener('animationstart', listener, listenerOptions);\n          }\n        });\n\n        return result;\n      }\n    }, {\n      key: \"stopMonitoring\",\n      value: function stopMonitoring(elementOrRef) {\n        var element = coerceElement(elementOrRef);\n\n        var info = this._monitoredElements.get(element);\n\n        if (info) {\n          info.unlisten();\n          info.subject.complete();\n          element.classList.remove('cdk-text-field-autofill-monitored');\n          element.classList.remove('cdk-text-field-autofilled');\n\n          this._monitoredElements.delete(element);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this2 = this;\n\n        this._monitoredElements.forEach(function (_info, element) {\n          return _this2.stopMonitoring(element);\n        });\n      }\n    }]);\n\n    return AutofillMonitor;\n  }();\n\n  AutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) {\n    return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  AutofillMonitor.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function AutofillMonitor_Factory() {\n      return new AutofillMonitor(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone));\n    },\n    token: AutofillMonitor,\n    providedIn: \"root\"\n  });\n  return AutofillMonitor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** A directive that can be used to monitor the autofill state of an input. */\n\n\nvar CdkAutofill = /*#__PURE__*/(function () {\n  var CdkAutofill = /*#__PURE__*/function () {\n    function CdkAutofill(_elementRef, _autofillMonitor) {\n      _classCallCheck(this, CdkAutofill);\n\n      this._elementRef = _elementRef;\n      this._autofillMonitor = _autofillMonitor;\n      /** Emits when the autofill state of the element changes. */\n\n      this.cdkAutofill = new EventEmitter();\n    }\n\n    _createClass(CdkAutofill, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this3 = this;\n\n        this._autofillMonitor.monitor(this._elementRef).subscribe(function (event) {\n          return _this3.cdkAutofill.emit(event);\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n      }\n    }]);\n\n    return CdkAutofill;\n  }();\n\n  CdkAutofill.ɵfac = function CdkAutofill_Factory(t) {\n    return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor));\n  };\n\n  CdkAutofill.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkAutofill,\n    selectors: [[\"\", \"cdkAutofill\", \"\"]],\n    outputs: {\n      cdkAutofill: \"cdkAutofill\"\n    }\n  });\n  return CdkAutofill;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Directive to automatically resize a textarea to fit its content. */\n\n\nvar CdkTextareaAutosize = /*#__PURE__*/(function () {\n  var CdkTextareaAutosize = /*#__PURE__*/function () {\n    function CdkTextareaAutosize(_elementRef, _platform, _ngZone,\n    /** @breaking-change 11.0.0 make document required */\n    document) {\n      _classCallCheck(this, CdkTextareaAutosize);\n\n      this._elementRef = _elementRef;\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._destroyed = new Subject();\n      this._enabled = true;\n      /**\n       * Value of minRows as of last resize. If the minRows has decreased, the\n       * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n       * does not have the same problem because it does not affect the textarea's scrollHeight.\n       */\n\n      this._previousMinRows = -1;\n      this._isViewInited = false;\n      this._document = document;\n      this._textareaElement = this._elementRef.nativeElement;\n      this._measuringClass = _platform.FIREFOX ? 'cdk-textarea-autosize-measuring-firefox' : 'cdk-textarea-autosize-measuring';\n    }\n    /** Minimum amount of rows in the textarea. */\n\n\n    _createClass(CdkTextareaAutosize, [{\n      key: \"minRows\",\n      get: function get() {\n        return this._minRows;\n      },\n      set: function set(value) {\n        this._minRows = coerceNumberProperty(value);\n\n        this._setMinHeight();\n      }\n      /** Maximum amount of rows in the textarea. */\n\n    }, {\n      key: \"maxRows\",\n      get: function get() {\n        return this._maxRows;\n      },\n      set: function set(value) {\n        this._maxRows = coerceNumberProperty(value);\n\n        this._setMaxHeight();\n      }\n      /** Whether autosizing is enabled or not */\n\n    }, {\n      key: \"enabled\",\n      get: function get() {\n        return this._enabled;\n      },\n      set: function set(value) {\n        value = coerceBooleanProperty(value); // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n\n        if (this._enabled !== value) {\n          (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n      }\n    }, {\n      key: \"placeholder\",\n      get: function get() {\n        return this._textareaElement.placeholder;\n      },\n      set: function set(value) {\n        this._cachedPlaceholderHeight = undefined;\n        this._textareaElement.placeholder = value;\n\n        this._cacheTextareaPlaceholderHeight();\n      }\n      /** Sets the minimum height of the textarea as determined by minRows. */\n\n    }, {\n      key: \"_setMinHeight\",\n      value: function _setMinHeight() {\n        var minHeight = this.minRows && this._cachedLineHeight ? \"\".concat(this.minRows * this._cachedLineHeight, \"px\") : null;\n\n        if (minHeight) {\n          this._textareaElement.style.minHeight = minHeight;\n        }\n      }\n      /** Sets the maximum height of the textarea as determined by maxRows. */\n\n    }, {\n      key: \"_setMaxHeight\",\n      value: function _setMaxHeight() {\n        var maxHeight = this.maxRows && this._cachedLineHeight ? \"\".concat(this.maxRows * this._cachedLineHeight, \"px\") : null;\n\n        if (maxHeight) {\n          this._textareaElement.style.maxHeight = maxHeight;\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this4 = this;\n\n        if (this._platform.isBrowser) {\n          // Remember the height which we started with in case autosizing is disabled\n          this._initialHeight = this._textareaElement.style.height;\n          this.resizeToFitContent();\n\n          this._ngZone.runOutsideAngular(function () {\n            var window = _this4._getWindow();\n\n            fromEvent(window, 'resize').pipe(auditTime(16), takeUntil(_this4._destroyed)).subscribe(function () {\n              return _this4.resizeToFitContent(true);\n            });\n          });\n\n          this._isViewInited = true;\n          this.resizeToFitContent(true);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /**\n       * Cache the height of a single-row textarea if it has not already been cached.\n       *\n       * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n       * maxRows. For the initial version, we will assume that the height of a single line in the\n       * textarea does not ever change.\n       */\n\n    }, {\n      key: \"_cacheTextareaLineHeight\",\n      value: function _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n          return;\n        } // Use a clone element because we have to override some styles.\n\n\n        var textareaClone = this._textareaElement.cloneNode(false);\n\n        textareaClone.rows = 1; // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = ''; // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n\n        textareaClone.style.overflow = 'hidden';\n\n        this._textareaElement.parentNode.appendChild(textareaClone);\n\n        this._cachedLineHeight = textareaClone.clientHeight;\n\n        this._textareaElement.parentNode.removeChild(textareaClone); // Min and max heights have to be re-calculated if the cached line height changes\n\n\n        this._setMinHeight();\n\n        this._setMaxHeight();\n      }\n    }, {\n      key: \"_measureScrollHeight\",\n      value: function _measureScrollHeight() {\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        this._textareaElement.classList.add(this._measuringClass); // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n\n\n        var scrollHeight = this._textareaElement.scrollHeight - 4;\n\n        this._textareaElement.classList.remove(this._measuringClass);\n\n        return scrollHeight;\n      }\n    }, {\n      key: \"_cacheTextareaPlaceholderHeight\",\n      value: function _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n          return;\n        }\n\n        if (!this.placeholder) {\n          this._cachedPlaceholderHeight = 0;\n          return;\n        }\n\n        var value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (this._platform.isBrowser) {\n          this.resizeToFitContent();\n        }\n      }\n      /**\n       * Resize the textarea to fit its content.\n       * @param force Whether to force a height recalculation. By default the height will be\n       *    recalculated only if the value changed since the last call.\n       */\n\n    }, {\n      key: \"resizeToFitContent\",\n      value: function resizeToFitContent() {\n        var _this5 = this;\n\n        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n          return;\n        }\n\n        this._cacheTextareaLineHeight();\n\n        this._cacheTextareaPlaceholderHeight(); // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n\n\n        if (!this._cachedLineHeight) {\n          return;\n        }\n\n        var textarea = this._elementRef.nativeElement;\n        var value = textarea.value; // Only resize if the value or minRows have changed since these calculations can be expensive.\n\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n          return;\n        }\n\n        var scrollHeight = this._measureScrollHeight();\n\n        var height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0); // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n\n        textarea.style.height = \"\".concat(height, \"px\");\n\n        this._ngZone.runOutsideAngular(function () {\n          if (typeof requestAnimationFrame !== 'undefined') {\n            requestAnimationFrame(function () {\n              return _this5._scrollToCaretPosition(textarea);\n            });\n          } else {\n            setTimeout(function () {\n              return _this5._scrollToCaretPosition(textarea);\n            });\n          }\n        });\n\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n      }\n      /**\n       * Resets the textarea to its original size\n       */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n          this._textareaElement.style.height = this._initialHeight;\n        }\n      } // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n      // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n      // can move this back into `host`.\n      // tslint:disable:no-host-decorator-in-concrete\n\n    }, {\n      key: \"_noopInputHandler\",\n      value: function _noopInputHandler() {// no-op handler that ensures we're running change detection on input events.\n      }\n      /** Access injected document if available or fallback to global document reference */\n\n    }, {\n      key: \"_getDocument\",\n      value: function _getDocument() {\n        return this._document || document;\n      }\n      /** Use defaultView of injected document if available or fallback to global window reference */\n\n    }, {\n      key: \"_getWindow\",\n      value: function _getWindow() {\n        var doc = this._getDocument();\n\n        return doc.defaultView || window;\n      }\n      /**\n       * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n       * prevent it from scrolling to the caret position. We need to re-set the selection\n       * in order for it to scroll to the proper position.\n       */\n\n    }, {\n      key: \"_scrollToCaretPosition\",\n      value: function _scrollToCaretPosition(textarea) {\n        var selectionStart = textarea.selectionStart,\n            selectionEnd = textarea.selectionEnd;\n\n        var document = this._getDocument(); // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n\n\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n          textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n      }\n    }]);\n\n    return CdkTextareaAutosize;\n  }();\n\n  CdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) {\n    return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8));\n  };\n\n  CdkTextareaAutosize.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTextareaAutosize,\n    selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n    hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n    hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n          return ctx._noopInputHandler();\n        });\n      }\n    },\n    inputs: {\n      minRows: [\"cdkAutosizeMinRows\", \"minRows\"],\n      maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"],\n      enabled: [\"cdkTextareaAutosize\", \"enabled\"],\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"cdkTextareaAutosize\"]\n  });\n  return CdkTextareaAutosize;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar TextFieldModule = /*#__PURE__*/(function () {\n  var TextFieldModule = /*#__PURE__*/_createClass(function TextFieldModule() {\n    _classCallCheck(this, TextFieldModule);\n  });\n\n  TextFieldModule.ɵfac = function TextFieldModule_Factory(t) {\n    return new (t || TextFieldModule)();\n  };\n\n  TextFieldModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TextFieldModule\n  });\n  TextFieldModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[PlatformModule]]\n  });\n  return TextFieldModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, {\n    declarations: function declarations() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    },\n    imports: function imports() {\n      return [PlatformModule];\n    },\n    exports: function exports() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };","map":{"version":3,"names":["i1","normalizePassiveListenerOptions","Platform","PlatformModule","i0","Injectable","NgZone","EventEmitter","Directive","ElementRef","Output","Optional","Inject","Input","HostListener","NgModule","coerceElement","coerceNumberProperty","coerceBooleanProperty","EMPTY","Subject","fromEvent","auditTime","takeUntil","DOCUMENT","ɵngcc0","ɵngcc1","listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","elementOrRef","isBrowser","element","info","get","subject","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","complete","delete","forEach","_info","stopMonitoring","ɵfac","AutofillMonitor_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","monitor","subscribe","emit","CdkAutofill_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","outputs","CdkTextareaAutosize","document","_destroyed","_enabled","_previousMinRows","_isViewInited","_document","_textareaElement","nativeElement","_measuringClass","FIREFOX","_minRows","value","_setMinHeight","_maxRows","_setMaxHeight","resizeToFitContent","reset","placeholder","_cachedPlaceholderHeight","undefined","_cacheTextareaPlaceholderHeight","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","_initialHeight","height","window","_getWindow","pipe","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","scrollHeight","_measureScrollHeight","force","_cacheTextareaLineHeight","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","doc","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","activeElement","setSelectionRange","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","_noopInputHandler","inputs","enabled","exportAs","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/text-field.js"],"sourcesContent":["import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = i0.ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n        this._measuringClass = _platform.FIREFOX ?\n            'cdk-textarea-autosize-measuring-firefox' :\n            'cdk-textarea-autosize-measuring';\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() { return this._minRows; }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() { return this._maxRows; }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() { return this._textareaElement.placeholder; }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        this._textareaElement.placeholder = value;\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        this._textareaElement.parentNode.removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        this._textareaElement.classList.add(this._measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = this._textareaElement.scrollHeight - 4;\n        this._textareaElement.classList.remove(this._measuringClass);\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        const document = this._getDocument();\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"], placeholder: \"placeholder\" }, exportAs: [\"cdkTextareaAutosize\"] });\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    placeholder: [{ type: Input }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], placeholder: [{\n            type: Input\n        }], \n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); };\nTextFieldModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[PlatformModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n"],"mappings":";;AAAA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AACA,SAASC,+BAAT,EAA0CC,QAA1C,EAAoDC,cAApD,QAA0E,uBAA1E;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,YAA7B,EAA2CC,SAA3C,EAAsDC,UAAtD,EAAkEC,MAAlE,EAA0EC,QAA1E,EAAoFC,MAApF,EAA4FC,KAA5F,EAAmGC,YAAnG,EAAiHC,QAAjH,QAAiI,eAAjI;AACA,SAASC,aAAT,EAAwBC,oBAAxB,EAA8CC,qBAA9C,QAA2E,uBAA3E;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,SAAzB,QAA0C,MAA1C;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,gBAArC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,IAAMC,eAAe,gBAAG1B,+BAA+B,CAAC;EAAE2B,OAAO,EAAE;AAAX,CAAD,CAAvD;AACA;AACA;AACA;AACA;AACA;;IACMC,e;MAAAA,e;IACF,yBAAYC,SAAZ,EAAuBC,OAAvB,EAAgC;MAAA;;MAC5B,KAAKD,SAAL,GAAiBA,SAAjB;MACA,KAAKC,OAAL,GAAeA,OAAf;MACA,KAAKC,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B;IACH;;;;aACD,iBAAQC,YAAR,EAAsB;QAAA;;QAClB,IAAI,CAAC,KAAKJ,SAAL,CAAeK,SAApB,EAA+B;UAC3B,OAAOhB,KAAP;QACH;;QACD,IAAMiB,OAAO,GAAGpB,aAAa,CAACkB,YAAD,CAA7B;;QACA,IAAMG,IAAI,GAAG,KAAKL,kBAAL,CAAwBM,GAAxB,CAA4BF,OAA5B,CAAb;;QACA,IAAIC,IAAJ,EAAU;UACN,OAAOA,IAAI,CAACE,OAAZ;QACH;;QACD,IAAMC,MAAM,GAAG,IAAIpB,OAAJ,EAAf;QACA,IAAMqB,QAAQ,GAAG,2BAAjB;;QACA,IAAMC,QAAQ,GAAI,SAAZA,QAAY,CAACC,KAAD,EAAW;UACzB;UACA;UACA;UACA,IAAIA,KAAK,CAACC,aAAN,KAAwB,+BAAxB,IACA,CAACR,OAAO,CAACS,SAAR,CAAkBC,QAAlB,CAA2BL,QAA3B,CADL,EAC2C;YACvCL,OAAO,CAACS,SAAR,CAAkBE,GAAlB,CAAsBN,QAAtB;;YACA,KAAI,CAACV,OAAL,CAAaiB,GAAb,CAAiB;cAAA,OAAMR,MAAM,CAACS,IAAP,CAAY;gBAAEC,MAAM,EAAEP,KAAK,CAACO,MAAhB;gBAAwBC,YAAY,EAAE;cAAtC,CAAZ,CAAN;YAAA,CAAjB;UACH,CAJD,MAKK,IAAIR,KAAK,CAACC,aAAN,KAAwB,6BAAxB,IACLR,OAAO,CAACS,SAAR,CAAkBC,QAAlB,CAA2BL,QAA3B,CADC,EACqC;YACtCL,OAAO,CAACS,SAAR,CAAkBO,MAAlB,CAAyBX,QAAzB;;YACA,KAAI,CAACV,OAAL,CAAaiB,GAAb,CAAiB;cAAA,OAAMR,MAAM,CAACS,IAAP,CAAY;gBAAEC,MAAM,EAAEP,KAAK,CAACO,MAAhB;gBAAwBC,YAAY,EAAE;cAAtC,CAAZ,CAAN;YAAA,CAAjB;UACH;QACJ,CAdD;;QAeA,KAAKpB,OAAL,CAAasB,iBAAb,CAA+B,YAAM;UACjCjB,OAAO,CAACkB,gBAAR,CAAyB,gBAAzB,EAA2CZ,QAA3C,EAAqDf,eAArD;UACAS,OAAO,CAACS,SAAR,CAAkBE,GAAlB,CAAsB,mCAAtB;QACH,CAHD;;QAIA,KAAKf,kBAAL,CAAwBuB,GAAxB,CAA4BnB,OAA5B,EAAqC;UACjCG,OAAO,EAAEC,MADwB;UAEjCgB,QAAQ,EAAE,oBAAM;YACZpB,OAAO,CAACqB,mBAAR,CAA4B,gBAA5B,EAA8Cf,QAA9C,EAAwDf,eAAxD;UACH;QAJgC,CAArC;;QAMA,OAAOa,MAAP;MACH;;;aACD,wBAAeN,YAAf,EAA6B;QACzB,IAAME,OAAO,GAAGpB,aAAa,CAACkB,YAAD,CAA7B;;QACA,IAAMG,IAAI,GAAG,KAAKL,kBAAL,CAAwBM,GAAxB,CAA4BF,OAA5B,CAAb;;QACA,IAAIC,IAAJ,EAAU;UACNA,IAAI,CAACmB,QAAL;UACAnB,IAAI,CAACE,OAAL,CAAamB,QAAb;UACAtB,OAAO,CAACS,SAAR,CAAkBO,MAAlB,CAAyB,mCAAzB;UACAhB,OAAO,CAACS,SAAR,CAAkBO,MAAlB,CAAyB,2BAAzB;;UACA,KAAKpB,kBAAL,CAAwB2B,MAAxB,CAA+BvB,OAA/B;QACH;MACJ;;;aACD,uBAAc;QAAA;;QACV,KAAKJ,kBAAL,CAAwB4B,OAAxB,CAAgC,UAACC,KAAD,EAAQzB,OAAR;UAAA,OAAoB,MAAI,CAAC0B,cAAL,CAAoB1B,OAApB,CAApB;QAAA,CAAhC;MACH;;;;;;EAELP,eAAe,CAACkC,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;IAAE,OAAO,KAAKA,CAAC,IAAIpC,eAAV,EAA2BJ,MAAM,CAACyC,QAAP,CAAgBxC,MAAM,CAACxB,QAAvB,CAA3B,EAA6DuB,MAAM,CAACyC,QAAP,CAAgBzC,MAAM,CAACnB,MAAvB,CAA7D,CAAP;EAAsG,CAAnK;;EACAuB,eAAe,CAACsC,KAAhB,GAAwB/D,EAAE,CAACgE,kBAAH,CAAsB;IAAEC,OAAO,EAAE,SAASL,uBAAT,GAAmC;MAAE,OAAO,IAAInC,eAAJ,CAAoBzB,EAAE,CAAC8D,QAAH,CAAYlE,EAAE,CAACE,QAAf,CAApB,EAA8CE,EAAE,CAAC8D,QAAH,CAAY9D,EAAE,CAACE,MAAf,CAA9C,CAAP;IAA+E,CAA/H;IAAiIgE,KAAK,EAAEzC,eAAxI;IAAyJ0C,UAAU,EAAE;EAArK,CAAtB,CAAxB;SA5DM1C,e;;;AAiEN;AAAA,CAAC,YAAY;EAAE,CAAC,OAAO2C,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAG+E,CAH9F;AAIA;;;IACMC,W;MAAAA,W;IACF,qBAAYC,WAAZ,EAAyBC,gBAAzB,EAA2C;MAAA;;MACvC,KAAKD,WAAL,GAAmBA,WAAnB;MACA,KAAKC,gBAAL,GAAwBA,gBAAxB;MACA;;MACA,KAAKC,WAAL,GAAmB,IAAIrE,YAAJ,EAAnB;IACH;;;;aACD,oBAAW;QAAA;;QACP,KAAKoE,gBAAL,CACKE,OADL,CACa,KAAKH,WADlB,EAEKI,SAFL,CAEe,UAAAnC,KAAK;UAAA,OAAI,MAAI,CAACiC,WAAL,CAAiBG,IAAjB,CAAsBpC,KAAtB,CAAJ;QAAA,CAFpB;MAGH;;;aACD,uBAAc;QACV,KAAKgC,gBAAL,CAAsBb,cAAtB,CAAqC,KAAKY,WAA1C;MACH;;;;;;EAELD,WAAW,CAACV,IAAZ,GAAmB,SAASiB,mBAAT,CAA6Bf,CAA7B,EAAgC;IAAE,OAAO,KAAKA,CAAC,IAAIQ,WAAV,EAAuBhD,MAAM,CAACwD,iBAAP,CAAyBxD,MAAM,CAAChB,UAAhC,CAAvB,EAAoEgB,MAAM,CAACwD,iBAAP,CAAyBpD,eAAzB,CAApE,CAAP;EAAwH,CAA7K;;EACA4C,WAAW,CAACS,IAAZ,GAAmB,aAAczD,MAAM,CAAC0D,iBAAP,CAAyB;IAAEC,IAAI,EAAEX,WAAR;IAAqBY,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,aAAL,EAAoB,EAApB,CAAD,CAAhC;IAA2DC,OAAO,EAAE;MAAEV,WAAW,EAAE;IAAf;EAApE,CAAzB,CAAjC;SAjBMH,W;;;AAyBN;AAAA,CAAC,YAAY;EAAE,CAAC,OAAOD,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAOC,CAPhB;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;IACMe,mB;MAAAA,mB;IACF,6BAAYb,WAAZ,EAAyB5C,SAAzB,EAAoCC,OAApC;IACA;IACAyD,QAFA,EAEU;MAAA;;MACN,KAAKd,WAAL,GAAmBA,WAAnB;MACA,KAAK5C,SAAL,GAAiBA,SAAjB;MACA,KAAKC,OAAL,GAAeA,OAAf;MACA,KAAK0D,UAAL,GAAkB,IAAIrE,OAAJ,EAAlB;MACA,KAAKsE,QAAL,GAAgB,IAAhB;MACA;AACR;AACA;AACA;AACA;;MACQ,KAAKC,gBAAL,GAAwB,CAAC,CAAzB;MACA,KAAKC,aAAL,GAAqB,KAArB;MACA,KAAKC,SAAL,GAAiBL,QAAjB;MACA,KAAKM,gBAAL,GAAwB,KAAKpB,WAAL,CAAiBqB,aAAzC;MACA,KAAKC,eAAL,GAAuBlE,SAAS,CAACmE,OAAV,GACnB,yCADmB,GAEnB,iCAFJ;IAGH;IACD;;;;;WACA,eAAc;QAAE,OAAO,KAAKC,QAAZ;MAAuB,C;WACvC,aAAYC,KAAZ,EAAmB;QACf,KAAKD,QAAL,GAAgBjF,oBAAoB,CAACkF,KAAD,CAApC;;QACA,KAAKC,aAAL;MACH;MACD;;;;WACA,eAAc;QAAE,OAAO,KAAKC,QAAZ;MAAuB,C;WACvC,aAAYF,KAAZ,EAAmB;QACf,KAAKE,QAAL,GAAgBpF,oBAAoB,CAACkF,KAAD,CAApC;;QACA,KAAKG,aAAL;MACH;MACD;;;;WACA,eAAc;QAAE,OAAO,KAAKZ,QAAZ;MAAuB,C;WACvC,aAAYS,KAAZ,EAAmB;QACfA,KAAK,GAAGjF,qBAAqB,CAACiF,KAAD,CAA7B,CADe,CAEf;QACA;;QACA,IAAI,KAAKT,QAAL,KAAkBS,KAAtB,EAA6B;UACzB,CAAC,KAAKT,QAAL,GAAgBS,KAAjB,IAA0B,KAAKI,kBAAL,CAAwB,IAAxB,CAA1B,GAA0D,KAAKC,KAAL,EAA1D;QACH;MACJ;;;WACD,eAAkB;QAAE,OAAO,KAAKV,gBAAL,CAAsBW,WAA7B;MAA2C,C;WAC/D,aAAgBN,KAAhB,EAAuB;QACnB,KAAKO,wBAAL,GAAgCC,SAAhC;QACA,KAAKb,gBAAL,CAAsBW,WAAtB,GAAoCN,KAApC;;QACA,KAAKS,+BAAL;MACH;MACD;;;;aACA,yBAAgB;QACZ,IAAMC,SAAS,GAAG,KAAKC,OAAL,IAAgB,KAAKC,iBAArB,aACX,KAAKD,OAAL,GAAe,KAAKC,iBADT,UACiC,IADnD;;QAEA,IAAIF,SAAJ,EAAe;UACX,KAAKf,gBAAL,CAAsBkB,KAAtB,CAA4BH,SAA5B,GAAwCA,SAAxC;QACH;MACJ;MACD;;;;aACA,yBAAgB;QACZ,IAAMI,SAAS,GAAG,KAAKC,OAAL,IAAgB,KAAKH,iBAArB,aACX,KAAKG,OAAL,GAAe,KAAKH,iBADT,UACiC,IADnD;;QAEA,IAAIE,SAAJ,EAAe;UACX,KAAKnB,gBAAL,CAAsBkB,KAAtB,CAA4BC,SAA5B,GAAwCA,SAAxC;QACH;MACJ;;;aACD,2BAAkB;QAAA;;QACd,IAAI,KAAKnF,SAAL,CAAeK,SAAnB,EAA8B;UAC1B;UACA,KAAKgF,cAAL,GAAsB,KAAKrB,gBAAL,CAAsBkB,KAAtB,CAA4BI,MAAlD;UACA,KAAKb,kBAAL;;UACA,KAAKxE,OAAL,CAAasB,iBAAb,CAA+B,YAAM;YACjC,IAAMgE,MAAM,GAAG,MAAI,CAACC,UAAL,EAAf;;YACAjG,SAAS,CAACgG,MAAD,EAAS,QAAT,CAAT,CACKE,IADL,CACUjG,SAAS,CAAC,EAAD,CADnB,EACyBC,SAAS,CAAC,MAAI,CAACkE,UAAN,CADlC,EAEKX,SAFL,CAEe;cAAA,OAAM,MAAI,CAACyB,kBAAL,CAAwB,IAAxB,CAAN;YAAA,CAFf;UAGH,CALD;;UAMA,KAAKX,aAAL,GAAqB,IAArB;UACA,KAAKW,kBAAL,CAAwB,IAAxB;QACH;MACJ;;;aACD,uBAAc;QACV,KAAKd,UAAL,CAAgBxC,IAAhB;;QACA,KAAKwC,UAAL,CAAgB/B,QAAhB;MACH;MACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;aACI,oCAA2B;QACvB,IAAI,KAAKqD,iBAAT,EAA4B;UACxB;QACH,CAHsB,CAIvB;;;QACA,IAAIS,aAAa,GAAG,KAAK1B,gBAAL,CAAsB2B,SAAtB,CAAgC,KAAhC,CAApB;;QACAD,aAAa,CAACE,IAAd,GAAqB,CAArB,CANuB,CAOvB;QACA;QACA;;QACAF,aAAa,CAACR,KAAd,CAAoBW,QAApB,GAA+B,UAA/B;QACAH,aAAa,CAACR,KAAd,CAAoBY,UAApB,GAAiC,QAAjC;QACAJ,aAAa,CAACR,KAAd,CAAoBa,MAApB,GAA6B,MAA7B;QACAL,aAAa,CAACR,KAAd,CAAoBc,OAApB,GAA8B,GAA9B;QACAN,aAAa,CAACR,KAAd,CAAoBI,MAApB,GAA6B,EAA7B;QACAI,aAAa,CAACR,KAAd,CAAoBH,SAApB,GAAgC,EAAhC;QACAW,aAAa,CAACR,KAAd,CAAoBC,SAApB,GAAgC,EAAhC,CAhBuB,CAiBvB;QACA;QACA;QACA;QACA;;QACAO,aAAa,CAACR,KAAd,CAAoBe,QAApB,GAA+B,QAA/B;;QACA,KAAKjC,gBAAL,CAAsBkC,UAAtB,CAAiCC,WAAjC,CAA6CT,aAA7C;;QACA,KAAKT,iBAAL,GAAyBS,aAAa,CAACU,YAAvC;;QACA,KAAKpC,gBAAL,CAAsBkC,UAAtB,CAAiCG,WAAjC,CAA6CX,aAA7C,EAzBuB,CA0BvB;;;QACA,KAAKpB,aAAL;;QACA,KAAKE,aAAL;MACH;;;aACD,gCAAuB;QACnB;QACA;QACA,KAAKR,gBAAL,CAAsBjD,SAAtB,CAAgCE,GAAhC,CAAoC,KAAKiD,eAAzC,EAHmB,CAInB;QACA;;;QACA,IAAMoC,YAAY,GAAG,KAAKtC,gBAAL,CAAsBsC,YAAtB,GAAqC,CAA1D;;QACA,KAAKtC,gBAAL,CAAsBjD,SAAtB,CAAgCO,MAAhC,CAAuC,KAAK4C,eAA5C;;QACA,OAAOoC,YAAP;MACH;;;aACD,2CAAkC;QAC9B,IAAI,CAAC,KAAKxC,aAAN,IAAuB,KAAKc,wBAAL,IAAiCC,SAA5D,EAAuE;UACnE;QACH;;QACD,IAAI,CAAC,KAAKF,WAAV,EAAuB;UACnB,KAAKC,wBAAL,GAAgC,CAAhC;UACA;QACH;;QACD,IAAMP,KAAK,GAAG,KAAKL,gBAAL,CAAsBK,KAApC;QACA,KAAKL,gBAAL,CAAsBK,KAAtB,GAA8B,KAAKL,gBAAL,CAAsBW,WAApD;QACA,KAAKC,wBAAL,GAAgC,KAAK2B,oBAAL,EAAhC;QACA,KAAKvC,gBAAL,CAAsBK,KAAtB,GAA8BA,KAA9B;MACH;;;aACD,qBAAY;QACR,IAAI,KAAKrE,SAAL,CAAeK,SAAnB,EAA8B;UAC1B,KAAKoE,kBAAL;QACH;MACJ;MACD;AACJ;AACA;AACA;AACA;;;;aACI,8BAAkC;QAAA;;QAAA,IAAf+B,KAAe,uEAAP,KAAO;;QAC9B;QACA,IAAI,CAAC,KAAK5C,QAAV,EAAoB;UAChB;QACH;;QACD,KAAK6C,wBAAL;;QACA,KAAK3B,+BAAL,GAN8B,CAO9B;QACA;;;QACA,IAAI,CAAC,KAAKG,iBAAV,EAA6B;UACzB;QACH;;QACD,IAAMyB,QAAQ,GAAG,KAAK9D,WAAL,CAAiBqB,aAAlC;QACA,IAAMI,KAAK,GAAGqC,QAAQ,CAACrC,KAAvB,CAb8B,CAc9B;;QACA,IAAI,CAACmC,KAAD,IAAU,KAAKpC,QAAL,KAAkB,KAAKP,gBAAjC,IAAqDQ,KAAK,KAAK,KAAKsC,cAAxE,EAAwF;UACpF;QACH;;QACD,IAAML,YAAY,GAAG,KAAKC,oBAAL,EAArB;;QACA,IAAMjB,MAAM,GAAGsB,IAAI,CAACC,GAAL,CAASP,YAAT,EAAuB,KAAK1B,wBAAL,IAAiC,CAAxD,CAAf,CAnB8B,CAoB9B;;QACA8B,QAAQ,CAACxB,KAAT,CAAeI,MAAf,aAA2BA,MAA3B;;QACA,KAAKrF,OAAL,CAAasB,iBAAb,CAA+B,YAAM;UACjC,IAAI,OAAOuF,qBAAP,KAAiC,WAArC,EAAkD;YAC9CA,qBAAqB,CAAC;cAAA,OAAM,MAAI,CAACC,sBAAL,CAA4BL,QAA5B,CAAN;YAAA,CAAD,CAArB;UACH,CAFD,MAGK;YACDM,UAAU,CAAC;cAAA,OAAM,MAAI,CAACD,sBAAL,CAA4BL,QAA5B,CAAN;YAAA,CAAD,CAAV;UACH;QACJ,CAPD;;QAQA,KAAKC,cAAL,GAAsBtC,KAAtB;QACA,KAAKR,gBAAL,GAAwB,KAAKO,QAA7B;MACH;MACD;AACJ;AACA;;;;aACI,iBAAQ;QACJ;QACA;QACA,IAAI,KAAKiB,cAAL,KAAwBR,SAA5B,EAAuC;UACnC,KAAKb,gBAAL,CAAsBkB,KAAtB,CAA4BI,MAA5B,GAAqC,KAAKD,cAA1C;QACH;MACJ,C,CACD;MACA;MACA;MACA;;;;aACA,6BAAoB,CAChB;MACH;MACD;;;;aACA,wBAAe;QACX,OAAO,KAAKtB,SAAL,IAAkBL,QAAzB;MACH;MACD;;;;aACA,sBAAa;QACT,IAAMuD,GAAG,GAAG,KAAKC,YAAL,EAAZ;;QACA,OAAOD,GAAG,CAACE,WAAJ,IAAmB5B,MAA1B;MACH;MACD;AACJ;AACA;AACA;AACA;;;;aACI,gCAAuBmB,QAAvB,EAAiC;QAC7B,IAAQU,cAAR,GAAyCV,QAAzC,CAAQU,cAAR;QAAA,IAAwBC,YAAxB,GAAyCX,QAAzC,CAAwBW,YAAxB;;QACA,IAAM3D,QAAQ,GAAG,KAAKwD,YAAL,EAAjB,CAF6B,CAG7B;QACA;QACA;QACA;QACA;QACA;;;QACA,IAAI,CAAC,KAAKvD,UAAL,CAAgB2D,SAAjB,IAA8B5D,QAAQ,CAAC6D,aAAT,KAA2Bb,QAA7D,EAAuE;UACnEA,QAAQ,CAACc,iBAAT,CAA2BJ,cAA3B,EAA2CC,YAA3C;QACH;MACJ;;;;;;EAEL5D,mBAAmB,CAACxB,IAApB,GAA2B,SAASwF,2BAAT,CAAqCtF,CAArC,EAAwC;IAAE,OAAO,KAAKA,CAAC,IAAIsB,mBAAV,EAA+B9D,MAAM,CAACwD,iBAAP,CAAyBxD,MAAM,CAAChB,UAAhC,CAA/B,EAA4EgB,MAAM,CAACwD,iBAAP,CAAyBvD,MAAM,CAACxB,QAAhC,CAA5E,EAAuHuB,MAAM,CAACwD,iBAAP,CAAyBxD,MAAM,CAACnB,MAAhC,CAAvH,EAAgKmB,MAAM,CAACwD,iBAAP,CAAyBzD,QAAzB,EAAmC,CAAnC,CAAhK,CAAP;EAAgN,CAArR;;EACA+D,mBAAmB,CAACL,IAApB,GAA2B,aAAczD,MAAM,CAAC0D,iBAAP,CAAyB;IAAEC,IAAI,EAAEG,mBAAR;IAA6BF,SAAS,EAAE,CAAC,CAAC,UAAD,EAAa,qBAAb,EAAoC,EAApC,CAAD,CAAxC;IAAmFmE,SAAS,EAAE,CAAC,MAAD,EAAS,GAAT,EAAc,CAAd,EAAiB,uBAAjB,CAA9F;IAAyIC,YAAY,EAAE,SAASC,gCAAT,CAA0CC,EAA1C,EAA8CC,GAA9C,EAAmD;MAAE,IAAID,EAAE,GAAG,CAAT,EAAY;QAClRlI,MAAM,CAACoI,UAAP,CAAkB,OAAlB,EAA2B,SAASC,4CAAT,GAAwD;UAAE,OAAOF,GAAG,CAACG,iBAAJ,EAAP;QAAiC,CAAtH;MACH;IAAE,CAF2D;IAEzDC,MAAM,EAAE;MAAElD,OAAO,EAAE,CAAC,oBAAD,EAAuB,SAAvB,CAAX;MAA8CI,OAAO,EAAE,CAAC,oBAAD,EAAuB,SAAvB,CAAvD;MAA0F+C,OAAO,EAAE,CAAC,qBAAD,EAAwB,SAAxB,CAAnG;MAAuIxD,WAAW,EAAE;IAApJ,CAFiD;IAEoHyD,QAAQ,EAAE,CAAC,qBAAD;EAF9H,CAAzB,CAAzC;SA1OM3E,mB;;;AA0PN;AAAA,CAAC,YAAY;EAAE,CAAC,OAAOf,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAoCC,CApChB;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACM2F,e;MAAAA,e;;;;EAENA,eAAe,CAACpG,IAAhB,GAAuB,SAASqG,uBAAT,CAAiCnG,CAAjC,EAAoC;IAAE,OAAO,KAAKA,CAAC,IAAIkG,eAAV,GAAP;EAAsC,CAAnG;;EACAA,eAAe,CAACE,IAAhB,GAAuB,aAAc5I,MAAM,CAAC6I,gBAAP,CAAwB;IAAElF,IAAI,EAAE+E;EAAR,CAAxB,CAArC;EACAA,eAAe,CAACI,IAAhB,GAAuB,aAAc9I,MAAM,CAAC+I,gBAAP,CAAwB;IAAEC,OAAO,EAAE,CAAC,CAACtK,cAAD,CAAD;EAAX,CAAxB,CAArC;SAJMgK,e;;;AAKN;AAAA,CAAC,YAAY;EAAE,CAAC,OAAO3F,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAOO,CAPtB;;AAQA;AAAA,CAAC,YAAY;EAAE,CAAC,OAAOkG,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDjJ,MAAM,CAACkJ,kBAAP,CAA0BR,eAA1B,EAA2C;IAAES,YAAY,EAAE,wBAAY;MAAE,OAAO,CAACnG,WAAD,EAAcc,mBAAd,CAAP;IAA4C,CAA1E;IAA4EkF,OAAO,EAAE,mBAAY;MAAE,OAAO,CAACtK,cAAD,CAAP;IAA0B,CAA7H;IAA+H0K,OAAO,EAAE,mBAAY;MAAE,OAAO,CAACpG,WAAD,EAAcc,mBAAd,CAAP;IAA4C;EAAlM,CAA3C,CAAnD;AAAsS,CAArT;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS1D,eAAT,EAA0B4C,WAA1B,EAAuCc,mBAAvC,EAA4D4E,eAA5D"},"metadata":{},"sourceType":"module"}