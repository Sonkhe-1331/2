{"ast":null,"code":"import _toConsumableArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _assertThisInitialized from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Event object emitted by MatChip when selected or deselected. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nvar _c0 = [\"*\"];\n\nvar MatChipSelectionChange = /*#__PURE__*/_createClass(function MatChipSelectionChange(\n/** Reference to the chip that emitted the event. */\nsource,\n/** Whether the chip that emitted the event is selected. */\nselected) {\n  var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  _classCallCheck(this, MatChipSelectionChange);\n\n  this.source = source;\n  this.selected = selected;\n  this.isUserInput = isUserInput;\n});\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar MAT_CHIP_REMOVE = /*#__PURE__*/new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar MAT_CHIP_AVATAR = /*#__PURE__*/new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar MAT_CHIP_TRAILING_ICON = /*#__PURE__*/new InjectionToken('MatChipTrailingIcon'); // Boilerplate for applying mixins to MatChip.\n\n/** @docs-private */\n\nvar MatChipBase = /*#__PURE__*/_createClass(function MatChipBase(_elementRef) {\n  _classCallCheck(this, MatChipBase);\n\n  this._elementRef = _elementRef;\n});\n\nvar _MatChipMixinBase = /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinColor( /*#__PURE__*/mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n\n\nvar MatChipAvatar = /*#__PURE__*/(function () {\n  var MatChipAvatar = /*#__PURE__*/_createClass(function MatChipAvatar() {\n    _classCallCheck(this, MatChipAvatar);\n  });\n\n  MatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n    return new (t || MatChipAvatar)();\n  };\n\n  MatChipAvatar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatChipAvatar,\n    selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n    hostAttrs: [1, \"mat-chip-avatar\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_CHIP_AVATAR,\n      useExisting: MatChipAvatar\n    }])]\n  });\n  return MatChipAvatar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n\n\nvar MatChipTrailingIcon = /*#__PURE__*/(function () {\n  var MatChipTrailingIcon = /*#__PURE__*/_createClass(function MatChipTrailingIcon() {\n    _classCallCheck(this, MatChipTrailingIcon);\n  });\n\n  MatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n    return new (t || MatChipTrailingIcon)();\n  };\n\n  MatChipTrailingIcon.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatChipTrailingIcon,\n    selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n    hostAttrs: [1, \"mat-chip-trailing-icon\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_CHIP_TRAILING_ICON,\n      useExisting: MatChipTrailingIcon\n    }])]\n  });\n  return MatChipTrailingIcon;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n\n\nvar MatChip = /*#__PURE__*/(function () {\n  var MatChip = /*#__PURE__*/function (_MatChipMixinBase2) {\n    _inherits(MatChip, _MatChipMixinBase2);\n\n    var _super = _createSuper(MatChip);\n\n    function MatChip(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n      var _this;\n\n      _classCallCheck(this, MatChip);\n\n      _this = _super.call(this, elementRef);\n      _this._ngZone = _ngZone;\n      _this._changeDetectorRef = _changeDetectorRef;\n      /** Whether the chip has focus. */\n\n      _this._hasFocus = false;\n      /** Whether the chip list is selectable */\n\n      _this.chipListSelectable = true;\n      /** Whether the chip list is in multi-selection mode. */\n\n      _this._chipListMultiple = false;\n      /** Whether the chip list as a whole is disabled. */\n\n      _this._chipListDisabled = false;\n      _this._selected = false;\n      _this._selectable = true;\n      _this._disabled = false;\n      _this._removable = true;\n      /** Emits when the chip is focused. */\n\n      _this._onFocus = new Subject();\n      /** Emits when the chip is blured. */\n\n      _this._onBlur = new Subject();\n      /** Emitted when the chip is selected or deselected. */\n\n      _this.selectionChange = new EventEmitter();\n      /** Emitted when the chip is destroyed. */\n\n      _this.destroyed = new EventEmitter();\n      /** Emitted when a chip is to be removed. */\n\n      _this.removed = new EventEmitter();\n\n      _this._addHostClassName(); // Dynamically create the ripple target, append it within the chip, and use it as the\n      // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n      // the proper styles.\n\n\n      _this._chipRippleTarget = _document.createElement('div');\n\n      _this._chipRippleTarget.classList.add('mat-chip-ripple');\n\n      _this._elementRef.nativeElement.appendChild(_this._chipRippleTarget);\n\n      _this._chipRipple = new RippleRenderer(_assertThisInitialized(_this), _ngZone, _this._chipRippleTarget, platform);\n\n      _this._chipRipple.setupTriggerEvents(elementRef);\n\n      _this.rippleConfig = globalRippleOptions || {};\n      _this._animationsDisabled = animationMode === 'NoopAnimations';\n      _this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n      return _this;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n\n\n    _createClass(MatChip, [{\n      key: \"rippleDisabled\",\n      get: function get() {\n        return this.disabled || this.disableRipple || this._animationsDisabled || !!this.rippleConfig.disabled;\n      }\n      /** Whether the chip is selected. */\n\n    }, {\n      key: \"selected\",\n      get: function get() {\n        return this._selected;\n      },\n      set: function set(value) {\n        var coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n          this._selected = coercedValue;\n\n          this._dispatchSelectionChange();\n        }\n      }\n      /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n      },\n      set: function set(value) {\n        this._value = value;\n      }\n      /**\n       * Whether or not the chip is selectable. When a chip is not selectable,\n       * changes to its selected state are always ignored. By default a chip is\n       * selectable, and it becomes non-selectable if its parent chip list is\n       * not selectable.\n       */\n\n    }, {\n      key: \"selectable\",\n      get: function get() {\n        return this._selectable && this.chipListSelectable;\n      },\n      set: function set(value) {\n        this._selectable = coerceBooleanProperty(value);\n      }\n      /** Whether the chip is disabled. */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._chipListDisabled || this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n      }\n      /**\n       * Determines whether or not the chip displays the remove styling and emits (removed) events.\n       */\n\n    }, {\n      key: \"removable\",\n      get: function get() {\n        return this._removable;\n      },\n      set: function set(value) {\n        this._removable = coerceBooleanProperty(value);\n      }\n      /** The ARIA selected applied to the chip. */\n\n    }, {\n      key: \"ariaSelected\",\n      get: function get() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n      }\n    }, {\n      key: \"_addHostClassName\",\n      value: function _addHostClassName() {\n        var basicChipAttrName = 'mat-basic-chip';\n        var element = this._elementRef.nativeElement;\n\n        if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n          element.classList.add(basicChipAttrName);\n          return;\n        } else {\n          element.classList.add('mat-standard-chip');\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroyed.emit({\n          chip: this\n        });\n\n        this._chipRipple._removeTriggerEvents();\n      }\n      /** Selects the chip. */\n\n    }, {\n      key: \"select\",\n      value: function select() {\n        if (!this._selected) {\n          this._selected = true;\n\n          this._dispatchSelectionChange();\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /** Deselects the chip. */\n\n    }, {\n      key: \"deselect\",\n      value: function deselect() {\n        if (this._selected) {\n          this._selected = false;\n\n          this._dispatchSelectionChange();\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /** Select this chip and emit selected event */\n\n    }, {\n      key: \"selectViaInteraction\",\n      value: function selectViaInteraction() {\n        if (!this._selected) {\n          this._selected = true;\n\n          this._dispatchSelectionChange(true);\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /** Toggles the current selected state of this chip. */\n\n    }, {\n      key: \"toggleSelected\",\n      value: function toggleSelected() {\n        var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        this._selected = !this.selected;\n\n        this._dispatchSelectionChange(isUserInput);\n\n        this._changeDetectorRef.markForCheck();\n\n        return this.selected;\n      }\n      /** Allows for programmatic focusing of the chip. */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        if (!this._hasFocus) {\n          this._elementRef.nativeElement.focus();\n\n          this._onFocus.next({\n            chip: this\n          });\n        }\n\n        this._hasFocus = true;\n      }\n      /**\n       * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n       * BACKSPACE keys are pressed.\n       *\n       * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        if (this.removable) {\n          this.removed.emit({\n            chip: this\n          });\n        }\n      }\n      /** Handles click events on the chip. */\n\n    }, {\n      key: \"_handleClick\",\n      value: function _handleClick(event) {\n        if (this.disabled) {\n          event.preventDefault();\n        } else {\n          event.stopPropagation();\n        }\n      }\n      /** Handle custom key presses. */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        if (this.disabled) {\n          return;\n        }\n\n        switch (event.keyCode) {\n          case DELETE:\n          case BACKSPACE:\n            // If we are removable, remove the focused chip\n            this.remove(); // Always prevent so page navigation does not occur\n\n            event.preventDefault();\n            break;\n\n          case SPACE:\n            // If we are selectable, toggle the focused chip\n            if (this.selectable) {\n              this.toggleSelected(true);\n            } // Always prevent space from scrolling the page since the list has focus\n\n\n            event.preventDefault();\n            break;\n        }\n      }\n    }, {\n      key: \"_blur\",\n      value: function _blur() {\n        var _this2 = this;\n\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n          _this2._ngZone.run(function () {\n            _this2._hasFocus = false;\n\n            _this2._onBlur.next({\n              chip: _this2\n            });\n          });\n        });\n      }\n    }, {\n      key: \"_dispatchSelectionChange\",\n      value: function _dispatchSelectionChange() {\n        var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        this.selectionChange.emit({\n          source: this,\n          isUserInput: isUserInput,\n          selected: this._selected\n        });\n      }\n    }]);\n\n    return MatChip;\n  }(_MatChipMixinBase);\n\n  MatChip.ɵfac = function MatChip_Factory(t) {\n    return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatChip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatChip,\n    selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n    contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"],\n    hostVars: 14,\n    hostBindings: function MatChip_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n          return ctx._handleClick($event);\n        })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"focus\", function MatChip_focus_HostBindingHandler() {\n          return ctx.focus();\n        })(\"blur\", function MatChip_blur_HostBindingHandler() {\n          return ctx._blur();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\",\n      selected: \"selected\",\n      value: \"value\",\n      selectable: \"selectable\",\n      disabled: \"disabled\",\n      removable: \"removable\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\",\n      destroyed: \"destroyed\",\n      removed: \"removed\"\n    },\n    exportAs: [\"matChip\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatChip;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n\n\nvar MatChipRemove = /*#__PURE__*/(function () {\n  var MatChipRemove = /*#__PURE__*/function () {\n    function MatChipRemove(_parentChip, elementRef) {\n      _classCallCheck(this, MatChipRemove);\n\n      this._parentChip = _parentChip;\n\n      if (elementRef.nativeElement.nodeName === 'BUTTON') {\n        elementRef.nativeElement.setAttribute('type', 'button');\n      }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n\n\n    _createClass(MatChipRemove, [{\n      key: \"_handleClick\",\n      value: function _handleClick(event) {\n        var parentChip = this._parentChip;\n\n        if (parentChip.removable && !parentChip.disabled) {\n          parentChip.remove();\n        } // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n\n\n        event.stopPropagation();\n      }\n    }]);\n\n    return MatChipRemove;\n  }();\n\n  MatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n    return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MatChipRemove.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatChipRemove,\n    selectors: [[\"\", \"matChipRemove\", \"\"]],\n    hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n    hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n          return ctx._handleClick($event);\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_CHIP_REMOVE,\n      useExisting: MatChipRemove\n    }])]\n  });\n  return MatChipRemove;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for the chips module. */\n\n\nvar MAT_CHIPS_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-chips-default-options');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n\n/** @docs-private */\n\nvar _MatChipListBase = /*#__PURE__*/mixinErrorState( /*#__PURE__*/function () {\n  function _class(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    _classCallCheck(this, _class);\n\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n  return _createClass(_class);\n}()); // Increasing integer for generating unique ids for chip-list components.\n\n\nvar nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\n\nvar MatChipListChange = /*#__PURE__*/_createClass(function MatChipListChange(\n/** Chip list that emitted the event. */\nsource,\n/** Value of the chip list when the event was emitted. */\nvalue) {\n  _classCallCheck(this, MatChipListChange);\n\n  this.source = source;\n  this.value = value;\n});\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n\n\nvar MatChipList = /*#__PURE__*/(function () {\n  var MatChipList = /*#__PURE__*/function (_MatChipListBase2) {\n    _inherits(MatChipList, _MatChipListBase2);\n\n    var _super2 = _createSuper(MatChipList);\n\n    function MatChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n      var _this3;\n\n      _classCallCheck(this, MatChipList);\n\n      _this3 = _super2.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      _this3._elementRef = _elementRef;\n      _this3._changeDetectorRef = _changeDetectorRef;\n      _this3._dir = _dir;\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n      _this3.controlType = 'mat-chip-list';\n      /**\n       * When a chip is destroyed, we store the index of the destroyed chip until the chips\n       * query list notifies about the update. This is necessary because we cannot determine an\n       * appropriate chip that should receive focus until the array of chips updated completely.\n       */\n\n      _this3._lastDestroyedChipIndex = null;\n      /** Subject that emits when the component has been destroyed. */\n\n      _this3._destroyed = new Subject();\n      /** Uid of the chip list */\n\n      _this3._uid = \"mat-chip-list-\".concat(nextUniqueId$1++);\n      /** Tab index for the chip list. */\n\n      _this3._tabIndex = 0;\n      /**\n       * User defined tab index.\n       * When it is not null, use user defined tab index. Otherwise use _tabIndex\n       */\n\n      _this3._userTabIndex = null;\n      /** Function when touched */\n\n      _this3._onTouched = function () {};\n      /** Function when changed */\n\n\n      _this3._onChange = function () {};\n\n      _this3._multiple = false;\n\n      _this3._compareWith = function (o1, o2) {\n        return o1 === o2;\n      };\n\n      _this3._required = false;\n      _this3._disabled = false;\n      /** Orientation of the chip list. */\n\n      _this3.ariaOrientation = 'horizontal';\n      _this3._selectable = true;\n      /** Event emitted when the selected chip list value has been changed by the user. */\n\n      _this3.change = new EventEmitter();\n      /**\n       * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * @docs-private\n       */\n\n      _this3.valueChange = new EventEmitter();\n\n      if (_this3.ngControl) {\n        _this3.ngControl.valueAccessor = _assertThisInitialized(_this3);\n      }\n\n      return _this3;\n    }\n    /** The array of selected chips inside chip list. */\n\n\n    _createClass(MatChipList, [{\n      key: \"selected\",\n      get: function get() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n      }\n      /** The ARIA role applied to the chip list. */\n\n    }, {\n      key: \"role\",\n      get: function get() {\n        return this.empty ? null : 'listbox';\n      }\n      /** Whether the user should be allowed to select multiple chips. */\n\n    }, {\n      key: \"multiple\",\n      get: function get() {\n        return this._multiple;\n      },\n      set: function set(value) {\n        this._multiple = coerceBooleanProperty(value);\n\n        this._syncChipsState();\n      }\n      /**\n       * A function to compare the option values with the selected values. The first argument\n       * is a value from an option. The second is a value from the selection. A boolean\n       * should be returned.\n       */\n\n    }, {\n      key: \"compareWith\",\n      get: function get() {\n        return this._compareWith;\n      },\n      set: function set(fn) {\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n          // A different comparator means the selection could change.\n          this._initializeSelection();\n        }\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(value) {\n        this.writeValue(value);\n        this._value = value;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"id\",\n      get: function get() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"required\",\n      get: function get() {\n        return this._required;\n      },\n      set: function set(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"placeholder\",\n      get: function get() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n      },\n      set: function set(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n      }\n      /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n\n    }, {\n      key: \"focused\",\n      get: function get() {\n        return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"empty\",\n      get: function get() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"shouldLabelFloat\",\n      get: function get() {\n        return !this.empty || this.focused;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n\n        this._syncChipsState();\n      }\n      /**\n       * Whether or not this chip list is selectable. When a chip list is not selectable,\n       * the selected states for all the chips inside the chip list are always ignored.\n       */\n\n    }, {\n      key: \"selectable\",\n      get: function get() {\n        return this._selectable;\n      },\n      set: function set(value) {\n        var _this4 = this;\n\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.chips) {\n          this.chips.forEach(function (chip) {\n            return chip.chipListSelectable = _this4._selectable;\n          });\n        }\n      }\n    }, {\n      key: \"tabIndex\",\n      set: function set(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n      }\n      /** Combined stream of all of the child chips' selection change events. */\n\n    }, {\n      key: \"chipSelectionChanges\",\n      get: function get() {\n        return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n          return chip.selectionChange;\n        })));\n      }\n      /** Combined stream of all of the child chips' focus change events. */\n\n    }, {\n      key: \"chipFocusChanges\",\n      get: function get() {\n        return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n          return chip._onFocus;\n        })));\n      }\n      /** Combined stream of all of the child chips' blur change events. */\n\n    }, {\n      key: \"chipBlurChanges\",\n      get: function get() {\n        return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n          return chip._onBlur;\n        })));\n      }\n      /** Combined stream of all of the child chips' remove change events. */\n\n    }, {\n      key: \"chipRemoveChanges\",\n      get: function get() {\n        return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n          return chip.destroyed;\n        })));\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this5 = this;\n\n        this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHomeAndEnd().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n        if (this._dir) {\n          this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(function (dir) {\n            return _this5._keyManager.withHorizontalOrientation(dir);\n          });\n        }\n\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(function () {\n          _this5._allowFocusEscape();\n        }); // When the list changes, re-subscribe\n\n\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(function () {\n          if (_this5.disabled) {\n            // Since this happens after the content has been\n            // checked, we need to defer it to the next tick.\n            Promise.resolve().then(function () {\n              _this5._syncChipsState();\n            });\n          }\n\n          _this5._resetChips(); // Reset chips selected/deselected status\n\n\n          _this5._initializeSelection(); // Check to see if we need to update our tab index\n\n\n          _this5._updateTabIndex(); // Check to see if we have a destroyed chip and need to refocus\n\n\n          _this5._updateFocusForDestroyedChips();\n\n          _this5.stateChanges.next();\n        });\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (this.ngControl) {\n          // We need to re-evaluate this on every change detection cycle, because there are some\n          // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n          // that whatever logic is in here has to be super lean or we risk destroying the performance.\n          this.updateErrorState();\n\n          if (this.ngControl.disabled !== this._disabled) {\n            this.disabled = !!this.ngControl.disabled;\n          }\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed.next();\n\n        this._destroyed.complete();\n\n        this.stateChanges.complete();\n\n        this._dropSubscriptions();\n      }\n      /** Associates an HTML input element with this chip list. */\n\n    }, {\n      key: \"registerInput\",\n      value: function registerInput(inputElement) {\n        this._chipInput = inputElement; // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"setDescribedByIds\",\n      value: function setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        if (this.chips) {\n          this._setSelectionByValue(value, false);\n        }\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._onChange = fn;\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this._onTouched = fn;\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"onContainerClick\",\n      value: function onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n          this.focus();\n        }\n      }\n      /**\n       * Focuses the first non-disabled chip in this chip list, or the associated input when there\n       * are no eligible chips.\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus(options) {\n        if (this.disabled) {\n          return;\n        } // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n\n\n        if (this._chipInput && this._chipInput.focused) {// do nothing\n        } else if (this.chips.length > 0) {\n          this._keyManager.setFirstItemActive();\n\n          this.stateChanges.next();\n        } else {\n          this._focusInput(options);\n\n          this.stateChanges.next();\n        }\n      }\n      /** Attempt to focus an input if we have one. */\n\n    }, {\n      key: \"_focusInput\",\n      value: function _focusInput(options) {\n        if (this._chipInput) {\n          this._chipInput.focus(options);\n        }\n      }\n      /**\n       * Pass events to the keyboard manager. Available here for tests.\n       */\n\n    }, {\n      key: \"_keydown\",\n      value: function _keydown(event) {\n        var target = event.target;\n\n        if (target && target.classList.contains('mat-chip')) {\n          this._keyManager.onKeydown(event);\n\n          this.stateChanges.next();\n        }\n      }\n      /**\n       * Check the tab index as you should not be allowed to focus an empty list.\n       */\n\n    }, {\n      key: \"_updateTabIndex\",\n      value: function _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n      }\n      /**\n       * If the amount of chips changed, we need to update the\n       * key manager state and focus the next closest chip.\n       */\n\n    }, {\n      key: \"_updateFocusForDestroyedChips\",\n      value: function _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n          if (this.chips.length) {\n            var newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n\n            this._keyManager.setActiveItem(newChipIndex);\n          } else {\n            this.focus();\n          }\n        }\n\n        this._lastDestroyedChipIndex = null;\n      }\n      /**\n       * Utility to ensure all indexes are valid.\n       *\n       * @param index The index to be checked.\n       * @returns True if the index is valid for our list of chips.\n       */\n\n    }, {\n      key: \"_isValidIndex\",\n      value: function _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n      }\n    }, {\n      key: \"_setSelectionByValue\",\n      value: function _setSelectionByValue(value) {\n        var _this6 = this;\n\n        var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        this._clearSelection();\n\n        this.chips.forEach(function (chip) {\n          return chip.deselect();\n        });\n\n        if (Array.isArray(value)) {\n          value.forEach(function (currentValue) {\n            return _this6._selectValue(currentValue, isUserInput);\n          });\n\n          this._sortValues();\n        } else {\n          var correspondingChip = this._selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple\n          // mode, because we don't know what chip the user interacted with last.\n\n\n          if (correspondingChip) {\n            if (isUserInput) {\n              this._keyManager.setActiveItem(correspondingChip);\n            }\n          }\n        }\n      }\n      /**\n       * Finds and selects the chip based on its value.\n       * @returns Chip that has the corresponding value.\n       */\n\n    }, {\n      key: \"_selectValue\",\n      value: function _selectValue(value) {\n        var _this7 = this;\n\n        var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var correspondingChip = this.chips.find(function (chip) {\n          return chip.value != null && _this7._compareWith(chip.value, value);\n        });\n\n        if (correspondingChip) {\n          isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n\n          this._selectionModel.select(correspondingChip);\n        }\n\n        return correspondingChip;\n      }\n    }, {\n      key: \"_initializeSelection\",\n      value: function _initializeSelection() {\n        var _this8 = this;\n\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(function () {\n          if (_this8.ngControl || _this8._value) {\n            _this8._setSelectionByValue(_this8.ngControl ? _this8.ngControl.value : _this8._value, false);\n\n            _this8.stateChanges.next();\n          }\n        });\n      }\n      /**\n       * Deselects every chip in the list.\n       * @param skip Chip that should not be deselected.\n       */\n\n    }, {\n      key: \"_clearSelection\",\n      value: function _clearSelection(skip) {\n        this._selectionModel.clear();\n\n        this.chips.forEach(function (chip) {\n          if (chip !== skip) {\n            chip.deselect();\n          }\n        });\n        this.stateChanges.next();\n      }\n      /**\n       * Sorts the model values, ensuring that they keep the same\n       * order that they have in the panel.\n       */\n\n    }, {\n      key: \"_sortValues\",\n      value: function _sortValues() {\n        var _this9 = this;\n\n        if (this._multiple) {\n          this._selectionModel.clear();\n\n          this.chips.forEach(function (chip) {\n            if (chip.selected) {\n              _this9._selectionModel.select(chip);\n            }\n          });\n          this.stateChanges.next();\n        }\n      }\n      /** Emits change event to set the model value. */\n\n    }, {\n      key: \"_propagateChanges\",\n      value: function _propagateChanges(fallbackValue) {\n        var valueToEmit = null;\n\n        if (Array.isArray(this.selected)) {\n          valueToEmit = this.selected.map(function (chip) {\n            return chip.value;\n          });\n        } else {\n          valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n\n        this._onChange(valueToEmit);\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /** When blurred, mark the field as touched when focus moved outside the chip list. */\n\n    }, {\n      key: \"_blur\",\n      value: function _blur() {\n        var _this10 = this;\n\n        if (!this._hasFocusedChip()) {\n          this._keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n          if (this._chipInput) {\n            // If there's a chip input, we should check whether the focus moved to chip input.\n            // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n            // to chip input, do nothing.\n            // Timeout is needed to wait for the focus() event trigger on chip input.\n            setTimeout(function () {\n              if (!_this10.focused) {\n                _this10._markAsTouched();\n              }\n            });\n          } else {\n            // If there's no chip input, then mark the field as touched.\n            this._markAsTouched();\n          }\n        }\n      }\n      /** Mark the field as touched */\n\n    }, {\n      key: \"_markAsTouched\",\n      value: function _markAsTouched() {\n        this._onTouched();\n\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      }\n      /**\n       * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n       * user to tab out of it. This prevents the list from capturing focus and redirecting\n       * it back to the first chip, creating a focus trap, if it user tries to tab away.\n       */\n\n    }, {\n      key: \"_allowFocusEscape\",\n      value: function _allowFocusEscape() {\n        var _this11 = this;\n\n        if (this._tabIndex !== -1) {\n          this._tabIndex = -1;\n          setTimeout(function () {\n            _this11._tabIndex = _this11._userTabIndex || 0;\n\n            _this11._changeDetectorRef.markForCheck();\n          });\n        }\n      }\n    }, {\n      key: \"_resetChips\",\n      value: function _resetChips() {\n        this._dropSubscriptions();\n\n        this._listenToChipsFocus();\n\n        this._listenToChipsSelection();\n\n        this._listenToChipsRemoved();\n      }\n    }, {\n      key: \"_dropSubscriptions\",\n      value: function _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n          this._chipFocusSubscription.unsubscribe();\n\n          this._chipFocusSubscription = null;\n        }\n\n        if (this._chipBlurSubscription) {\n          this._chipBlurSubscription.unsubscribe();\n\n          this._chipBlurSubscription = null;\n        }\n\n        if (this._chipSelectionSubscription) {\n          this._chipSelectionSubscription.unsubscribe();\n\n          this._chipSelectionSubscription = null;\n        }\n\n        if (this._chipRemoveSubscription) {\n          this._chipRemoveSubscription.unsubscribe();\n\n          this._chipRemoveSubscription = null;\n        }\n      }\n      /** Listens to user-generated selection events on each chip. */\n\n    }, {\n      key: \"_listenToChipsSelection\",\n      value: function _listenToChipsSelection() {\n        var _this12 = this;\n\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(function (event) {\n          event.source.selected ? _this12._selectionModel.select(event.source) : _this12._selectionModel.deselect(event.source); // For single selection chip list, make sure the deselected value is unselected.\n\n          if (!_this12.multiple) {\n            _this12.chips.forEach(function (chip) {\n              if (!_this12._selectionModel.isSelected(chip) && chip.selected) {\n                chip.deselect();\n              }\n            });\n          }\n\n          if (event.isUserInput) {\n            _this12._propagateChanges();\n          }\n        });\n      }\n      /** Listens to user-generated selection events on each chip. */\n\n    }, {\n      key: \"_listenToChipsFocus\",\n      value: function _listenToChipsFocus() {\n        var _this13 = this;\n\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n          var chipIndex = _this13.chips.toArray().indexOf(event.chip);\n\n          if (_this13._isValidIndex(chipIndex)) {\n            _this13._keyManager.updateActiveItem(chipIndex);\n          }\n\n          _this13.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n          _this13._blur();\n\n          _this13.stateChanges.next();\n        });\n      }\n    }, {\n      key: \"_listenToChipsRemoved\",\n      value: function _listenToChipsRemoved() {\n        var _this14 = this;\n\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(function (event) {\n          var chip = event.chip;\n\n          var chipIndex = _this14.chips.toArray().indexOf(event.chip); // In case the chip that will be removed is currently focused, we temporarily store\n          // the index in order to be able to determine an appropriate sibling chip that will\n          // receive focus.\n\n\n          if (_this14._isValidIndex(chipIndex) && chip._hasFocus) {\n            _this14._lastDestroyedChipIndex = chipIndex;\n          }\n        });\n      }\n      /** Checks whether an event comes from inside a chip element. */\n\n    }, {\n      key: \"_originatesFromChip\",\n      value: function _originatesFromChip(event) {\n        var currentElement = event.target;\n\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n          if (currentElement.classList.contains('mat-chip')) {\n            return true;\n          }\n\n          currentElement = currentElement.parentElement;\n        }\n\n        return false;\n      }\n      /** Checks whether any of the chips is focused. */\n\n    }, {\n      key: \"_hasFocusedChip\",\n      value: function _hasFocusedChip() {\n        return this.chips && this.chips.some(function (chip) {\n          return chip._hasFocus;\n        });\n      }\n      /** Syncs the list's state with the individual chips. */\n\n    }, {\n      key: \"_syncChipsState\",\n      value: function _syncChipsState() {\n        var _this15 = this;\n\n        if (this.chips) {\n          this.chips.forEach(function (chip) {\n            chip._chipListDisabled = _this15._disabled;\n            chip._chipListMultiple = _this15.multiple;\n          });\n        }\n      }\n    }]);\n\n    return MatChipList;\n  }(_MatChipListBase);\n\n  MatChipList.ɵfac = function MatChipList_Factory(t) {\n    return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n  };\n\n  MatChipList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatChipList,\n    selectors: [[\"mat-chip-list\"]],\n    contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-chip-list\"],\n    hostVars: 15,\n    hostBindings: function MatChipList_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n          return ctx.focus();\n        })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n          return ctx._blur();\n        })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n          return ctx._keydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n      }\n    },\n    inputs: {\n      ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n      multiple: \"multiple\",\n      compareWith: \"compareWith\",\n      value: \"value\",\n      required: \"required\",\n      placeholder: \"placeholder\",\n      disabled: \"disabled\",\n      selectable: \"selectable\",\n      tabIndex: \"tabIndex\",\n      errorStateMatcher: \"errorStateMatcher\"\n    },\n    outputs: {\n      change: \"change\",\n      valueChange: \"valueChange\"\n    },\n    exportAs: [\"matChipList\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatChipList\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"mat-chip-list-wrapper\"]],\n    template: function MatChipList_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatChipList;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\n\n\nvar nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n\nvar MatChipInput = /*#__PURE__*/(function () {\n  var MatChipInput = /*#__PURE__*/function () {\n    function MatChipInput(_elementRef, _defaultOptions) {\n      _classCallCheck(this, MatChipInput);\n\n      this._elementRef = _elementRef;\n      this._defaultOptions = _defaultOptions;\n      /** Whether the control is focused. */\n\n      this.focused = false;\n      this._addOnBlur = false;\n      /**\n       * The list of key codes that will trigger a chipEnd event.\n       *\n       * Defaults to `[ENTER]`.\n       */\n\n      this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n      /** Emitted when a chip is to be added. */\n\n      this.chipEnd = new EventEmitter();\n      /** The input's placeholder text. */\n\n      this.placeholder = '';\n      /** Unique id for the input. */\n\n      this.id = \"mat-chip-list-input-\".concat(nextUniqueId++);\n      this._disabled = false;\n      this.inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n\n\n    _createClass(MatChipInput, [{\n      key: \"chipList\",\n      set: function set(value) {\n        if (value) {\n          this._chipList = value;\n\n          this._chipList.registerInput(this);\n        }\n      }\n      /**\n       * Whether or not the chipEnd event will be emitted when the input is blurred.\n       */\n\n    }, {\n      key: \"addOnBlur\",\n      get: function get() {\n        return this._addOnBlur;\n      },\n      set: function set(value) {\n        this._addOnBlur = coerceBooleanProperty(value);\n      }\n      /** Whether the input is disabled. */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled || this._chipList && this._chipList.disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n      }\n      /** Whether the input is empty. */\n\n    }, {\n      key: \"empty\",\n      get: function get() {\n        return !this.inputElement.value;\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        this._chipList.stateChanges.next();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.chipEnd.complete();\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n      }\n      /** Utility method to make host definition/tests more clear. */\n\n    }, {\n      key: \"_keydown\",\n      value: function _keydown(event) {\n        if (event) {\n          // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n          // want to do this when going backwards, because focus should go back to the first chip.\n          if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n          } // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n          // We focus the last chip on backspace only after the user has released the backspace button,\n          // and the input is empty (see behaviour in _keyup)\n\n\n          if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n            this._chipList._keyManager.setLastItemActive();\n\n            event.preventDefault();\n            return;\n          } else {\n            this._focusLastChipOnBackspace = false;\n          }\n        }\n\n        this._emitChipEnd(event);\n      }\n      /**\n       * Pass events to the keyboard manager. Available here for tests.\n       */\n\n    }, {\n      key: \"_keyup\",\n      value: function _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n          this._focusLastChipOnBackspace = true;\n          event.preventDefault();\n        }\n      }\n      /** Checks to see if the blur should emit the (chipEnd) event. */\n\n    }, {\n      key: \"_blur\",\n      value: function _blur() {\n        if (this.addOnBlur) {\n          this._emitChipEnd();\n        }\n\n        this.focused = false; // Blur the chip list if it is not focused\n\n        if (!this._chipList.focused) {\n          this._chipList._blur();\n        }\n\n        this._chipList.stateChanges.next();\n      }\n    }, {\n      key: \"_focus\",\n      value: function _focus() {\n        this.focused = true;\n        this._focusLastChipOnBackspace = this.empty;\n\n        this._chipList.stateChanges.next();\n      }\n      /** Checks to see if the (chipEnd) event needs to be emitted. */\n\n    }, {\n      key: \"_emitChipEnd\",\n      value: function _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n          this._chipList._keydown(event);\n        }\n\n        if (!event || this._isSeparatorKey(event)) {\n          this.chipEnd.emit({\n            input: this.inputElement,\n            value: this.inputElement.value,\n            chipInput: this\n          });\n          event === null || event === void 0 ? void 0 : event.preventDefault();\n        }\n      }\n    }, {\n      key: \"_onInput\",\n      value: function _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n      }\n      /** Focuses the input. */\n\n    }, {\n      key: \"focus\",\n      value: function focus(options) {\n        this.inputElement.focus(options);\n      }\n      /** Clears the input */\n\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n      }\n      /** Checks whether a keycode is one of the configured separators. */\n\n    }, {\n      key: \"_isSeparatorKey\",\n      value: function _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n      }\n    }]);\n\n    return MatChipInput;\n  }();\n\n  MatChipInput.ɵfac = function MatChipInput_Factory(t) {\n    return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n  };\n\n  MatChipInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatChipInput,\n    selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n    hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n    hostVars: 5,\n    hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n          return ctx._keydown($event);\n        })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) {\n          return ctx._keyup($event);\n        })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n          return ctx._blur();\n        })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n          return ctx._focus();\n        })(\"input\", function MatChipInput_input_HostBindingHandler() {\n          return ctx._onInput();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n      }\n    },\n    inputs: {\n      separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n      placeholder: \"placeholder\",\n      id: \"id\",\n      chipList: [\"matChipInputFor\", \"chipList\"],\n      addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n      disabled: \"disabled\"\n    },\n    outputs: {\n      chipEnd: \"matChipInputTokenEnd\"\n    },\n    exportAs: [\"matChipInput\", \"matChipInputFor\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatChipInput;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nvar ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\nvar MatChipsModule = /*#__PURE__*/(function () {\n  var MatChipsModule = /*#__PURE__*/_createClass(function MatChipsModule() {\n    _classCallCheck(this, MatChipsModule);\n  });\n\n  MatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n    return new (t || MatChipsModule)();\n  };\n\n  MatChipsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatChipsModule\n  });\n  MatChipsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [ErrorStateMatcher, {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: ɵ0\n    }],\n    imports: [[MatCommonModule]]\n  });\n  return MatChipsModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: function declarations() {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    },\n    imports: function imports() {\n      return [MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };","map":{"version":3,"names":["SPACE","BACKSPACE","DELETE","TAB","hasModifierKey","ENTER","InjectionToken","Directive","EventEmitter","ElementRef","NgZone","Optional","Inject","ChangeDetectorRef","Attribute","ContentChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Self","ContentChildren","NgModule","mixinTabIndex","mixinColor","mixinDisableRipple","RippleRenderer","MAT_RIPPLE_GLOBAL_OPTIONS","mixinErrorState","ErrorStateMatcher","MatCommonModule","coerceBooleanProperty","Platform","DOCUMENT","ANIMATION_MODULE_TYPE","Subject","merge","take","takeUntil","startWith","FocusKeyManager","Directionality","SelectionModel","NgForm","FormGroupDirective","NgControl","MatFormFieldControl","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_c0","MatChipSelectionChange","source","selected","isUserInput","MAT_CHIP_REMOVE","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","features","ɵɵProvidersFeature","provide","useExisting","ngDevMode","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","elementRef","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_disabled","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","nativeElement","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","disabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","textContent","selectable","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","emit","chip","_removeTriggerEvents","markForCheck","focus","next","removable","event","preventDefault","stopPropagation","keyCode","remove","toggleSelected","onStable","pipe","subscribe","run","MatChip_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","ɵɵlistener","MatChip_click_HostBindingHandler","$event","_handleClick","MatChip_keydown_HostBindingHandler","_handleKeydown","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","_blur","ɵɵattribute","ariaSelected","ɵɵclassProp","inputs","color","outputs","exportAs","ɵɵInheritDefinitionFeature","MatChipRemove","_parentChip","nodeName","setAttribute","parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MAT_CHIPS_DEFAULT_OPTIONS","_MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","nextUniqueId$1","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","empty","_syncChipsState","fn","_initializeSelection","writeValue","_chipInput","id","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","forEach","map","_keyManager","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","updateErrorState","complete","_dropSubscriptions","inputElement","ids","_ariaDescribedby","join","_setSelectionByValue","isDisabled","_originatesFromChip","options","setFirstItemActive","_focusInput","target","contains","onKeydown","newChipIndex","Math","min","setActiveItem","index","_clearSelection","deselect","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","selectViaInteraction","select","skip","clear","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","chipIndex","toArray","indexOf","_isValidIndex","updateActiveItem","chipBlurChanges","chipRemoveChanges","currentElement","parentElement","some","MatChipList_Factory","ɵcmp","ɵɵdefineComponent","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","_keydown","ɵɵhostProperty","role","required","errorState","compareWith","errorStateMatcher","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","nextUniqueId","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_focusLastChipOnBackspace","setLastItemActive","_emitChipEnd","addOnBlur","_isSeparatorKey","input","chipInput","Set","has","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_keyup_HostBindingHandler","_keyup","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","_focus","MatChipInput_input_HostBindingHandler","_onInput","invalid","chipList","ɵɵNgOnChangesFeature","CHIP_DECLARATIONS","ɵ0","MatChipsModule","MatChipsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","useValue","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js"],"sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' },\n                providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }]\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' },\n                providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }]\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._animationsDisabled ||\n            !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n    get selected() { return this._selected; }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() { return this._removable; }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatChip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MAT_CHIP_AVATAR,] }],\n    trailingIcon: [{ type: ContentChild, args: [MAT_CHIP_TRAILING_ICON,] }],\n    removeIcon: [{ type: ContentChild, args: [MAT_CHIP_REMOVE,] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MAT_CHIP_AVATAR]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_TRAILING_ICON]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_REMOVE]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }])] });\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                },\n                providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }]\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nconst _MatChipListBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() { return this.empty ? null : 'listbox'; }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._value; }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() { return this._selectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId++}`;\n        this._disabled = false;\n        this.inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /** Whether the input is disabled. */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether the input is empty. */\n    get empty() { return !this.inputElement.value; }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.chipEnd.complete();\n    }\n    ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        if (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n            // We focus the last chip on backspace only after the user has released the backspace button,\n            // and the input is empty (see behaviour in _keyup)\n            if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n                this._chipList._keyManager.setLastItemActive();\n                event.preventDefault();\n                return;\n            }\n            else {\n                this._focusLastChipOnBackspace = false;\n            }\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n            this._focusLastChipOnBackspace = true;\n            event.preventDefault();\n        }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._focusLastChipOnBackspace = this.empty;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({\n                input: this.inputElement,\n                value: this.inputElement.value,\n                chipInput: this,\n            });\n            event === null || event === void 0 ? void 0 : event.preventDefault();\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this.inputElement.focus(options);\n    }\n    /** Clears the input */\n    clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) { return ctx._keyup($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(keyup)': '_keyup($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); };\nMatChipsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ɵ0\n        }\n    ], imports: [[MatCommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}