{"ast":null,"code":"import _slicedToArray from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _get from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/sonkh/2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, Inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the virtual scrolling strategy. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/cdk/collections';\nvar _c0 = [\"contentWrapper\"];\nvar _c1 = [\"*\"];\nvar VIRTUAL_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\n\nvar FixedSizeVirtualScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {\n    _classCallCheck(this, FixedSizeVirtualScrollStrategy);\n\n    this._scrolledIndexChange = new Subject();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /** The attached viewport. */\n\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n\n\n  _createClass(FixedSizeVirtualScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(viewport) {\n      this._viewport = viewport;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._scrolledIndexChange.complete();\n\n      this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n\n  }, {\n    key: \"updateItemAndBufferSize\",\n    value: function updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n      if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n      }\n\n      this._itemSize = itemSize;\n      this._minBufferPx = minBufferPx;\n      this._maxBufferPx = maxBufferPx;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onContentScrolled\",\n    value: function onContentScrolled() {\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onDataLengthChanged\",\n    value: function onDataLengthChanged() {\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onContentRendered\",\n    value: function onContentRendered() {}\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onRenderedOffsetChanged\",\n    value: function onRenderedOffsetChanged() {}\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index, behavior) {\n      if (this._viewport) {\n        this._viewport.scrollToOffset(index * this._itemSize, behavior);\n      }\n    }\n    /** Update the viewport's total content size. */\n\n  }, {\n    key: \"_updateTotalContentSize\",\n    value: function _updateTotalContentSize() {\n      if (!this._viewport) {\n        return;\n      }\n\n      this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n\n  }, {\n    key: \"_updateRenderedRange\",\n    value: function _updateRenderedRange() {\n      if (!this._viewport) {\n        return;\n      }\n\n      var renderedRange = this._viewport.getRenderedRange();\n\n      var newRange = {\n        start: renderedRange.start,\n        end: renderedRange.end\n      };\n\n      var viewportSize = this._viewport.getViewportSize();\n\n      var dataLength = this._viewport.getDataLength();\n\n      var scrollOffset = this._viewport.measureScrollOffset(); // Prevent NaN as result when dividing by zero.\n\n\n      var firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0; // If user scrolls to the bottom of the list and data changes to a smaller list\n\n      if (newRange.end > dataLength) {\n        // We have to recalculate the first visible index based on new data length and viewport size.\n        var maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n        var newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems)); // If first visible index changed we must update scroll offset to handle start/end buffers\n        // Current range must also be adjusted to cover the new position (bottom of new list).\n\n        if (firstVisibleIndex != newVisibleIndex) {\n          firstVisibleIndex = newVisibleIndex;\n          scrollOffset = newVisibleIndex * this._itemSize;\n          newRange.start = Math.floor(firstVisibleIndex);\n        }\n\n        newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n      }\n\n      var startBuffer = scrollOffset - newRange.start * this._itemSize;\n\n      if (startBuffer < this._minBufferPx && newRange.start != 0) {\n        var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n        newRange.start = Math.max(0, newRange.start - expandStart);\n        newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n      } else {\n        var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n\n        if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n          var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n\n          if (expandEnd > 0) {\n            newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n            newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n          }\n        }\n      }\n\n      this._viewport.setRenderedRange(newRange);\n\n      this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n\n      this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n  }]);\n\n  return FixedSizeVirtualScrollStrategy;\n}();\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\n\n\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\n\n\nvar CdkFixedSizeVirtualScroll = /*#__PURE__*/(function () {\n  var CdkFixedSizeVirtualScroll = /*#__PURE__*/function () {\n    function CdkFixedSizeVirtualScroll() {\n      _classCallCheck(this, CdkFixedSizeVirtualScroll);\n\n      this._itemSize = 20;\n      this._minBufferPx = 100;\n      this._maxBufferPx = 200;\n      /** The scroll strategy used by this directive. */\n\n      this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n\n\n    _createClass(CdkFixedSizeVirtualScroll, [{\n      key: \"itemSize\",\n      get: function get() {\n        return this._itemSize;\n      },\n      set: function set(value) {\n        this._itemSize = coerceNumberProperty(value);\n      }\n      /**\n       * The minimum amount of buffer rendered beyond the viewport (in pixels).\n       * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n       */\n\n    }, {\n      key: \"minBufferPx\",\n      get: function get() {\n        return this._minBufferPx;\n      },\n      set: function set(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n      }\n      /**\n       * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n       */\n\n    }, {\n      key: \"maxBufferPx\",\n      get: function get() {\n        return this._maxBufferPx;\n      },\n      set: function set(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n      }\n    }]);\n\n    return CdkFixedSizeVirtualScroll;\n  }();\n\n  CdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n    return new (t || CdkFixedSizeVirtualScroll)();\n  };\n\n  CdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkFixedSizeVirtualScroll,\n    selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n    inputs: {\n      itemSize: \"itemSize\",\n      minBufferPx: \"minBufferPx\",\n      maxBufferPx: \"maxBufferPx\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: VIRTUAL_SCROLL_STRATEGY,\n      useFactory: _fixedSizeVirtualScrollStrategyFactory,\n      deps: [forwardRef(function () {\n        return CdkFixedSizeVirtualScroll;\n      })]\n    }]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkFixedSizeVirtualScroll;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in ms to throttle the scrolling events by default. */\n\n\nvar DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n\nvar ScrollDispatcher = /*#__PURE__*/(function () {\n  var ScrollDispatcher = /*#__PURE__*/function () {\n    function ScrollDispatcher(_ngZone, _platform, document) {\n      _classCallCheck(this, ScrollDispatcher);\n\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n\n      this._scrolled = new Subject();\n      /** Keeps track of the global `scroll` and `resize` subscriptions. */\n\n      this._globalSubscription = null;\n      /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n\n      this._scrolledCount = 0;\n      /**\n       * Map of all the scrollable references that are registered with the service and their\n       * scroll event subscriptions.\n       */\n\n      this.scrollContainers = new Map();\n      this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n\n\n    _createClass(ScrollDispatcher, [{\n      key: \"register\",\n      value: function register(scrollable) {\n        var _this = this;\n\n        if (!this.scrollContainers.has(scrollable)) {\n          this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(function () {\n            return _this._scrolled.next(scrollable);\n          }));\n        }\n      }\n      /**\n       * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n       * @param scrollable Scrollable instance to be deregistered.\n       */\n\n    }, {\n      key: \"deregister\",\n      value: function deregister(scrollable) {\n        var scrollableReference = this.scrollContainers.get(scrollable);\n\n        if (scrollableReference) {\n          scrollableReference.unsubscribe();\n          this.scrollContainers.delete(scrollable);\n        }\n      }\n      /**\n       * Returns an observable that emits an event whenever any of the registered Scrollable\n       * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n       * to override the default \"throttle\" time.\n       *\n       * **Note:** in order to avoid hitting change detection for every scroll event,\n       * all of the events emitted from this stream will be run outside the Angular zone.\n       * If you need to update any data bindings as a result of a scroll event, you have\n       * to run the callback using `NgZone.run`.\n       */\n\n    }, {\n      key: \"scrolled\",\n      value: function scrolled() {\n        var _this2 = this;\n\n        var auditTimeInMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SCROLL_TIME;\n\n        if (!this._platform.isBrowser) {\n          return of();\n        }\n\n        return new Observable(function (observer) {\n          if (!_this2._globalSubscription) {\n            _this2._addGlobalListener();\n          } // In the case of a 0ms delay, use an observable without auditTime\n          // since it does add a perceptible delay in processing overhead.\n\n\n          var subscription = auditTimeInMs > 0 ? _this2._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : _this2._scrolled.subscribe(observer);\n          _this2._scrolledCount++;\n          return function () {\n            subscription.unsubscribe();\n            _this2._scrolledCount--;\n\n            if (!_this2._scrolledCount) {\n              _this2._removeGlobalListener();\n            }\n          };\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this3 = this;\n\n        this._removeGlobalListener();\n\n        this.scrollContainers.forEach(function (_, container) {\n          return _this3.deregister(container);\n        });\n\n        this._scrolled.complete();\n      }\n      /**\n       * Returns an observable that emits whenever any of the\n       * scrollable ancestors of an element are scrolled.\n       * @param elementOrElementRef Element whose ancestors to listen for.\n       * @param auditTimeInMs Time to throttle the scroll events.\n       */\n\n    }, {\n      key: \"ancestorScrolled\",\n      value: function ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        var ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(function (target) {\n          return !target || ancestors.indexOf(target) > -1;\n        }));\n      }\n      /** Returns all registered Scrollables that contain the provided element. */\n\n    }, {\n      key: \"getAncestorScrollContainers\",\n      value: function getAncestorScrollContainers(elementOrElementRef) {\n        var _this4 = this;\n\n        var scrollingContainers = [];\n        this.scrollContainers.forEach(function (_subscription, scrollable) {\n          if (_this4._scrollableContainsElement(scrollable, elementOrElementRef)) {\n            scrollingContainers.push(scrollable);\n          }\n        });\n        return scrollingContainers;\n      }\n      /** Use defaultView of injected document if available or fallback to global window reference */\n\n    }, {\n      key: \"_getWindow\",\n      value: function _getWindow() {\n        return this._document.defaultView || window;\n      }\n      /** Returns true if the element is contained within the provided Scrollable. */\n\n    }, {\n      key: \"_scrollableContainsElement\",\n      value: function _scrollableContainsElement(scrollable, elementOrElementRef) {\n        var element = coerceElement(elementOrElementRef);\n        var scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n\n        do {\n          if (element == scrollableElement) {\n            return true;\n          }\n        } while (element = element.parentElement);\n\n        return false;\n      }\n      /** Sets up the global scroll listeners. */\n\n    }, {\n      key: \"_addGlobalListener\",\n      value: function _addGlobalListener() {\n        var _this5 = this;\n\n        this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n          var window = _this5._getWindow();\n\n          return fromEvent(window.document, 'scroll').subscribe(function () {\n            return _this5._scrolled.next();\n          });\n        });\n      }\n      /** Cleans up the global scroll listener. */\n\n    }, {\n      key: \"_removeGlobalListener\",\n      value: function _removeGlobalListener() {\n        if (this._globalSubscription) {\n          this._globalSubscription.unsubscribe();\n\n          this._globalSubscription = null;\n        }\n      }\n    }]);\n\n    return ScrollDispatcher;\n  }();\n\n  ScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n    return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n  };\n\n  ScrollDispatcher.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function ScrollDispatcher_Factory() {\n      return new ScrollDispatcher(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT, 8));\n    },\n    token: ScrollDispatcher,\n    providedIn: \"root\"\n  });\n  return ScrollDispatcher;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n\n\nvar CdkScrollable = /*#__PURE__*/(function () {\n  var CdkScrollable = /*#__PURE__*/function () {\n    function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n      var _this6 = this;\n\n      _classCallCheck(this, CdkScrollable);\n\n      this.elementRef = elementRef;\n      this.scrollDispatcher = scrollDispatcher;\n      this.ngZone = ngZone;\n      this.dir = dir;\n      this._destroyed = new Subject();\n      this._elementScrolled = new Observable(function (observer) {\n        return _this6.ngZone.runOutsideAngular(function () {\n          return fromEvent(_this6.elementRef.nativeElement, 'scroll').pipe(takeUntil(_this6._destroyed)).subscribe(observer);\n        });\n      });\n    }\n\n    _createClass(CdkScrollable, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.scrollDispatcher.register(this);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /** Returns observable that emits when a scroll event is fired on the host element. */\n\n    }, {\n      key: \"elementScrolled\",\n      value: function elementScrolled() {\n        return this._elementScrolled;\n      }\n      /** Gets the ElementRef for the viewport. */\n\n    }, {\n      key: \"getElementRef\",\n      value: function getElementRef() {\n        return this.elementRef;\n      }\n      /**\n       * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n       * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n       * left and right always refer to the left and right side of the scrolling container irrespective\n       * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n       * in an RTL context.\n       * @param options specified the offsets to scroll to.\n       */\n\n    }, {\n      key: \"scrollTo\",\n      value: function scrollTo(options) {\n        var el = this.elementRef.nativeElement;\n        var isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.\n\n        if (options.left == null) {\n          options.left = isRtl ? options.end : options.start;\n        }\n\n        if (options.right == null) {\n          options.right = isRtl ? options.start : options.end;\n        } // Rewrite the bottom offset as a top offset.\n\n\n        if (options.bottom != null) {\n          options.top = el.scrollHeight - el.clientHeight - options.bottom;\n        } // Rewrite the right offset as a left offset.\n\n\n        if (isRtl && getRtlScrollAxisType() != 0\n        /* NORMAL */\n        ) {\n          if (options.left != null) {\n            options.right = el.scrollWidth - el.clientWidth - options.left;\n          }\n\n          if (getRtlScrollAxisType() == 2\n          /* INVERTED */\n          ) {\n            options.left = options.right;\n          } else if (getRtlScrollAxisType() == 1\n          /* NEGATED */\n          ) {\n            options.left = options.right ? -options.right : options.right;\n          }\n        } else {\n          if (options.right != null) {\n            options.left = el.scrollWidth - el.clientWidth - options.right;\n          }\n        }\n\n        this._applyScrollToOptions(options);\n      }\n    }, {\n      key: \"_applyScrollToOptions\",\n      value: function _applyScrollToOptions(options) {\n        var el = this.elementRef.nativeElement;\n\n        if (supportsScrollBehavior()) {\n          el.scrollTo(options);\n        } else {\n          if (options.top != null) {\n            el.scrollTop = options.top;\n          }\n\n          if (options.left != null) {\n            el.scrollLeft = options.left;\n          }\n        }\n      }\n      /**\n       * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n       * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n       * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n       * left and right always refer to the left and right side of the scrolling container irrespective\n       * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n       * in an RTL context.\n       * @param from The edge to measure from.\n       */\n\n    }, {\n      key: \"measureScrollOffset\",\n      value: function measureScrollOffset(from) {\n        var LEFT = 'left';\n        var RIGHT = 'right';\n        var el = this.elementRef.nativeElement;\n\n        if (from == 'top') {\n          return el.scrollTop;\n        }\n\n        if (from == 'bottom') {\n          return el.scrollHeight - el.clientHeight - el.scrollTop;\n        } // Rewrite start & end as left or right offsets.\n\n\n        var isRtl = this.dir && this.dir.value == 'rtl';\n\n        if (from == 'start') {\n          from = isRtl ? RIGHT : LEFT;\n        } else if (from == 'end') {\n          from = isRtl ? LEFT : RIGHT;\n        }\n\n        if (isRtl && getRtlScrollAxisType() == 2\n        /* INVERTED */\n        ) {\n          // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n          // 0 when scrolled all the way right.\n          if (from == LEFT) {\n            return el.scrollWidth - el.clientWidth - el.scrollLeft;\n          } else {\n            return el.scrollLeft;\n          }\n        } else if (isRtl && getRtlScrollAxisType() == 1\n        /* NEGATED */\n        ) {\n          // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n          // 0 when scrolled all the way right.\n          if (from == LEFT) {\n            return el.scrollLeft + el.scrollWidth - el.clientWidth;\n          } else {\n            return -el.scrollLeft;\n          }\n        } else {\n          // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n          // (scrollWidth - clientWidth) when scrolled all the way right.\n          if (from == LEFT) {\n            return el.scrollLeft;\n          } else {\n            return el.scrollWidth - el.clientWidth - el.scrollLeft;\n          }\n        }\n      }\n    }]);\n\n    return CdkScrollable;\n  }();\n\n  CdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n    return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n  };\n\n  CdkScrollable.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkScrollable,\n    selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n  });\n  return CdkScrollable;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in ms to throttle the resize events by default. */\n\n\nvar DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n\nvar ViewportRuler = /*#__PURE__*/(function () {\n  var ViewportRuler = /*#__PURE__*/function () {\n    function ViewportRuler(_platform, ngZone, document) {\n      var _this7 = this;\n\n      _classCallCheck(this, ViewportRuler);\n\n      this._platform = _platform;\n      /** Stream of viewport change events. */\n\n      this._change = new Subject();\n      /** Event listener that will be used to handle the viewport change events. */\n\n      this._changeListener = function (event) {\n        _this7._change.next(event);\n      };\n\n      this._document = document;\n      ngZone.runOutsideAngular(function () {\n        if (_platform.isBrowser) {\n          var _window = _this7._getWindow(); // Note that bind the events ourselves, rather than going through something like RxJS's\n          // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n\n\n          _window.addEventListener('resize', _this7._changeListener);\n\n          _window.addEventListener('orientationchange', _this7._changeListener);\n        } // Clear the cached position so that the viewport is re-measured next time it is required.\n        // We don't need to keep track of the subscription, because it is completed on destroy.\n\n\n        _this7.change().subscribe(function () {\n          return _this7._viewportSize = null;\n        });\n      });\n    }\n\n    _createClass(ViewportRuler, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._platform.isBrowser) {\n          var _window2 = this._getWindow();\n\n          _window2.removeEventListener('resize', this._changeListener);\n\n          _window2.removeEventListener('orientationchange', this._changeListener);\n        }\n\n        this._change.complete();\n      }\n      /** Returns the viewport's width and height. */\n\n    }, {\n      key: \"getViewportSize\",\n      value: function getViewportSize() {\n        if (!this._viewportSize) {\n          this._updateViewportSize();\n        }\n\n        var output = {\n          width: this._viewportSize.width,\n          height: this._viewportSize.height\n        }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n        if (!this._platform.isBrowser) {\n          this._viewportSize = null;\n        }\n\n        return output;\n      }\n      /** Gets a ClientRect for the viewport's bounds. */\n\n    }, {\n      key: \"getViewportRect\",\n      value: function getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        var scrollPosition = this.getViewportScrollPosition();\n\n        var _this$getViewportSize = this.getViewportSize(),\n            width = _this$getViewportSize.width,\n            height = _this$getViewportSize.height;\n\n        return {\n          top: scrollPosition.top,\n          left: scrollPosition.left,\n          bottom: scrollPosition.top + height,\n          right: scrollPosition.left + width,\n          height: height,\n          width: width\n        };\n      }\n      /** Gets the (top, left) scroll position of the viewport. */\n\n    }, {\n      key: \"getViewportScrollPosition\",\n      value: function getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n          return {\n            top: 0,\n            left: 0\n          };\n        } // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n\n\n        var document = this._document;\n\n        var window = this._getWindow();\n\n        var documentElement = document.documentElement;\n        var documentRect = documentElement.getBoundingClientRect();\n        var top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n        var left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n        return {\n          top: top,\n          left: left\n        };\n      }\n      /**\n       * Returns a stream that emits whenever the size of the viewport changes.\n       * This stream emits outside of the Angular zone.\n       * @param throttleTime Time in milliseconds to throttle the stream.\n       */\n\n    }, {\n      key: \"change\",\n      value: function change() {\n        var throttleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RESIZE_TIME;\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n      }\n      /** Use defaultView of injected document if available or fallback to global window reference */\n\n    }, {\n      key: \"_getWindow\",\n      value: function _getWindow() {\n        return this._document.defaultView || window;\n      }\n      /** Updates the cached viewport size. */\n\n    }, {\n      key: \"_updateViewportSize\",\n      value: function _updateViewportSize() {\n        var window = this._getWindow();\n\n        this._viewportSize = this._platform.isBrowser ? {\n          width: window.innerWidth,\n          height: window.innerHeight\n        } : {\n          width: 0,\n          height: 0\n        };\n      }\n    }]);\n\n    return ViewportRuler;\n  }();\n\n  ViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n    return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n  };\n\n  ViewportRuler.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function ViewportRuler_Factory() {\n      return new ViewportRuler(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT, 8));\n    },\n    token: ViewportRuler,\n    providedIn: \"root\"\n  });\n  return ViewportRuler;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Checks if the given ranges are equal. */\n\n\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\n\n\nvar SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n\nvar CdkVirtualScrollViewport = /*#__PURE__*/(function () {\n  var CdkVirtualScrollViewport = /*#__PURE__*/function (_CdkScrollable) {\n    _inherits(CdkVirtualScrollViewport, _CdkScrollable);\n\n    var _super = _createSuper(CdkVirtualScrollViewport);\n\n    function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n      var _this8;\n\n      _classCallCheck(this, CdkVirtualScrollViewport);\n\n      _this8 = _super.call(this, elementRef, scrollDispatcher, ngZone, dir);\n      _this8.elementRef = elementRef;\n      _this8._changeDetectorRef = _changeDetectorRef;\n      _this8._scrollStrategy = _scrollStrategy;\n      /** Emits when the viewport is detached from a CdkVirtualForOf. */\n\n      _this8._detachedSubject = new Subject();\n      /** Emits when the rendered range changes. */\n\n      _this8._renderedRangeSubject = new Subject();\n      _this8._orientation = 'vertical'; // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n      // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n      // depending on how the strategy calculates the scrolled index, it may come at a cost to\n      // performance.\n\n      /** Emits when the index of the first element visible in the viewport changes. */\n\n      _this8.scrolledIndexChange = new Observable(function (observer) {\n        return _this8._scrollStrategy.scrolledIndexChange.subscribe(function (index) {\n          return Promise.resolve().then(function () {\n            return _this8.ngZone.run(function () {\n              return observer.next(index);\n            });\n          });\n        });\n      });\n      /** A stream that emits whenever the rendered range changes. */\n\n      _this8.renderedRangeStream = _this8._renderedRangeSubject;\n      /**\n       * The total size of all content (in pixels), including content that is not currently rendered.\n       */\n\n      _this8._totalContentSize = 0;\n      /** A string representing the `style.width` property value to be used for the spacer element. */\n\n      _this8._totalContentWidth = '';\n      /** A string representing the `style.height` property value to be used for the spacer element. */\n\n      _this8._totalContentHeight = '';\n      /** The currently rendered range of indices. */\n\n      _this8._renderedRange = {\n        start: 0,\n        end: 0\n      };\n      /** The length of the data bound to this viewport (in number of items). */\n\n      _this8._dataLength = 0;\n      /** The size of the viewport (in pixels). */\n\n      _this8._viewportSize = 0;\n      /** The last rendered content offset that was set. */\n\n      _this8._renderedContentOffset = 0;\n      /**\n       * Whether the last rendered content offset was to the end of the content (and therefore needs to\n       * be rewritten as an offset to the start of the content).\n       */\n\n      _this8._renderedContentOffsetNeedsRewrite = false;\n      /** Whether there is a pending change detection cycle. */\n\n      _this8._isChangeDetectionPending = false;\n      /** A list of functions to run after the next change detection cycle. */\n\n      _this8._runAfterChangeDetection = [];\n      /** Subscription to changes in the viewport size. */\n\n      _this8._viewportChanges = Subscription.EMPTY;\n\n      if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n      }\n\n      _this8._viewportChanges = viewportRuler.change().subscribe(function () {\n        _this8.checkViewportSize();\n      });\n      return _this8;\n    }\n    /** The direction the viewport scrolls. */\n\n\n    _createClass(CdkVirtualScrollViewport, [{\n      key: \"orientation\",\n      get: function get() {\n        return this._orientation;\n      },\n      set: function set(orientation) {\n        if (this._orientation !== orientation) {\n          this._orientation = orientation;\n\n          this._calculateSpacerSize();\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this9 = this;\n\n        _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnInit\", this).call(this); // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n\n\n        this.ngZone.runOutsideAngular(function () {\n          return Promise.resolve().then(function () {\n            _this9._measureViewportSize();\n\n            _this9._scrollStrategy.attach(_this9);\n\n            _this9.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER)).subscribe(function () {\n              return _this9._scrollStrategy.onContentScrolled();\n            });\n\n            _this9._markChangeDetectionNeeded();\n          });\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.detach();\n\n        this._scrollStrategy.detach(); // Complete all subjects\n\n\n        this._renderedRangeSubject.complete();\n\n        this._detachedSubject.complete();\n\n        this._viewportChanges.unsubscribe();\n\n        _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnDestroy\", this).call(this);\n      }\n      /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n\n    }, {\n      key: \"attach\",\n      value: function attach(forOf) {\n        var _this10 = this;\n\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error('CdkVirtualScrollViewport is already attached.');\n        } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n\n\n        this.ngZone.runOutsideAngular(function () {\n          _this10._forOf = forOf;\n\n          _this10._forOf.dataStream.pipe(takeUntil(_this10._detachedSubject)).subscribe(function (data) {\n            var newLength = data.length;\n\n            if (newLength !== _this10._dataLength) {\n              _this10._dataLength = newLength;\n\n              _this10._scrollStrategy.onDataLengthChanged();\n            }\n\n            _this10._doChangeDetection();\n          });\n        });\n      }\n      /** Detaches the current `CdkVirtualForOf`. */\n\n    }, {\n      key: \"detach\",\n      value: function detach() {\n        this._forOf = null;\n\n        this._detachedSubject.next();\n      }\n      /** Gets the length of the data bound to this viewport (in number of items). */\n\n    }, {\n      key: \"getDataLength\",\n      value: function getDataLength() {\n        return this._dataLength;\n      }\n      /** Gets the size of the viewport (in pixels). */\n\n    }, {\n      key: \"getViewportSize\",\n      value: function getViewportSize() {\n        return this._viewportSize;\n      } // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n      // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n      // setting it to something else, but its error prone and should probably be split into\n      // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n      /** Get the current rendered range of items. */\n\n    }, {\n      key: \"getRenderedRange\",\n      value: function getRenderedRange() {\n        return this._renderedRange;\n      }\n      /**\n       * Sets the total size of all content (in pixels), including content that is not currently\n       * rendered.\n       */\n\n    }, {\n      key: \"setTotalContentSize\",\n      value: function setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n          this._totalContentSize = size;\n\n          this._calculateSpacerSize();\n\n          this._markChangeDetectionNeeded();\n        }\n      }\n      /** Sets the currently rendered range of indices. */\n\n    }, {\n      key: \"setRenderedRange\",\n      value: function setRenderedRange(range) {\n        var _this11 = this;\n\n        if (!rangesEqual(this._renderedRange, range)) {\n          this._renderedRangeSubject.next(this._renderedRange = range);\n\n          this._markChangeDetectionNeeded(function () {\n            return _this11._scrollStrategy.onContentRendered();\n          });\n        }\n      }\n      /**\n       * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n       */\n\n    }, {\n      key: \"getOffsetToRenderedContentStart\",\n      value: function getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n      }\n      /**\n       * Sets the offset from the start of the viewport to either the start or end of the rendered data\n       * (in pixels).\n       */\n\n    }, {\n      key: \"setRenderedContentOffset\",\n      value: function setRenderedContentOffset(offset) {\n        var _this12 = this;\n\n        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'to-start';\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        var isRtl = this.dir && this.dir.value == 'rtl';\n        var isHorizontal = this.orientation == 'horizontal';\n        var axis = isHorizontal ? 'X' : 'Y';\n        var axisDirection = isHorizontal && isRtl ? -1 : 1;\n        var transform = \"translate\".concat(axis, \"(\").concat(Number(axisDirection * offset), \"px)\");\n        this._renderedContentOffset = offset;\n\n        if (to === 'to-end') {\n          transform += \" translate\".concat(axis, \"(-100%)\"); // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n          // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n          // expand upward).\n\n          this._renderedContentOffsetNeedsRewrite = true;\n        }\n\n        if (this._renderedContentTransform != transform) {\n          // We know this value is safe because we parse `offset` with `Number()` before passing it\n          // into the string.\n          this._renderedContentTransform = transform;\n\n          this._markChangeDetectionNeeded(function () {\n            if (_this12._renderedContentOffsetNeedsRewrite) {\n              _this12._renderedContentOffset -= _this12.measureRenderedContentSize();\n              _this12._renderedContentOffsetNeedsRewrite = false;\n\n              _this12.setRenderedContentOffset(_this12._renderedContentOffset);\n            } else {\n              _this12._scrollStrategy.onRenderedOffsetChanged();\n            }\n          });\n        }\n      }\n      /**\n       * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n       * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n       * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n       * @param offset The offset to scroll to.\n       * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n       */\n\n    }, {\n      key: \"scrollToOffset\",\n      value: function scrollToOffset(offset) {\n        var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n        var options = {\n          behavior: behavior\n        };\n\n        if (this.orientation === 'horizontal') {\n          options.start = offset;\n        } else {\n          options.top = offset;\n        }\n\n        this.scrollTo(options);\n      }\n      /**\n       * Scrolls to the offset for the given index.\n       * @param index The index of the element to scroll to.\n       * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n       */\n\n    }, {\n      key: \"scrollToIndex\",\n      value: function scrollToIndex(index) {\n        var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n\n        this._scrollStrategy.scrollToIndex(index, behavior);\n      }\n      /**\n       * Gets the current scroll offset from the start of the viewport (in pixels).\n       * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n       *     in horizontal mode.\n       */\n\n    }, {\n      key: \"measureScrollOffset\",\n      value: function measureScrollOffset(from) {\n        return from ? _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"measureScrollOffset\", this).call(this, from) : _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"measureScrollOffset\", this).call(this, this.orientation === 'horizontal' ? 'start' : 'top');\n      }\n      /** Measure the combined size of all of the rendered items. */\n\n    }, {\n      key: \"measureRenderedContentSize\",\n      value: function measureRenderedContentSize() {\n        var contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n      }\n      /**\n       * Measure the total combined size of the given range. Throws if the range includes items that are\n       * not rendered.\n       */\n\n    }, {\n      key: \"measureRangeSize\",\n      value: function measureRangeSize(range) {\n        if (!this._forOf) {\n          return 0;\n        }\n\n        return this._forOf.measureRangeSize(range, this.orientation);\n      }\n      /** Update the viewport dimensions and re-render. */\n\n    }, {\n      key: \"checkViewportSize\",\n      value: function checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n\n        this._scrollStrategy.onDataLengthChanged();\n      }\n      /** Measure the viewport size. */\n\n    }, {\n      key: \"_measureViewportSize\",\n      value: function _measureViewportSize() {\n        var viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n      }\n      /** Queue up change detection to run. */\n\n    }, {\n      key: \"_markChangeDetectionNeeded\",\n      value: function _markChangeDetectionNeeded(runAfter) {\n        var _this13 = this;\n\n        if (runAfter) {\n          this._runAfterChangeDetection.push(runAfter);\n        } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n\n\n        if (!this._isChangeDetectionPending) {\n          this._isChangeDetectionPending = true;\n          this.ngZone.runOutsideAngular(function () {\n            return Promise.resolve().then(function () {\n              _this13._doChangeDetection();\n            });\n          });\n        }\n      }\n      /** Run change detection. */\n\n    }, {\n      key: \"_doChangeDetection\",\n      value: function _doChangeDetection() {\n        var _this14 = this;\n\n        this._isChangeDetectionPending = false; // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n\n        this.ngZone.run(function () {\n          return _this14._changeDetectorRef.markForCheck();\n        });\n        var runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n\n        var _iterator = _createForOfIteratorHelper(runAfterChangeDetection),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var fn = _step.value;\n            fn();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      /** Calculates the `style.width` and `style.height` for the spacer element. */\n\n    }, {\n      key: \"_calculateSpacerSize\",\n      value: function _calculateSpacerSize() {\n        this._totalContentHeight = this.orientation === 'horizontal' ? '' : \"\".concat(this._totalContentSize, \"px\");\n        this._totalContentWidth = this.orientation === 'horizontal' ? \"\".concat(this._totalContentSize, \"px\") : '';\n      }\n    }]);\n\n    return CdkVirtualScrollViewport;\n  }(CdkScrollable);\n\n  CdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n    return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler));\n  };\n\n  CdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CdkVirtualScrollViewport,\n    selectors: [[\"cdk-virtual-scroll-viewport\"]],\n    viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n      }\n    },\n    hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n    hostVars: 4,\n    hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n      }\n    },\n    inputs: {\n      orientation: \"orientation\"\n    },\n    outputs: {\n      scrolledIndexChange: \"scrolledIndexChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkScrollable,\n      useExisting: CdkVirtualScrollViewport\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 4,\n    consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]],\n    template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n      }\n    },\n    styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CdkVirtualScrollViewport;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\n\n\nfunction getOffset(orientation, direction, node) {\n  var el = node;\n\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n\n  var rect = el.getBoundingClientRect();\n\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n\n\nvar CdkVirtualForOf = /*#__PURE__*/(function () {\n  var CdkVirtualForOf = /*#__PURE__*/function () {\n    function CdkVirtualForOf(\n    /** The view container to add items to. */\n    _viewContainerRef,\n    /** The template to use when stamping out new items. */\n    _template,\n    /** The set of available differs. */\n    _differs,\n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater,\n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n      var _this15 = this;\n\n      _classCallCheck(this, CdkVirtualForOf);\n\n      this._viewContainerRef = _viewContainerRef;\n      this._template = _template;\n      this._differs = _differs;\n      this._viewRepeater = _viewRepeater;\n      this._viewport = _viewport;\n      /** Emits when the rendered view of the data changes. */\n\n      this.viewChange = new Subject();\n      /** Subject that emits when a new DataSource instance is given. */\n\n      this._dataSourceChanges = new Subject();\n      /** Emits whenever the data in the current DataSource changes. */\n\n      this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.\n      startWith(null), // Bundle up the previous and current data sources so we can work with both.\n      pairwise(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n      // new one, passing back a stream of data changes which we run through `switchMap` to give\n      // us a data stream that emits the latest data from whatever the current `DataSource` is.\n      switchMap(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            prev = _ref2[0],\n            cur = _ref2[1];\n\n        return _this15._changeDataSource(prev, cur);\n      }), // Replay the last emitted data when someone subscribes.\n      shareReplay(1));\n      /** The differ used to calculate changes to the data. */\n\n      this._differ = null;\n      /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n\n      this._needsUpdate = false;\n      this._destroyed = new Subject();\n      this.dataStream.subscribe(function (data) {\n        _this15._data = data;\n\n        _this15._onRenderedDataChange();\n      });\n\n      this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(function (range) {\n        _this15._renderedRange = range;\n        ngZone.run(function () {\n          return _this15.viewChange.next(_this15._renderedRange);\n        });\n\n        _this15._onRenderedDataChange();\n      });\n\n      this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n\n\n    _createClass(CdkVirtualForOf, [{\n      key: \"cdkVirtualForOf\",\n      get: function get() {\n        return this._cdkVirtualForOf;\n      },\n      set: function set(value) {\n        this._cdkVirtualForOf = value;\n\n        if (isDataSource(value)) {\n          this._dataSourceChanges.next(value);\n        } else {\n          // If value is an an NgIterable, convert it to an array.\n          this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n      }\n      /**\n       * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n       * the item and produces a value to be used as the item's identity when tracking changes.\n       */\n\n    }, {\n      key: \"cdkVirtualForTrackBy\",\n      get: function get() {\n        return this._cdkVirtualForTrackBy;\n      },\n      set: function set(fn) {\n        var _this16 = this;\n\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ? function (index, item) {\n          return fn(index + (_this16._renderedRange ? _this16._renderedRange.start : 0), item);\n        } : undefined;\n      }\n      /** The template used to stamp out new elements. */\n\n    }, {\n      key: \"cdkVirtualForTemplate\",\n      set: function set(value) {\n        if (value) {\n          this._needsUpdate = true;\n          this._template = value;\n        }\n      }\n      /**\n       * The size of the cache used to store templates that are not being used for re-use later.\n       * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n       */\n\n    }, {\n      key: \"cdkVirtualForTemplateCacheSize\",\n      get: function get() {\n        return this._viewRepeater.viewCacheSize;\n      },\n      set: function set(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n      }\n      /**\n       * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n       * in the specified range. Throws an error if the range includes items that are not currently\n       * rendered.\n       */\n\n    }, {\n      key: \"measureRangeSize\",\n      value: function measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n          return 0;\n        }\n\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error(\"Error: attempted to measure an item that isn't rendered.\");\n        } // The index into the list of rendered views for the first item in the range.\n\n\n        var renderedStartIndex = range.start - this._renderedRange.start; // The length of the range we're measuring.\n\n        var rangeLen = range.end - range.start; // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n\n        var firstNode;\n        var lastNode; // Find the first node by starting from the beginning and going forwards.\n\n        for (var i = 0; i < rangeLen; i++) {\n          var view = this._viewContainerRef.get(i + renderedStartIndex);\n\n          if (view && view.rootNodes.length) {\n            firstNode = lastNode = view.rootNodes[0];\n            break;\n          }\n        } // Find the last node by starting from the end and going backwards.\n\n\n        for (var _i = rangeLen - 1; _i > -1; _i--) {\n          var _view = this._viewContainerRef.get(_i + renderedStartIndex);\n\n          if (_view && _view.rootNodes.length) {\n            lastNode = _view.rootNodes[_view.rootNodes.length - 1];\n            break;\n          }\n        }\n\n        return firstNode && lastNode ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n          // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n          // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n          // changing (need to do this diff).\n          var changes = this._differ.diff(this._renderedItems);\n\n          if (!changes) {\n            this._updateContext();\n          } else {\n            this._applyChanges(changes);\n          }\n\n          this._needsUpdate = false;\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._viewport.detach();\n\n        this._dataSourceChanges.next(undefined);\n\n        this._dataSourceChanges.complete();\n\n        this.viewChange.complete();\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n\n        this._viewRepeater.detach();\n      }\n      /** React to scroll state changes in the viewport. */\n\n    }, {\n      key: \"_onRenderedDataChange\",\n      value: function _onRenderedDataChange() {\n        var _this17 = this;\n\n        if (!this._renderedRange) {\n          return;\n        }\n\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n\n        if (!this._differ) {\n          // Use a wrapper function for the `trackBy` so any new values are\n          // picked up automatically without having to recreate the differ.\n          this._differ = this._differs.find(this._renderedItems).create(function (index, item) {\n            return _this17.cdkVirtualForTrackBy ? _this17.cdkVirtualForTrackBy(index, item) : item;\n          });\n        }\n\n        this._needsUpdate = true;\n      }\n      /** Swap out one `DataSource` for another. */\n\n    }, {\n      key: \"_changeDataSource\",\n      value: function _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n          oldDs.disconnect(this);\n        }\n\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n      }\n      /** Update the `CdkVirtualForOfContext` for all views. */\n\n    }, {\n      key: \"_updateContext\",\n      value: function _updateContext() {\n        var count = this._data.length;\n        var i = this._viewContainerRef.length;\n\n        while (i--) {\n          var view = this._viewContainerRef.get(i);\n\n          view.context.index = this._renderedRange.start + i;\n          view.context.count = count;\n\n          this._updateComputedContextProperties(view.context);\n\n          view.detectChanges();\n        }\n      }\n      /** Apply changes to the DOM. */\n\n    }, {\n      key: \"_applyChanges\",\n      value: function _applyChanges(changes) {\n        var _this18 = this;\n\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, function (record, _adjustedPreviousIndex, currentIndex) {\n          return _this18._getEmbeddedViewArgs(record, currentIndex);\n        }, function (record) {\n          return record.item;\n        }); // Update $implicit for any items that had an identity change.\n\n\n        changes.forEachIdentityChange(function (record) {\n          var view = _this18._viewContainerRef.get(record.currentIndex);\n\n          view.context.$implicit = record.item;\n        }); // Update the context variables on all items.\n\n        var count = this._data.length;\n        var i = this._viewContainerRef.length;\n\n        while (i--) {\n          var view = this._viewContainerRef.get(i);\n\n          view.context.index = this._renderedRange.start + i;\n          view.context.count = count;\n\n          this._updateComputedContextProperties(view.context);\n        }\n      }\n      /** Update the computed properties on the `CdkVirtualForOfContext`. */\n\n    }, {\n      key: \"_updateComputedContextProperties\",\n      value: function _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n      }\n    }, {\n      key: \"_getEmbeddedViewArgs\",\n      value: function _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n          templateRef: this._template,\n          context: {\n            $implicit: record.item,\n            // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n            // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n          },\n          index: index\n        };\n      }\n    }]);\n\n    return CdkVirtualForOf;\n  }();\n\n  CdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {\n    return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkVirtualForOf.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkVirtualForOf,\n    selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n    inputs: {\n      cdkVirtualForOf: \"cdkVirtualForOf\",\n      cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n      cdkVirtualForTemplate: \"cdkVirtualForTemplate\",\n      cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _RecycleViewRepeaterStrategy\n    }])]\n  });\n  return CdkVirtualForOf;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar CdkScrollableModule = /*#__PURE__*/(function () {\n  var CdkScrollableModule = /*#__PURE__*/_createClass(function CdkScrollableModule() {\n    _classCallCheck(this, CdkScrollableModule);\n  });\n\n  CdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) {\n    return new (t || CdkScrollableModule)();\n  };\n\n  CdkScrollableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CdkScrollableModule\n  });\n  CdkScrollableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return CdkScrollableModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, {\n    declarations: [CdkScrollable],\n    exports: [CdkScrollable]\n  });\n})();\n/**\n * @docs-primary-export\n */\n\n\nvar ScrollingModule = /*#__PURE__*/(function () {\n  var ScrollingModule = /*#__PURE__*/_createClass(function ScrollingModule() {\n    _classCallCheck(this, ScrollingModule);\n  });\n\n  ScrollingModule.ɵfac = function ScrollingModule_Factory(t) {\n    return new (t || ScrollingModule)();\n  };\n\n  ScrollingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ScrollingModule\n  });\n  ScrollingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[BidiModule, PlatformModule, CdkScrollableModule], BidiModule, CdkScrollableModule]\n  });\n  return ScrollingModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, {\n    declarations: function declarations() {\n      return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport];\n    },\n    imports: function imports() {\n      return [BidiModule, PlatformModule, CdkScrollableModule];\n    },\n    exports: function exports() {\n      return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };","map":{"version":3,"names":["coerceNumberProperty","coerceElement","i0","InjectionToken","Directive","forwardRef","Input","Injectable","NgZone","Optional","Inject","ElementRef","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","Output","ViewChild","ViewContainerRef","TemplateRef","IterableDiffers","SkipSelf","NgModule","Subject","of","Observable","fromEvent","animationFrameScheduler","asapScheduler","Subscription","isObservable","distinctUntilChanged","auditTime","filter","takeUntil","startWith","pairwise","switchMap","shareReplay","i1","Platform","getRtlScrollAxisType","supportsScrollBehavior","PlatformModule","i2","DOCUMENT","Directionality","BidiModule","isDataSource","ArrayDataSource","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","complete","ngDevMode","Error","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","Math","ceil","newVisibleIndex","max","min","floor","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","value","updateItemAndBufferSize","ɵfac","CdkFixedSizeVirtualScroll_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","inputs","features","ɵɵProvidersFeature","provide","useFactory","deps","ɵɵNgOnChangesFeature","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","scrollable","has","set","elementScrolled","subscribe","scrollableReference","get","unsubscribe","delete","auditTimeInMs","isBrowser","observer","_addGlobalListener","subscription","_removeGlobalListener","forEach","_","container","deregister","elementOrElementRef","ancestors","getAncestorScrollContainers","scrolled","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","defaultView","window","element","scrollableElement","getElementRef","nativeElement","parentElement","runOutsideAngular","_getWindow","ScrollDispatcher_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","CdkScrollable","elementRef","scrollDispatcher","ngZone","dir","_destroyed","_elementScrolled","register","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","scrollWidth","clientWidth","_applyScrollToOptions","scrollTo","scrollTop","scrollLeft","from","LEFT","RIGHT","CdkScrollable_Factory","ɵɵdirectiveInject","DEFAULT_RESIZE_TIME","ViewportRuler","_change","_changeListener","event","addEventListener","change","_viewportSize","removeEventListener","_updateViewportSize","output","width","height","scrollPosition","getViewportScrollPosition","documentElement","documentRect","getBoundingClientRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","rangesEqual","r1","r2","SCROLL_SCHEDULER","requestAnimationFrame","CdkVirtualScrollViewport","_changeDetectorRef","viewportRuler","_detachedSubject","_renderedRangeSubject","_orientation","Promise","resolve","then","run","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","EMPTY","checkViewportSize","orientation","_calculateSpacerSize","_measureViewportSize","attach","onContentScrolled","_markChangeDetectionNeeded","detach","forOf","_forOf","dataStream","data","newLength","length","onDataLengthChanged","_doChangeDetection","size","range","onContentRendered","offset","to","isHorizontal","axis","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","onRenderedOffsetChanged","scrollToIndex","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","viewportEl","runAfter","style","markForCheck","runAfterChangeDetection","fn","CdkVirtualScrollViewport_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","CdkVirtualScrollViewport_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","CdkVirtualScrollViewport_HostBindings","ɵɵclassProp","outputs","useExisting","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","CdkVirtualScrollViewport_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵstyleProp","styles","encapsulation","changeDetection","getOffset","direction","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","_viewRepeater","viewChange","_dataSourceChanges","prev","cur","_changeDataSource","_differ","_needsUpdate","_data","_onRenderedDataChange","_cdkVirtualForOf","Array","_cdkVirtualForTrackBy","item","undefined","viewCacheSize","renderedStartIndex","rangeLen","firstNode","lastNode","i","view","rootNodes","changes","diff","_renderedItems","_updateContext","_applyChanges","slice","find","create","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","forEachIdentityChange","$implicit","last","even","odd","templateRef","cdkVirtualForOf","CdkVirtualForOf_Factory","cdkVirtualForTemplate","cdkVirtualForTemplateCacheSize","useClass","CdkScrollableModule","CdkScrollableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","ScrollingModule","ScrollingModule_Factory","imports"],"sources":["C:/Users/sonkh/2/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/scrolling.js"],"sourcesContent":["import { coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, Inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/cdk/collections';\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() { }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = (this._itemSize > 0) ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() { return this._itemSize; }\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\nCdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n                    }]\n            }]\n    }], function () { return []; }, { itemSize: [{\n            type: Input\n        }], minBufferPx: [{\n            type: Input\n        }], maxBufferPx: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = element.parentElement);\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nScrollDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT, 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nCdkScrollable.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => this._viewportSize = null);\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nViewportRuler.ɵprov = i0.ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT, 8)); }, token: ViewportRuler, providedIn: \"root\" });\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n    }\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        return from ?\n            super.measureScrollOffset(from) :\n            super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler)); };\nCdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    } }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    } }, inputs: { orientation: \"orientation\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkScrollable,\n                useExisting: CdkVirtualScrollViewport\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 4, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    } }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], encapsulation: 2, changeDetection: 0 });\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher },\n    { type: ViewportRuler }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport',\n                template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport\n                    }],\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [VIRTUAL_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ScrollDispatcher }, { type: ViewportRuler }]; }, { scrolledIndexChange: [{\n            type: Output\n        }], orientation: [{\n            type: Input\n        }], _contentWrapper: [{\n            type: ViewChild,\n            args: ['contentWrapper', { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode ?\n            getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), (record) => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false\n            },\n            index,\n        };\n    }\n}\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkVirtualForOf.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n        ])] });\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: _RecycleViewRepeaterStrategy, decorators: [{ type: Inject, args: [_VIEW_REPEATER_STRATEGY,] }] },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                providers: [\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: ɵngcc3._RecycleViewRepeaterStrategy, decorators: [{\n                type: Inject,\n                args: [_VIEW_REPEATER_STRATEGY]\n            }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.NgZone }]; }, { cdkVirtualForOf: [{\n            type: Input\n        }], cdkVirtualForTrackBy: [{\n            type: Input\n        }], cdkVirtualForTemplate: [{\n            type: Input\n        }], cdkVirtualForTemplateCacheSize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) { return new (t || CdkScrollableModule)(); };\nCdkScrollableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkScrollableModule });\nCdkScrollableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollableModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkScrollable],\n                declarations: [CdkScrollable]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, { declarations: [CdkScrollable], exports: [CdkScrollable] }); })();\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); };\nScrollingModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ScrollingModule });\nScrollingModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            BidiModule,\n            PlatformModule,\n            CdkScrollableModule\n        ], BidiModule, CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    BidiModule,\n                    PlatformModule,\n                    CdkScrollableModule\n                ],\n                exports: [\n                    BidiModule,\n                    CdkScrollableModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, { declarations: function () { return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; }, imports: function () { return [BidiModule,\n        PlatformModule, CdkScrollableModule]; }, exports: function () { return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}